Imports System.Linq
Imports System.IO
Imports System.Data
Imports System.Data.SqlClient
Imports Telerik.WinControls
Imports System.Transactions
Imports System.Data.Objects.DataClasses
Imports System.Data.EntityClient

Public Class frmVentaPequenia

    Private codigoCliente As Integer  'variable que nos va a capturar el idcliente cuandose va modificar una cotizacion
    Public inventario As Integer
    Private permiso As New clsPermisoUsuario

    Public facturarVentaPequenia As New cls_FacturarVentaPequenia

    Private _bitEditarSalida As Boolean
    Private _bitEditarBodega As Boolean
    Private _bitFactura As Boolean
    Private _codFact As Integer
    Private _bitSugerirDespacho As Boolean
    Private _bitSugerirReserva As Boolean
    Private _codigo As Integer
    Private _ventaPequenia As Integer

    Dim codigoSalidaAFacturar As Integer ' para facturar las salida Venta pequenia
    Private _bitRealizarPago As Boolean  'si se guarda el despacho vamos a realizar el cobro
   
    Dim valida As New bl_Pedidos
    Private _venta As Integer



    Public Property venta As Integer
        Get
            venta = _venta
        End Get
        Set(ByVal value As Integer)
            _venta = value
        End Set
    End Property

    Public Property bitEditarSalida() As Boolean
        Get
            bitEditarSalida = _bitEditarSalida
        End Get
        Set(ByVal value As Boolean)
            _bitEditarSalida = value
        End Set
    End Property


    Public Property bitEditarBodega() As Boolean
        Get
            bitEditarBodega = _bitEditarBodega
        End Get
        Set(ByVal value As Boolean)
            _bitEditarBodega = value
        End Set
    End Property

    Public Property bitFactura() As Boolean
        Get
            bitFactura = _bitFactura
        End Get
        Set(ByVal value As Boolean)
            _bitFactura = value
        End Set
    End Property

    Public Property codFact() As Integer
        Get
            codFact = _codFact
        End Get
        Set(ByVal value As Integer)
            _codFact = value
        End Set
    End Property

    Public Property bitSugerirDespacho() As Boolean
        Get
            bitSugerirDespacho = _bitSugerirDespacho
        End Get
        Set(ByVal value As Boolean)
            _bitSugerirDespacho = value
        End Set
    End Property

    Public Property bitSugerirReserva() As Boolean
        Get
            bitSugerirReserva = _bitSugerirReserva
        End Get
        Set(ByVal value As Boolean)
            _bitSugerirReserva = value
        End Set
    End Property

    Public Property codigo() As Integer
        Get
            codigo = _codigo
        End Get
        Set(ByVal value As Integer)
            _codigo = value
        End Set
    End Property


    Public Property ventaPequenia() As Integer
        Get
            ventaPequenia = _ventaPequenia
        End Get
        Set(value As Integer)
            _ventaPequenia = value
        End Set
    End Property

  
    Public Property bitRealizarPago() As Boolean
        Get
            bitRealizarPago = _bitRealizarPago
        End Get
        Set(value As Boolean)
            _bitRealizarPago = value
        End Set
    End Property

  


    Private Sub frmVentaPequenia_2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        mdlPublicVars.fnFormatoGridMovimientos(grdProductos)
        mdlPublicVars.fnGrid_iconos(grdProductos)
        mdlPublicVars.comboActivarFiltroLista(cmbInventario)
        ' llenarCombos()

        inventario = mdlPublicVars.General_idTipoInventario
        fnNuevo()
        fnIndicadores()

        Me.grdProductos.BeginEditMode = Telerik.WinControls.RadGridViewBeginEditMode.BeginEditProgrammatically
        grdProductos.CloseEditorWhenValidationFails = True
        grdProductos.StandardTab = False



    End Sub


    Private Sub txtNit_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles txtNit.KeyDown

        If e.KeyCode = Keys.Enter Or e.KeyCode = Keys.Tab Then
            'hacer que codigo cliente sea cero
            codigoCliente = 0

            Try
                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                    conn.Open()
                    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                    '1ro. buscar el cliente.
                    Dim c As tblCliente = (From x In conexion.tblClientes Where x.nit1 = Me.txtNit.Text.Trim Select x).FirstOrDefault

                    '2do. si no existe crearlo.
                    If c Is Nothing Then
                        If RadMessageBox.Show("El Cliente no Existe. ¿Desea Crearlo?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                            frmClientePequenio.Text = "Clientes"
                            frmClientePequenio.txtNit.Text = txtNit.Text
                            frmClientePequenio.ShowDialog()
                            frmClientePequenio.Dispose()

                            If mdlPublicVars.superSearchId = 0 Then
                                'si el retorno no es correcto salir de la funcion.
                                Exit Sub
                            Else
                                txtClave.Text = mdlPublicVars.superSearchClave
                                txtCliente.Text = mdlPublicVars.superSearchNombre
                                codigoCliente = mdlPublicVars.superSearchId
                            End If
                        Else
                            Exit Sub
                        End If
                    Else
                        'codigo de cliente existe.
                        codigoCliente = c.idCliente
                    End If

                    If codigoCliente > 0 Then
                        Me.grdProductos.Columns("txmCodigo").ReadOnly = False
                    Else
                        Me.grdProductos.Columns("txmCodigo").ReadOnly = True
                    End If

                    If codigoCliente <> Nothing Then
                        'consulta el cliente
                        Dim cl As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codigoCliente Select x).FirstOrDefault

                        'informacion del cliente
                        txtClave.Text = cl.clave
                        txtNit.Text = cl.nit1
                        txtCliente.Text = cl.Nombre1

                        'informacion de credito.
                        txtCreditoDisponible.Text = "0.00"
                        rbnCredito.Checked = cl.tblClienteTipoPago.credito
                        rbnContado.Checked = Not cl.tblClienteTipoPago.credito

                    End If
                    conn.Close()
                End Using

            Catch ex As Exception
            End Try
        End If
    End Sub

    Private Sub grdProductos_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles grdProductos.KeyDown
        If Me.grdProductos.RowCount > 0 Then
            If bitEditarSalida = True And verRegistro = False Then
                mdlPublicVars.fnGrid_EliminarFila(sender, e, grdProductos, "iddetalle")
                If e.KeyCode = Keys.Delete And grdProductos.RowCount = 0 Then
                    grdProductos.Rows.AddNew()
                End If
                fnActualizar_Total()
            End If

            Dim c As Integer = Me.grdProductos.CurrentColumn.Index
            Dim f As Integer = 0

            Try
                f = Me.grdProductos.CurrentRow.Index
            Catch ex As Exception
                f = -1
            End Try

            If bitEditarBodega = False And verRegistro = False And f >= 0 Then
                If e.KeyCode = Keys.F2 Then
                    'frmBuscarArticulo.bandera = True 'Cambio de estado para saber que se esta llamando de este formulario
                    If Me.grdProductos.Columns(c).Name = "txbPrecio" Then

                        'Dim estado As Integer = CType(Me.grdProductos.Rows(f).Cells("clrEstado").Value, Integer)
                        ' If (estado = 1 Or estado = 2) Then
                        frmBuscarArticuloPrecios.Text = "Precios"
                        frmBuscarArticuloPrecios.codigo = CType(Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("ID").Value, Integer)
                        frmBuscarArticuloPrecios.codClie = codigoCliente
                        frmBuscarArticuloPrecios.bitVentas = True
                        frmBuscarArticuloPrecios.StartPosition = FormStartPosition.CenterScreen
                        frmBuscarArticuloPrecios.formVentaPequenia = Me
                        permiso.PermisoFrmEspeciales(frmBuscarArticuloPrecios, False)
                        'End If
                    ElseIf Me.grdProductos.Columns(c).Name = "txbObservacion" Then
                        'Obtenemos el valor de la observacion actual
                        Dim texto As String = Me.grdProductos.Rows(f).Cells(c).Value
                        frmTexto.Text = "Ingresar Observación"
                        frmTexto.texto = If(texto Is Nothing, "", texto)
                        frmTexto.StartPosition = FormStartPosition.CenterScreen
                        frmTexto.ShowDialog()

                        If mdlPublicVars.superSearchId > 0 Then
                            If frmTexto.guarda = True Then
                                Me.grdProductos.Rows(f).Cells(c).Value = mdlPublicVars.superSearchNombre
                            End If
                        End If
                    Else
                        If (CInt(codigoCliente > 0)) Then
                            If Me.grdProductos.CurrentRow.Index >= 0 Then
                                If Me.grdProductos.Rows(f).Cells(c).Value Is Nothing Then
                                    mdlPublicVars.superSearchNombre = ""
                                Else
                                    mdlPublicVars.superSearchNombre = LTrim(RTrim(Me.grdProductos.Rows(f).Cells(c).Value))
                                End If


                                frmBuscarArticuloVentaPequenia.codClie = codigoCliente
                                frmBuscarArticuloVentaPequenia.codVendedor = cmbVendedor.SelectedValue
                                frmBuscarArticuloVentaPequenia.StartPosition = FormStartPosition.CenterScreen
                                frmBuscarArticuloVentaPequenia.OpcionRetorno = "salidas"
                                frmBuscarArticuloVentaPequenia.Text = "Buscar Articulos"
                                frmBuscarArticuloVentaPequenia.bitCliente = True
                                frmBuscarArticuloVentaPequenia.bitProveedor = False
                                frmBuscarArticuloVentaPequenia.grdIngresados = grdProductos

                                frmBuscarArticuloVentaPequenia.ventaPequenia = 1

                                frmBuscarArticuloVentaPequenia.formVentaPequenia = Me
                                mdlPublicVars.SiempreEncima(Me.Handle.ToInt32)

                                permiso.PermisoDialogEspeciales(frmBuscarArticuloVentaPequenia)
                                ' frmBuscarArticuloVentaPequenia.Dispose()



                            End If
                        Else
                            alerta.contenido = "Seleccione Cliente"
                            alerta.fnErrorContenido()

                            'cmbCliente.Focus()
                            txtCliente.Focus()
                        End If
                    End If
                End If

            ElseIf bitEditarBodega And f >= 0 Then
                If Me.grdProductos.Columns(c).Name = "txbAjuste" Then
                    'fnMuestraCombo()
                    mdlPublicVars.superSearchId = "0"
                    mdlPublicVars.superSearchNombre = ""
                    fnMuestraCombo()
                ElseIf e.KeyCode = Keys.F2 Then
                    If Me.grdProductos.Columns(c).Name = "txbObservacion" Then
                        'Obtenemos el valor de la observacion actual
                        Dim texto As String = Me.grdProductos.Rows(f).Cells(c).Value

                        frmTexto.Text = "Ingresar Observacion"
                        frmTexto.texto = If(texto Is Nothing, "", texto)
                        frmTexto.StartPosition = FormStartPosition.CenterScreen
                        frmTexto.ShowDialog()

                        If mdlPublicVars.superSearchId > 0 Then
                            If frmTexto.guarda = True Then
                                Me.grdProductos.Rows(f).Cells(c).Value = mdlPublicVars.superSearchNombre
                            End If
                        End If
                    End If
                End If
            End If

            'Para poder editar
            Dim fila As Integer = mdlPublicVars.fnGrid_codigoFilaSeleccionada(grdProductos)
            If e.KeyValue >= 48 And e.KeyValue <= 105 Then
                If fila >= 0 Then
                    Me.grdProductos.Rows(fila).Cells(Me.grdProductos.CurrentColumn.Index).BeginEdit()
                End If
            End If
        End If
    End Sub


    Private Sub grdProductos_CellEndEdit(sender As System.Object, e As Telerik.WinControls.UI.GridViewCellEventArgs) Handles grdProductos.CellEndEdit
        Dim fila As Integer = Me.grdProductos.CurrentRow.Index

        If e.Column.Name = "txmCodigo" Then
            Dim codigo As String = e.Value

            If codigo IsNot Nothing Then
                If codigo.Length > 0 Then
                    fnBuscarArticulo(codigo, e.RowIndex)
                End If
            End If
        End If

        If e.Column.Name = "txmCantidad" Or e.Column.Name = "txmCosto" Or e.Column.Name = "txmCantidadAjuste" Then
            fnActualizar_Total()
        End If

        grdProductos.CloseEditor()
        grdProductos.CancelEdit()
        grdProductos.EditorManager.CloseEditor()
        grdProductos.EditorManager.CancelEdit()
    End Sub


    Private Sub grdProductos_CellFormatting(sender As System.Object, e As Telerik.WinControls.UI.CellFormattingEventArgs) Handles grdProductos.CellFormatting
        mdlPublicVars.fnGrid_FormatoPrecios(sender, e, Me.grdProductos.Columns.Count - 1)
    End Sub

    Private Sub grdProductos_EditorRequired(sender As System.Object, e As Telerik.WinControls.UI.EditorRequiredEventArgs) Handles grdProductos.EditorRequired
        grdProductos.BeginUpdate()
        grdProductos.EndUpdate()
    End Sub


    Private Sub grdProductos_MouseClick(sender As System.Object, e As System.Windows.Forms.MouseEventArgs) Handles grdProductos.MouseClick
        Try
            Dim fila As Integer = Me.grdProductos.CurrentRow.Index
            Dim col As Integer = Me.grdProductos.CurrentColumn.Index
            If fila >= 0 Then
                If grdProductos.Columns(col).Name = "chmContado" Then
                    dtpFechaRegistro.Focus()
                    dtpFechaRegistro.Select()
                    fnActualizar_Total()
                    Me.grdProductos.Focus()
                    Me.grdProductos.Rows(fila).Cells(col).IsSelected = True
                Else
                    Me.grdProductos.Rows(fila).Cells(col).IsSelected = True
                End If
            End If
        Catch ex As Exception

        End Try
    End Sub



    Private Sub grdProductos_SelectionChanged(sender As System.Object, e As System.EventArgs) Handles grdProductos.SelectionChanged
        fnArticulo_informacion()
    End Sub


    Private Sub grdProductos_ValueChanged(sender As System.Object, e As System.EventArgs) Handles grdProductos.ValueChanged
        Dim fila As Integer = Me.grdProductos.CurrentRow.Index
        Dim col As Integer = Me.grdProductos.CurrentColumn.Index
        If fila >= 0 Then
            If col = 7 Then
                dtpFechaRegistro.Focus()
                dtpFechaRegistro.Select()
                fnActualizar_Total()
                Me.grdProductos.Focus()
                Me.grdProductos.Rows(fila).Cells(col).IsSelected = True
            End If
        End If
    End Sub



    Private Sub grdProductos_CellDoubleClick(sender As System.Object, e As Telerik.WinControls.UI.GridViewCellEventArgs) Handles grdProductos.CellDoubleClick
        fnMuestraCombo()
    End Sub


    Private Sub grdProductos_UserDeletedRow(sender As System.Object, e As Telerik.WinControls.UI.GridViewRowEventArgs) Handles grdProductos.UserDeletedRow
        Try
            If Me.grdProductos.Rows.Count = 0 Then
                Me.grdProductos.Rows.AddNew()
                'cmbCliente.Enabled = True
            End If
            'fnBloquearCombo()
            fnActualizar_Total()
        Catch ex As Exception

        End Try
    End Sub


    Private Sub llenarCombos()

        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            'consultar vendedores.
            Dim ven = (From x In conexion.tblVendedors Select Codigo = CType(0, Integer), Nombre = CType("<-- Ninguno -->", String)).Union( _
                        From s In conexion.tblVendedors _
                        Select Codigo = CType(s.idVendedor, Integer), Nombre = CType(s.nombre, String) Order By Nombre)

            'llenar el combo de vendedores.
            With Me.cmbVendedor
                .DataSource = Nothing
                .ValueMember = "Codigo"
                .DisplayMember = "Nombre"
                .DataSource = ven
            End With
            cmbVendedor.Select(0, 0)
            'consultar clientes

            'Llenamos los inventario
            Dim inv = From x In conexion.tblTipoInventarios _
                      Select Codigo = x.idTipoinventario, Nombre = x.nombre

            With Me.cmbInventario
                .DataSource = Nothing
                .ValueMember = "Codigo"
                .DisplayMember = "Nombre"
                .DataSource = inv
            End With

            conn.Close()
        End Using
    End Sub

    'Nuevo
    Private Sub fnNuevo()
        llenarCombos()
        lblSaldoInicial.Text = 0
        lblSaldoFinal.Text = 0
        lblRecuento.Text = 0

        If verRegistro = True Or bitEditarBodega = True Or bitEditarSalida = True Then
            pnx0Nuevo.Visible = False
            pnx1Cotizar.Visible = False

            'pnx2Reservar.Visible = False
            ' pnx3Despachar.Visible = False

            ' pnx5Modificar.Visible = False 'se quito en venta pequenia

            ' pnx5Bitacora.Visible = False
            ' pnx6Impresiones.Visible = False
            Me.grdProductos.AllowDeleteRow = False
        End If

        If (bitEditarBodega = True Or bitEditarSalida = True) And verRegistro = False Then

            'pnx5Modificar.Visible = True 'se quito en venta pequenia

        End If
        'si esta en modo edicion, que no permita eliminar productos solo colocar en existencia 0
        If bitEditarBodega = True Then
            'EDITAR EN BODEGA.
            Me.grdProductos.AllowDeleteRow = False
            dtpFechaRegistro.Enabled = False

            cmbVendedor.Enabled = False

            'ocultar columnas
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False

            'ver columnas.
            Me.grdProductos.Columns("txbAjuste").IsVisible = True
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = True

            'cantidad no editable.
            Me.grdProductos.Columns("txmCantidad").ReadOnly = True
            Me.grdProductos.Columns("txmCodigo").ReadOnly = True

            'llenar datos de encabezado y detalle.
            If bitFactura = True Then
                fnLlenarFactura(codFact)
            Else
                fnLlenarDatos()
            End If

            If verRegistro = True Then
                Me.grdProductos.Columns("txbAjuste").IsVisible = False
                Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False
                Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False
                Me.grdProductos.Columns("chmContado").IsVisible = False
            End If
        ElseIf bitEditarSalida = True Then
            'EDITAR SALIDA

            'no permite eliminar productos del grid.
            Me.grdProductos.AllowDeleteRow = False

            'deshabilita opciones de encabezado.
            dtpFechaRegistro.Enabled = False
            'cmbCliente.Enabled = False
            cmbInventario.Enabled = False
            cmbVendedor.Enabled = False
            'cmbDirEnvios.Enabled = False

            'oculta las columnas que sirven en ajuste de bodega.
            'Me.grdProductos.Columns("idajuste").IsVisible = False
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False
            Me.grdProductos.Columns("txbAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False

            If chkCotizado.CheckState = True Or chkReservado.CheckState = False And chkDespachado.CheckState = False Then
                'Columna Cantidad de ESCRITURA.
                Me.grdProductos.Columns("txmCantidad").ReadOnly = False
            Else
                'Columna cantidad solo de lectura
                Me.grdProductos.Columns("txmCantidad").ReadOnly = True
            End If

            'LLENAR ENCABEZADO Y DETALLE
            fnLlenarDatos()
            If verRegistro = False Then
                fnNuevaFila()
            End If

            If bitSugerirDespacho = True Or bitSugerirReserva = True Then
                If bitSugerirDespacho = True Then
                    '  pnx3Despachar.Visible = True
                    ' pnx5Modificar.Visible = False 'se quito en venta pequenia
                ElseIf bitSugerirReserva Then
                    '   pnx2Reservar.Visible = True
                    'pnx5Modificar.Visible = False ' se quito en venta pequenia
                End If
                'fnSugerir()
            End If

            If verRegistro = True Then
                Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False
                Me.grdProductos.Columns("chmContado").IsVisible = False
            End If
        Else

            'NUEVO

            'asignacion de vendedor.
            cmbVendedor.SelectedValue = mdlPublicVars.idVendedor
            cmbVendedor.Enabled = False

            'estado del pedido.
            chkCotizado.Checked = False
            chkReservado.Checked = False
            chkDespachado.Checked = False

            'si editar = false,  nuevo
            Me.grdProductos.AllowDeleteRow = True
            dtpFechaRegistro.Enabled = True

            txtNit.Text = ""
            txtCodigo.Text = ""
            txtCliente.Text = ""
            txtClave.Text = ""
            txtCredito.Text = "0.00"
            txtContado.Text = "0.00"
            dtpFechaRegistro.Text = Format(Now, mdlPublicVars.formatoFecha).ToString
            lblDocumento.Text = fnCorrelativo()
            Me.grdProductos.Rows.Clear()

            'Me.grdProductos.Columns("idajuste").IsVisible = False
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False
            Me.grdProductos.Columns("txbAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidad").ReadOnly = False
            Me.grdProductos.Columns("chmContado").IsVisible = False
            Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False

            Me.fnNuevaFila()

            'ponemos false imprimir factuar
            mdlPublicVars.bitImprimirFacturaVentaPequenia = False
            bitRealizarPago = False
            mdlPublicVars.bitCrearFacturaVentaPequenia = False
            mdlPublicVars.listaDeFacturas.Clear()

        End If
        'fnVerificaCredito()
        dtpFechaRegistro.Select()
        dtpFechaRegistro.Focus()
    End Sub

    'Funcion utilizada para ver los indicadores
    Private Sub fnIndicadores()




        ''NUEVO
        'Dim fechaActual As DateTime = CType(mdlPublicVars.fnFecha_horaServidor, DateTime)
        'Dim diferenciaMes As DateTime = fechaActual.AddDays(-mdlPublicVars.Empresa_DiasUltimosProductos)

        ''ulo.tblUnidadMedida.nombre, txmSurtir = 0)
        'Dim tabla As DataTable = EntitiToDataTable(ctx.sp_buscar_Articulo(mdlPublicVars.idEmpresa, diferenciaMes.ToShortDateString, mdlPublicVars.General_idTipoInventario, mdlPublicVars.General_idAlmacenPrincipal, "", "", 1, 4, True, False, "", venta))

        'lblConteoNuevo.Text = tabla.Rows.Count
        'If tabla.Rows.Count > 0 Then
        '    lblFondoNuevo.BackColor = Color.Green
        'Else
        '    lblFondoNuevo.BackColor = Color.White
        'End If

        ''OFERTAS
        'diferenciaMes = fechaActual.AddDays(-mdlPublicVars.General_NumeroDiasBitacoraProductos)
        'tabla = EntitiToDataTable((From x In ctx.tblBitacoraPreciosArticuloes Where x.fechaRegistro > diferenciaMes _
        '                         Select x))

        'lblConteoOfertas.Text = tabla.Rows.Count
        'If tabla.Rows.Count > 0 Then
        '    lblFondoOferta.BackColor = Color.Green
        'Else
        '    lblFondoOferta.BackColor = Color.White
        'End If

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            Try
                'NUEVO
                Dim fechaActual As DateTime = CType(mdlPublicVars.fnFecha_horaServidor, DateTime)
                Dim diferenciaMes As DateTime = fechaActual.AddDays(-mdlPublicVars.Empresa_DiasUltimosProductos)

                'ulo.tblUnidadMedida.nombre, txmSurtir = 0)
                Dim tabla = conexion.sp_buscar_Articulo(mdlPublicVars.idEmpresa, diferenciaMes.ToShortDateString, mdlPublicVars.General_idTipoInventario, mdlPublicVars.General_idAlmacenPrincipal, "", "", 1, 8, True, False, "", venta).ToList

                lblConteoNuevo.Text = tabla.Count
                If tabla.Count > 0 Then
                    lblFondoNuevo.BackColor = Color.Green
                Else
                    lblFondoNuevo.BackColor = Color.White
                End If

                'OFERTAS
                diferenciaMes = fechaActual.AddDays(-mdlPublicVars.General_NumeroDiasBitacoraProductos)
                tabla = (From x In conexion.tblBitacoraPreciosArticuloes Where x.fechaRegistro > diferenciaMes _
                                        And x.tblArticulo_Precio.tipoPrecio = mdlPublicVars.BuscarArticulo_CodigoOferta And x.tblArticulo_Precio.habilitado = True Select x).ToList


                lblConteoOfertas.Text = tabla.Count
                If tabla.Count > 0 Then
                    lblFondoOferta.BackColor = Color.Green
                Else
                    lblFondoOferta.BackColor = Color.White
                End If

            Catch ex As Exception
                MessageBox.Show("Error en Indicadores : " + ex.ToString)
            End Try

            conn.Close()
        End Using


    End Sub

    'Funcion utilizada para obtener el correlativo
    Private Function fnCorrelativo() As Integer

        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try


                Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos.AsEnumerable
                                                 Where x.idTipoMovimiento = mdlPublicVars.Salida_TipoMovimientoVenta And x.idEmpresa = mdlPublicVars.idEmpresa
                                                 Select x).FirstOrDefault
                If correlativo IsNot Nothing Then
                    Return correlativo.correlativo + 1
                Else
                    'Creamos el nuevo correlativo
                    Dim correlativoNuevo As New tblCorrelativo
                    correlativoNuevo.correlativo = 1
                    correlativoNuevo.serie = ""
                    correlativoNuevo.inicio = 1
                    correlativoNuevo.fin = 1000
                    correlativoNuevo.porcentajeAviso = 20
                    correlativoNuevo.idEmpresa = mdlPublicVars.idEmpresa
                    correlativoNuevo.idTipoMovimiento = mdlPublicVars.Salida_TipoMovimientoVenta
                    ctx.AddTotblCorrelativos(correlativoNuevo)
                    ctx.SaveChanges()
                    Return 1
                End If

            Catch ex As Exception

            End Try
            conn.Close()
        End Using

    End Function


    Public Sub fnNuevaFila()
        fnEliminaVacias()
        Me.grdProductos.Rows.AddNew()
    End Sub


    'Funcion utilizada para eliminar filas vacias
    Private Sub fnEliminaVacias()
        Try
            'Recorremos el grid

            Dim nombre As String = ""
            For i As Integer = 0 To Me.grdProductos.Rows.Count - 1
                'Obtenemo el valor del nombre
                nombre = Me.grdProductos.Rows(i).Cells("txbProducto").Value

                If IsNothing(nombre) Then
                    Me.grdProductos.Rows.RemoveAt(i)
                End If
            Next
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'Funcion que se utliza para llenar los datos de unqa salida cuando se esta en modificar
    Private Sub fnLlenarDatos()
        Try
            grdProductos.Rows.Clear()

            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities

            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).First()

                'ctx.Refresh(Objects.RefreshMode.ClientWins, conexion.tblSalidas)

                inventario = salida.idTipoInventario
                txtCodigo.Text = salida.idSalida

                'cmbCliente.SelectedValue = salida.idCliente

                codigoCliente = salida.idCliente

                


                'llenamos datos del cliente
                Dim cl As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codigoCliente Select x).FirstOrDefault
                txtClave.Text = cl.clave
                'txtNit.Text = cl.nit1
                'txtCliente.Text = cl.Nombre1


                'se agrego para mostrar datos de mostrador
                txtCliente.Text = salida.cliente
                txtNit.Text = salida.nit


                cmbVendedor.SelectedValue = salida.idVendedor
                cmbVendedor.Select(0, 0)
                lblDocumento.Text = salida.documento
                'txtObservacion.Text = salida.observacion

                dtpFechaRegistro.Text = salida.fechaRegistro
                rbnContado.Checked = salida.contado
                rbnCredito.Checked = salida.credito

                ' txtDireccionFacturacion.Text = salida.direccionFacturacion
                ' cmbDirEnvios.Text = salida.direccionEnvio

                ' estado
                chkCotizado.Checked = salida.cotizado
                chkReservado.Checked = salida.reservado
                chkDespachado.Checked = salida.despachar

                'Obtenemos la lista de detalles
                Dim listaDetalles As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.idSalida = codigo Select x).ToList
                Dim detalle As tblSalidaDetalle

                For Each detalle In listaDetalles
                    If detalle.anulado = False And detalle.kitSalidaDetalle Is Nothing Then
                        Dim fila As Object()
                        fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, detalle.precio, _
                             detalle.cantidad * detalle.precio, salida.contado, detalle.comentario, "0", "", "0", "0", "0", "0", detalle.tipoInventario, detalle.tipoPrecio}
                        grdProductos.Rows.Add(fila)
                    End If
                Next

                fnActualizar_Total()
                conn.Close()
            End Using

        Catch ex As Exception
        End Try
    End Sub

    'Funcion que se utiliza para agregar articulos
    Public Sub fnAgregar_Articulos(ByVal surtir As Boolean)
        'agregar productos a grid.
        Dim filas() As String

        'id, codigo,nombre,precio,cantidad
        filas = {"0", mdlPublicVars.superSearchId, mdlPublicVars.superSearchCodigo, mdlPublicVars.superSearchNombre, mdlPublicVars.superSearchCantidad,
                 Format(mdlPublicVars.superSearchPrecio, mdlPublicVars.formatoMoneda), "0", False, "", 0, "", 0, 0, 0,
                 mdlPublicVars.superSearchSurtir, mdlPublicVars.superSearchInventario, mdlPublicVars.superSearchTipoPrecio, mdlPublicVars.superSearchEstado}
        grdProductos.Rows.Add(filas)
        If surtir = True Then
            Me.grdProductos.Rows(Me.grdProductos.RowCount - 1).IsVisible = False
        End If
        grdProductos.Columns(3).IsCurrent = True
        grdProductos.Rows(grdProductos.Rows.Count - 1).IsCurrent = True
        fnActualizar_Total()

    End Sub

    'Funcion utilizada para calcular el total de la venta
    Public Sub fnActualizar_Total()
        Try
            If Me.grdProductos.Rows.Count > 0 Then
                Dim suma As Decimal = 0
                Dim sumaCredito As Decimal = 0
                Dim sumaContado As Decimal = 0

                Dim cantidad As Double = 0
                Dim cantidadAjuste As Double = 0
                Dim idajuste As Integer = 0
                Dim precio As Decimal = 0
                Dim total As Decimal = 0
                Dim credito As Boolean = 0
                Dim index

                Dim ajustePositivo As Decimal = 0
                Dim ajusteNegativo As Decimal = 0
                Dim nombre As String = ""
                Dim numeroProductos As Integer = 0
                For index = 0 To Me.grdProductos.Rows.Count - 1
                    cantidad = CType(Me.grdProductos.Rows(index).Cells("txmCantidad").Value, Double)

                    nombre = CType(Me.grdProductos.Rows(index).Cells("txbProducto").Value, String)

                    If nombre IsNot Nothing Then
                        precio = CType(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", ""), Decimal)
                        If bitEditarBodega = True And verRegistro = False Then
                            If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) Then

                                cantidadAjuste = CType(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value, Double)
                                Try
                                    idajuste = CType(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value, Integer)
                                Catch ex As Exception
                                    idajuste = 0
                                End Try

                                Dim ac As tblTipoMovimiento = (From x In ctx.tblTipoMovimientoes.AsEnumerable Where x.idTipoMovimiento = idajuste Select x).FirstOrDefault

                                If ac IsNot Nothing Then
                                    If ac.nombre.Contains("-") = True Then
                                        'cantidad = cantidad - cantidadAjuste
                                        ajusteNegativo += (cantidadAjuste * precio)
                                    Else
                                        'cantidad = cantidad + cantidadAjuste
                                        ajustePositivo += (cantidadAjuste * precio)
                                    End If
                                End If
                            End If
                        End If

                        If (cantidad * precio) = 0 Then
                            Me.grdProductos.Rows(index).Cells("Total").Value = "0"
                            total = 0


                        Else
                            If Me.grdProductos.Rows(index).IsVisible Then
                                Me.grdProductos.Rows(index).Cells("Total").Value = Format(cantidad * precio, mdlPublicVars.formatoMoneda).ToString

                                If rbnCredito.Checked Then
                                    If (Me.grdProductos.Rows(index).Cells("chmContado").Value = True) Then
                                        sumaContado = sumaContado + CType(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim, Decimal)
                                    Else
                                        sumaCredito = sumaCredito + CType(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim, Decimal)
                                    End If
                                Else
                                    sumaContado = sumaContado + CType(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim, Decimal)
                                End If
                            End If
                        End If

                        If Me.grdProductos.Rows(index).IsVisible Then
                            numeroProductos += 1
                        End If
                    End If
                Next

                suma = sumaContado + sumaCredito + suma

                'mostrar total menos descuentos.
                txtContado.Text = Format(sumaContado, mdlPublicVars.formatoMoneda)
                txtCredito.Text = Format(sumaCredito, mdlPublicVars.formatoMoneda)
                lblSaldoInicial.Text = Format(sumaContado + sumaCredito, mdlPublicVars.formatoMoneda)
                lblSaldoFinal.Text = Format(sumaContado + sumaCredito + ajustePositivo - ajusteNegativo, mdlPublicVars.formatoMoneda)

                'lblSaldoAjuste.Text = Format(CDec(Replace(lblSaldoFinal.Text, "Q", "").Trim) - CDec(Replace(lblSaldoInicial.Text, "Q", "").Trim), mdlPublicVars.formatoMoneda)

                lblRecuento.Text = numeroProductos.ToString

            Else
                lblSaldoFinal.Text = Format(0, mdlPublicVars.formatoMoneda)
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

        'verificar el credito del cliente
        'fnVerificaCredito()
    End Sub

    'Funcion utilizada para llenar los datos de una factura
    Private Sub fnLlenarFactura(ByVal codigo As Integer)
        Try
            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities

            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                'Obtenemos los datos de la factura
                Dim factura As tblFactura = (From x In conexion.tblFacturas Where x.IdFactura = codigo Select x).FirstOrDefault

                dtpFechaRegistro.Value = factura.Fecha
                rbnContado.Checked = factura.contado
                rbnCredito.Checked = factura.contado


                'Obtenemos los pedidos de la factura
                Dim lPedidos As List(Of tblSalida) = (From x In conexion.tblSalidas Where x.IdFactura = codigo _
                                                  And x.anulado = False Select x).ToList

                Dim pedido As tblSalida

                Dim dirEnvios As String = ""
                Dim vendedores As String = ""
                Dim documentos As String = ""
                For Each pedido In lPedidos


                    'cmbCliente.SelectedValue = pedido.idCliente
                    codigoCliente = pedido.idCliente

                    vendedores += pedido.tblVendedor.nombre & ", "
                    dirEnvios += pedido.direccionEnvio & ","

                    txtCliente.Text = pedido.cliente

                    txtNit.Text = pedido.nit
                    'txtDireccionFacturacion.Text = pedido.direccionFacturacion
                    documentos += pedido.documento & ", "
                    'txtObservacion.Text += pedido.observacion & "; "


                    'AGREGAMOS LOS PRODUCTOS AL GRID

                    'Obtenemos el detalle de ese pedido
                    Dim lDetalles As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.idSalida = pedido.idSalida _
                                                              Select x).ToList

                    'Dim lBodega As List(Of tblsalidaBodega ) = (From x In ctx.tblsalidaBodegas Where x.idsalida)

                    Dim detalle As tblSalidaDetalle

                    For Each detalle In lDetalles
                        'Obtenemos si se hicieron ajustes
                        Dim ajuste As tblAjuste = (From x In conexion.tblAjustes Where x.idsalidadetalle = detalle.idSalidaDetalle _
                                               Select x).FirstOrDefault


                        'Creamos la fila para agregar al grid
                        Dim fila As Object()

                        If ajuste IsNot Nothing Then

                            fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, _
                            detalle.precio, "0", detalle.tblSalida.contado, ajuste.idAjusteCategoria, ajuste.tblAjusteCategoria.nombre, ajuste.cantidad, "0", "0", "0", _
                            detalle.tipoInventario, detalle.tipoPrecio}
                        Else

                            fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, _
                            detalle.precio, "0", detalle.tblSalida.contado, "0", "", "", "0", "0", "0", detalle.tipoInventario, detalle.tipoPrecio}
                        End If

                        'Agregamos la fila
                        Me.grdProductos.Rows.Add(fila)
                    Next
                Next

                'cmbDirEnvios.Text = dirEnvios
                cmbVendedor.Text = vendedores
                cmbVendedor.Select(0, 0)
                lblDocumento.Text = documentos

                conn.Close()
            End Using

            fnActualizar_Total()
        Catch ex As Exception

        End Try
    End Sub

    'Muestra en el combo de tipo de ajuste
    Private Sub fnMuestraCombo()
        Dim tbl As New DataTable
        tbl.Columns.Add("Codigo")
        tbl.Columns.Add("Nombre")

        Try
            Dim col As Integer = Me.grdProductos.CurrentColumn.Index
            Dim fil As Integer = Me.grdProductos.CurrentRow.Index

            'Sacado
            If Me.grdProductos.Columns(col).Name.ToString.ToLower = "txbajuste" Then

                Dim cons
                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                    conn.Open()
                    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


                    cons = (From x In conexion.tblTipoMovimientoes.AsEnumerable
                                Where x.ajusteVenta
                                Select Codigo = x.idTipoMovimiento, Nombre = x.nombre + " : " + If(x.idTipoInventario Is Nothing, "", x.tblTipoInventario.nombre))

                    conn.Close()
                End Using

                'agregar datos.
                tbl.Rows.Add(CType(0, Integer), "Ninguno")

                Dim item
                For Each item In cons
                    tbl.Rows.Add(item.codigo, item.nombre)
                Next



                With frmCombo.combo
                    .DataSource = Nothing
                    .ValueMember = "Codigo"
                    .DisplayMember = "Nombre"
                    .DataSource = tbl
                End With

                frmCombo.Text = "Tipo de Ajuste"
                frmCombo.ShowDialog()

                If mdlPublicVars.superSearchId = 0 Then
                    Me.grdProductos.Rows(fil).Cells("idajustecategoria").Value = 0
                    Me.grdProductos.Rows(fil).Cells("txbAjuste").Value = ""
                    Me.grdProductos.Rows(fil).Cells("txmCantidadAjuste").Value = ""
                Else
                    'actualizar
                    Me.grdProductos.Rows(fil).Cells("idajustecategoria").Value = mdlPublicVars.superSearchId
                    Me.grdProductos.Rows(fil).Cells("txbAjuste").Value = mdlPublicVars.superSearchNombre
                End If
            End If ' fin de sacado.

        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

        fnActualizar_Total()
    End Sub

    'Funcion que se utiliza para remover la fila actual
    Public Sub fnRemoverFila()
        Dim filaActual As Integer = CType(Me.grdProductos.CurrentRow.Index, Integer)

        If filaActual >= 0 Then
            Dim index
            Dim yaBorro As Boolean = False

            For index = filaActual To Me.grdProductos.Rows.Count - 1
                Dim codigoArt As Integer = CType(Me.grdProductos.Rows(filaActual).Cells("Id").Value, Integer)
                If yaBorro = False Then
                    'Si borrar es igual a false, elimina la fila
                    Me.grdProductos.Rows.RemoveAt(filaActual)
                    yaBorro = True
                Else
                    'Si estamos es una fila que no tiene datos la eliminamos
                    If codigoArt = 0 Then
                        Me.grdProductos.Rows.RemoveAt(filaActual)
                    End If
                End If
            Next
        End If
    End Sub


    'Funcion que agrega los pendientes por surtir desde el formulario de busqueda
    Public Sub fnAgregar_Pendientes()
        'agregar productos a grid.
        Dim filas() As String

        'id, codigo,nombre,precio,cantidad
        filas = {"0", mdlPublicVars.superSearchId, mdlPublicVars.superSearchCodigo, mdlPublicVars.superSearchNombre, mdlPublicVars.superSearchCantidad,
                 Format(mdlPublicVars.superSearchPrecio, mdlPublicVars.formatoMoneda), "0", False, "", 0, "", 0, 0,
                 mdlPublicVars.superSearchCodSurtir, mdlPublicVars.superSearchSurtir, mdlPublicVars.General_idTipoInventario,
                 mdlPublicVars.superSearchTipoPrecio, mdlPublicVars.superSearchEstado}
        grdProductos.Rows.Add(filas)

        grdProductos.Columns(4).IsCurrent = True
        grdProductos.Rows(grdProductos.Rows.Count - 1).IsCurrent = True


        fnActualizar_Total()
    End Sub

    'AGREGAR PRECIO
    Public Sub fnAgregarPrecio(ByVal especial As Boolean)
        
        Try
            Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txbPrecio").Value = CType(mdlPublicVars.superSearchPrecio, Decimal)
            Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("TipoPrecio").Value = CType(mdlPublicVars.superSearchTipoPrecio, Integer)

            'validar que la salida no este en estado de despacho.
            If bitEditarBodega = True And codigo > 0 Then

                Dim s As tblSalida

                Dim conexion As New dsi_pos_demoEntities
                Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                    conn.Open()
                    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                    s = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault
                    conn.Close()
                End Using


                'si despachado es falso actualizar la cantidad, de lo contrario no actualizar, solo precio.
                If s.despachar = False Then
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCantidad").Value = CType(mdlPublicVars.superSearchCantidad, Integer)
                End If
            Else

                ' Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCantidad").Value = CType(mdlPublicVars.superSearchCantidad, Integer)

            End If

        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

    End Sub


    'FUNCION UTILIZADA PARA VERIFICAR SI TIENE ARTICULOS EL GRID
    Private Function fnCuentaArticulos() As Boolean
        Dim nombre As String = ""
        For i As Integer = 0 To Me.grdProductos.RowCount - 1
            nombre = Me.grdProductos.Rows(i).Cells("txbProducto").Value

            If nombre IsNot Nothing Then
                Return True
            End If
        Next

    End Function

    'REALIZAR PAGO
    Private Sub fnRealizarPago() Handles Me.panel7
        frmPagoNuevo.bitCliente = True
        frmPagoNuevo.Text = "Pagos de Clientes"
        frmPagoNuevo.StartPosition = FormStartPosition.CenterScreen
        permiso.PermisoDialogEspeciales(frmPagoNuevo)
        frmPagoNuevo.Dispose()
    End Sub


    'Buscar Articulo Unico
    Public Sub fnBuscarArticulo(ByVal codigo As String, ByVal posicion As Integer)

        Dim bitNuevaFila As Boolean = False

        Try

            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities
            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


                'Verificamos si existe en codigos de barra
                Dim codigoBarra As tblArticulo_CodigoBarra = (From x In conexion.tblArticulo_CodigoBarra.AsEnumerable Where x.codigoBarra = codigo _
                                                              Select x).FirstOrDefault

                Dim cantidad As Integer = 0
                Dim articulo As tblArticulo = Nothing
                If codigoBarra Is Nothing Then
                    'Buscamos el articulo en base al codigo
                    articulo = (From x In conexion.tblArticuloes Where x.codigo1.ToLower.Equals(codigo.ToLower) _
                               Select x).FirstOrDefault
                Else
                    articulo = (From x In conexion.tblArticuloes Where x.idArticulo = codigoBarra.articulo _
                               Select x).FirstOrDefault
                    cantidad = codigoBarra.unidadEmpaque
                End If

                If articulo Is Nothing And codigoBarra Is Nothing Then
                    alerta.contenido = "Este producto no existe"
                    alerta.fnErrorContenido()
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").Value = ""
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").BeginEdit()
                Else
                    Dim codCliente As Integer = codigoCliente
                    'Obtenemos el tipo de negocio del cliente
                    Dim cliente As tblCliente = (From x In conexion.tblClientes.AsEnumerable Where x.idCliente = codCliente Select x).FirstOrDefault
                    Dim tNegocio As Integer = cliente.idTipoNegocio

                    'Seleccionamos el precio del articulo
                    Dim precioArt As tblArticulo_TipoNegocio = (From x In conexion.tblArticulo_TipoNegocio.AsEnumerable Where x.articulo = articulo.idArticulo And _
                                                               x.tipoNegocio = tNegocio Select x).FirstOrDefault
                    Dim precio As Decimal = 0
                    'Asignamos el precio
                    If precioArt IsNot Nothing Then

                        precio = (From x In conexion.sp_redondearPrecio(precioArt.tblArticulo.precioPublico * (100 - precioArt.descuento) / 100) Select PrecioRetornado = x.Precio).FirstOrDefault

                    Else
                        alerta.contenido = "Producto: " & articulo.nombre1 & " no tiene precio!"
                        alerta.fnErrorContenido()

                        Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").BeginEdit()
                        Exit Sub
                    End If

                    Dim artEstado As tblArticulo = (From x In conexion.tblArticuloes Where x.codigo1 = codigo Select x).FirstOrDefault
                    Dim estado = From x In conexion.spArticulo_EstadoDePrecio(artEstado.idArticulo, codCliente) Select x

                    Dim valorEstado As Integer = 0

                    Dim estadoL As spArticulo_EstadoDePrecio_Result
                    For Each estadoL In estado
                        valorEstado = estadoL.Estado
                    Next


                    'Agregamos el producto
                    Me.grdProductos.Rows(posicion).Cells("iddetalle").Value = "0"
                    Me.grdProductos.Rows(posicion).Cells("id").Value = articulo.idArticulo
                    Me.grdProductos.Rows(posicion).Cells("txmCodigo").Value = codigo
                    Me.grdProductos.Rows(posicion).Cells("txbProducto").Value = articulo.nombre1
                    Me.grdProductos.Rows(posicion).Cells("txbObservacion").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("txmCantidad").Value = If(codigoBarra Is Nothing, 0, cantidad)
                    Me.grdProductos.Rows(posicion).Cells("txbPrecio").Value = Format(precio, mdlPublicVars.formatoMoneda)
                    Me.grdProductos.Rows(posicion).Cells("Total").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("chmContado").Value = False
                    Me.grdProductos.Rows(posicion).Cells("idajustecategoria").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("txbAjuste").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("txmCantidadAjuste").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("elimina").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("idSurtir").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("txmCantidadSurtir").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("idInventario").Value = mdlPublicVars.General_idTipoInventario
                    Me.grdProductos.Rows(posicion).Cells("tipoPrecio").Value = mdlPublicVars.Empresa_PrecioNormal
                    Me.grdProductos.Rows(posicion).Cells("clrEstado").Value = valorEstado
                    Me.fnNuevaFila()
                End If

                conn.Close()
            End Using


        Catch ex As Exception

        End Try

    End Sub


    Private Sub fnArticulo_informacion()

        Dim idcliente As Integer = codigoCliente

        Dim index As Integer = mdlPublicVars.fnGrid_codigoFilaSeleccionada(grdProductos)

        Dim conexion As New dsi_pos_demoEntities
        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                If IsNothing(Me.grdProductos.Rows(index).Cells("id").Value) = True Then
                    lblObservacion.Text = ""
                    lblCompatibilidad.Text = ""
                    lblSaldo.Text = 0
                    lblUltPrecio.Text = 0
                    lblUltTipoPrecio.Text = ""
                    Exit Sub
                End If

                Dim codigo As String = Me.grdProductos.Rows(index).Cells("id").Value.ToString

                If IsNumeric(codigo) Then
                    If CType(codigo, Integer) > 0 Then

                        Dim datos = conexion.sp_CadenaCompatibilidad(codigo, mdlPublicVars.General_idTipoInventario)
                        For Each fila As sp_CadenaCompatibilidad_Result In datos
                            lblObservacion.Text = fila.Obs
                            lblSaldo.Text = fila.Saldo
                            lblCompatibilidad.Text = fila.Compatibilidad
                        Next

                        Dim ultPrecio As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles
                                                             Where x.tblSalida.facturado = True And x.tblSalida.anulado = False And x.tblSalida.despachar = True _
                                        And x.idArticulo = codigo And x.tblSalida.idCliente = idcliente
                                        Order By x.tblSalida.fechaFacturado Descending Select x).FirstOrDefault

                        If ultPrecio IsNot Nothing Then
                            lblUltPrecio.Text = ultPrecio.precio
                            lblUltTipoPrecio.Text = ultPrecio.tblArticuloTipoPrecio.nombre
                        Else
                            lblUltTipoPrecio.Text = 0
                            lblUltPrecio.Text = 0
                        End If

                    Else
                        lblObservacion.Text = ""
                        lblSaldo.Text = 0
                        lblUltPrecio.Text = 0
                    End If
                Else
                    lblUltPrecio.Text = 0
                    lblObservacion.Text = ""
                    lblSaldo.Text = 0
                    lblCompatibilidad.Text = ""
                End If
            Catch ex As NullReferenceException
            Catch ex As Exception
                RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                lblObservacion.Text = ""
                lblCompatibilidad.Text = ""
                lblSaldo.Text = 0
            End Try

            'cerrar conexion
            conn.Close()
        End Using

    End Sub




    '''''''''''''''''''''''     FUNCIONES DE VALIDACION '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    'COTIZAR
    Private Sub pbCotizar_Click() Handles Me.panel1

        If bitEditarBodega = True Or bitEditarSalida = True Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If
        If fnErrores() = False Then
            fnGuardarCotizacion()
        End If
    End Sub

    '-----------------------------------------------------------------------     Guardar Cotizacion
    Private Function fnErrores() As Boolean
        If bitEditarBodega = False Then
            If Me.grdProductos.Rows.Count = 0 Then
                alerta.contenido = "Faltan articulos"
                alerta.fnErrorContenido()
                Return True
            End If

            Dim index
            For index = 0 To Me.grdProductos.Rows.Count - 1
                Dim articulo As String = CType(Me.grdProductos.Rows(index).Cells("txbProducto").Value, String)

                If articulo IsNot Nothing Then
                    If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) Then
                    Else
                        alerta.contenido = "Requiere numero !!! " + Me.grdProductos.Rows(index).Cells("Cantidad").Value.ToString
                        alerta.fnErrorContenido()
                        Return True
                    End If
                End If
            Next
        Else
            'errores de modificar.
            If IsNumeric(txtCodigo.Text) Then
                If IsNumeric(lblSaldoFinal.Text) Then
                Else
                    alerta.contenido = "Requiere Numero"
                    alerta.fnErrorContenido()
                    Return True
                End If

                Dim t As Double = lblSaldoFinal.Text
                If t > 0 Then
                Else
                    alerta.contenido = "Requiere mayor a cero."
                    alerta.fnErrorContenido()
                    Return True
                End If
            Else
                alerta.fnUtiliceGuardar()
                Return True
            End If


            'recorrer la existencia y 
            Dim index
            Dim idajuste As Integer = 0
            Dim cantidad As Integer = 0
            Dim cantidadAjuste As Integer = 0
            Dim idarticulo As Integer = 0

            Dim articulo As String = ""

            For index = 0 To Me.grdProductos.Rows.Count - 1

                idajuste = Me.grdProductos.Rows(index).Cells("idajustecategoria").Value
                idarticulo = Me.grdProductos.Rows(index).Cells("Id").Value 'id articulo
                articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' articulo

                If articulo.Length > 0 Then


                    ''revisar si cantidad es numerico.
                    If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) Then
                        cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value
                    Else
                        alerta.contenido = "Requiere numero en linea " + (index + 1).ToString + " Articulo " + articulo.ToString
                        alerta.fnErrorContenido()
                        Return True
                    End If

                    'revisar cantidad de ajuste, si es numerico.
                    If idajuste > 0 Then
                        If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) And Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value > 0 Then
                            cantidadAjuste = Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value
                        ElseIf Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value = 0 Then
                            alerta.contenido = "Debe ingresar una cantidad de ajuste en la linea:  " + (index + 1).ToString + ", Articulo :" + articulo.ToString
                            alerta.fnErrorContenido()
                            Return True
                        Else
                            alerta.contenido = "Ingrese cantidad de ajuste en linea: " + (index + 1).ToString + ", Articulo :" + articulo.ToString
                            alerta.fnErrorContenido()
                            Return True
                        End If
                    End If

                End If
            Next
        End If

        'Verificamos que tenga mas de un producto
        Dim numeroProductos As Integer = 0
        Dim codArt As String = ""
        For i As Integer = 0 To Me.grdProductos.Rows.Count - 1
            codArt = Me.grdProductos.Rows(i).Cells("id").Value

            If codArt IsNot Nothing Then
                numeroProductos += 1
            End If
        Next

        If numeroProductos = 0 Then
            alerta.contenido = "Debe de ingresar al menos un producto"
            alerta.fnErrorContenido()
            Return True
        End If

        Return False
    End Function

    Private Sub fnGuardarCotizacion()

        'validaciones
        If IsNumeric(txtCodigo.Text) Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue

        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim hora As String = fnHoraServidor()
        Dim success As Boolean = True
        Dim errContenido As String = ""

        Dim codigoSalidaCredito As Integer = 0
        Dim codigoSalidaContado As Integer = 0
        Dim errorContenido As Boolean = False

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            'consultar un cliente
            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First
            Dim usr As tblUsuario = (From x In conexion.tblUsuarios Where x.idUsuario = mdlPublicVars.idUsuario).FirstOrDefault

            If success = True Then


                'crear el encabezado de la transaccion
                Using transaction As New TransactionScope

                    'inicio de excepcion
                    Try

                        'paso 5, guardar el registro de encabezado
                        Dim salidaCredito As New tblSalida
                        ' ctx.Refresh(System.Data.Objects.RefreshMode.ClientWins, ctx.tblCorrelativos)
                        ' ctx.SaveChanges()

                        Dim totalCredito As Decimal = 0
                        Try
                            totalCredito = CDec(Replace(txtCredito.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalCredito = 0
                        End Try


                        If (totalCredito > 0) Then
                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                                 Select x).FirstOrDefault

                            salidaCredito.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salidaCredito.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salidaCredito.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salidaCredito.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salidaCredito.idTipoMovimiento = codmovimiento
                            salidaCredito.idVendedor = usr.idVendedor

                            salidaCredito.idCliente = codcliente
                            salidaCredito.cliente = txtCliente.Text
                            salidaCredito.nit = txtNit.Text

                            salidaCredito.fechaTransaccion = fecha
                            salidaCredito.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                            salidaCredito.observacion = txtObservacion.Text

                            salidaCredito.direccionFacturacion = cli.direccionFactura1
                            salidaCredito.direccionEnvio = cli.direccionFactura1

                            salidaCredito.cotizado = True
                            salidaCredito.reservado = False
                            salidaCredito.despachar = False
                            salidaCredito.facturado = False
                            salidaCredito.empacado = False
                            salidaCredito.anulado = False
                            salidaCredito.fechaAnulado = Nothing
                            salidaCredito.idMunicipio = mdlPublicVars.PuntoVentaPequeno_codigoMunicipio

                            salidaCredito.descuento = 0
                            salidaCredito.subtotal = totalCredito
                            salidaCredito.total = totalCredito

                            salidaCredito.contado = False
                            salidaCredito.credito = True

                            salidaCredito.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1
                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salidaCredito)

                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaCredito = salidaCredito.idSalida
                        End If

                        Dim salida As New tblSalida
                        Dim totalContado As Decimal = 0

                        Try
                            totalContado = CType(Replace(txtContado.Text, "Q", "").Trim, Decimal)
                        Catch ex As Exception
                            totalContado = 0
                        End Try


                        If (totalContado > 0) Then
                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                                 Select x).FirstOrDefault ' se agreg ordefault


                            'Dim correlativo = (From x In ctx.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                            '                                   Select x).First ' se agreg ordefault

                            salida.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salida.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salida.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salida.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salida.idTipoMovimiento = codmovimiento
                            salida.idVendedor = usr.idVendedor

                            salida.idCliente = codcliente
                            salida.cliente = txtCliente.Text
                            salida.nit = txtNit.Text

                            salida.fechaTransaccion = fecha
                            salida.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                            salida.observacion = txtObservacion.Text
                            salidaCredito.idMunicipio = mdlPublicVars.PuntoVentaPequeno_codigoMunicipio
                            salida.cotizado = True
                            salida.reservado = False
                            salida.despachar = False
                            salida.facturado = False
                            salida.empacado = False
                            salida.anulado = False
                            salida.fechaAnulado = Nothing

                            salida.descuento = 0
                            salida.subtotal = totalContado
                            salida.total = totalContado

                            salida.direccionFacturacion = cli.direccionFactura1
                            salida.direccionEnvio = cli.direccionFactura1

                            salida.contado = True
                            salida.credito = False

                            salida.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1

                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salida)
                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaContado = salida.idSalida
                            ' codigoSalidaAFacturar = salida.idSalida 'para la venta pequenia
                        End If


                        'paso 6, guardar el detalle
                        Dim index
                        Dim cantidad As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim id As Integer = 0
                        Dim nombre As String = ""
                        Dim cantSurtir As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim contado As Boolean = True
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        For index = 0 To Me.grdProductos.Rows.Count - 1
                            id = Me.grdProductos.Rows(index).Cells("Id").Value ' id articulo
                            nombre = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' articulo

                            If nombre IsNot Nothing Then
                                cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value 'cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                                cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value 'cantidadSurtir
                                idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value
                                idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value
                                tipoPrecio = Me.grdProductos.Rows(index).Cells("tipoPrecio").Value
                                observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value



                                If precio <= 0 Then
                                    alerta.contenido = "No se puede guardar artículo: " & nombre & vbCrLf & "No tiene precio"
                                    errorContenido = True
                                    success = False
                                    Exit Try
                                End If

                                If rbnContado.Checked = True Then
                                    contado = True
                                Else
                                    contado = Me.grdProductos.Rows(index).Cells("chmContado").Value
                                End If

                                Dim producto As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = id Select x).First

                                Dim detalle As New tblSalidaDetalle

                                If rbnContado.Checked = True Then
                                    detalle.idSalida = codigoSalidaContado
                                Else
                                    If (Me.grdProductos.Rows(index).Cells("chmContado").Value = True) Then
                                        detalle.idSalida = codigoSalidaContado
                                    Else
                                        detalle.idSalida = codigoSalidaCredito
                                    End If
                                End If
                                detalle.anulado = False
                                detalle.idArticulo = id
                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.costo = producto.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio
                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()

                                'Verificamos is el producto es un servicio
                                If producto.bitKit Then
                                    'Guardamos el detalle de los articulos del Kit
                                    'Obtenemos todos los articulos asociados a un kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                                  Select x).ToList

                                    For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                        'Creamos un nuevo salida detalle
                                        Dim detalleHijo As New tblSalidaDetalle
                                        detalleHijo.idArticulo = detalleKit.articulo
                                        detalleHijo.anulado = False
                                        detalleHijo.cantidad = detalleKit.cantidad * detalle.cantidad
                                        detalleHijo.comentario = ""
                                        detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                        detalleHijo.precio = 0
                                        detalleHijo.idSalida = detalle.idSalida
                                        detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                        detalleHijo.tipoInventario = detalle.tipoInventario
                                        detalleHijo.tipoPrecio = detalle.tipoPrecio

                                        'Agregamos el detalle a la BD
                                        conexion.AddTotblSalidaDetalles(detalleHijo)
                                        conexion.SaveChanges()
                                    Next
                                End If

                                'Verifiamos si es surtir
                                If idSurtir > 0 Then
                                    'Modificamos el pendiente por surtir
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where (x.cliente = salida.idCliente Or x.cliente = salidaCredito.idCliente) And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                    Dim p As tblSurtir
                                    For Each p In pendiente
                                        If cantidad > p.saldo Then
                                            cantidad -= p.saldo
                                            p.saldo = 0

                                        Else
                                            p.saldo -= cantidad
                                            cantidad = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidad = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = detalle.idSalidaDetalle
                                    pendiente.articulo = detalle.idArticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = 0
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = mdlPublicVars.idVendedor

                                    If contado = True Then
                                        pendiente.cliente = salida.idCliente
                                    Else
                                        pendiente.cliente = salidaCredito.idCliente
                                    End If

                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If
                            End If
                        Next

                        'paso 8, completar la transaccion.
                        transaction.Complete()


                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        RadMessageBox.Show(ex.Message + vbCrLf + ex.InnerException.ToString, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                        ' Handle errors and deadlocks here and retry if needed. 
                        ' Allow an UpdateException to pass through and 
                        ' retry, otherwise stop the execution. 
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            'cerrar conexion
            conn.Close()
        End Using



        If success = True Then

            conexion.AcceptAllChanges()

            alerta.fnGuardar()
            bitEditarSalida = False

            fnNuevo()

            'Mostramos la ventana de Bitacora, Usando la Variable global de configuración para conocer si se pide bitacora o No.
            AgregaBitacora(mdlPublicVars.Salida_BitacoraAlCotizar)

            If RadMessageBox.Show("¿Desea mostrar doc de salida?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                If rbnContado.Checked = True Then
                    fnReporte_Cotizacion(codigoSalidaContado)
                End If

                If rbnCredito.Checked = True Then
                    fnReporte_Cotizacion(codigoSalidaCredito)
                End If
            End If

            'Iniciamos un nueva venta 
            fnNuevo()
        Else
            If errorContenido Then
                alerta.fnErrorContenido()
            Else
                alerta.fnErrorGuardar()
            End If


            Console.WriteLine("La operacion no pudo ser completada")
        End If

    End Sub


    Private Sub AgregaBitacora(ByVal seguir As Boolean)
        If seguir = True Then
            Try
                'frmBitacora.idCliente = cmbCliente.SelectedValue

                frmBitacora.idCliente = codigoCliente

                frmBitacora.idVendedor = cmbVendedor.SelectedValue
                frmBitacora.fecha = dtpFechaRegistro.Value
                frmBitacora.Text = "Bitacora"
                frmBitacora.StartPosition = FormStartPosition.CenterScreen
                permiso.PermisoDialogEspeciales(frmBitacora)
                frmBitacora.Dispose()
            Catch ex As Exception
            End Try
        End If
    End Sub

    Private Sub fnReporte_Cotizacion(ByVal codigo As Integer)
        Dim r As New clsReporte
        Dim permiso As New clsPermisoUsuario
        Dim success As Boolean = False
        Dim salida As tblSalida = Nothing
        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                salida = (From x In conexion.tblSalidas Where x.idSalida = codigo).FirstOrDefault
                r.reporte = "ventas_Cotizacion1.rpt"
                r.tabla = EntitiToDataTable(From x In conexion.sp_ReporteVenta("", False, codigo))
                r.nombreParametro = "filtro"
                r.parametro = "Filtro del reporte:  "


                success = True
            Catch ex As Exception
                success = False
            End Try

            conn.Close()
        End Using

        If success = True Then
            frmDocumentosSalida.reporteBase = r.DocumentoReporte()
            frmDocumentosSalida.txtTitulo.Text = "Venta : " & salida.documento
            frmDocumentosSalida.Text = "Fact. de Salida"
            frmDocumentosSalida.bitCliente = True
            frmDocumentosSalida.codigo = salida.idCliente
            permiso.PermisoFrmEspeciales(frmDocumentosSalida, False)
        End If

    End Sub


    Private Function fnVerificaCredito() As Boolean

        Dim codcliente As Integer = codigoCliente
        If codcliente > 0 Then
            'si retorno = true, el cliente tiene credito pendiente, por lo tanto necesita autorizacion para generar la venta.
            Dim retorno As Boolean = False

            'verificar si venta es credito, 
            'si es credito verificar excedente de credito.
            'If rbnCredito.Checked = True Then
            'consultar cliente.
            Dim cli As tblCliente = (From i In ctx.tblClientes.AsEnumerable Where i.idCliente = codcliente Select i).First()
            'Obtenemos el monto del credito
            Dim credito As Double
            Try
                credito = CDbl(txtCredito.Text)
            Catch ex As Exception
                credito = 0
            End Try

            'Obtenemos la sumatoria de las venta al cliente, que no esten facturas, ni anuladas, y que esten es estado despachada y al credito
            Dim salidas As Double
            Try
                salidas = (From x In ctx.tblSalidas.AsEnumerable Where x.idCliente = cli.idCliente And Not x.anulado _
                           And Not x.empacado And x.despachar And x.credito _
                           Select x.total).Sum
            Catch ex As Exception
                salidas = 0
            End Try

            'Obtenemos el credito disponible, sobregiro, y sobre pago programado
            Dim creditoDisponible As Double = cli.limiteCredito - (cli.saldo) - salidas
            Dim sobreGiro As Double = (cli.porcentajeCredito / 100) * cli.limiteCredito


            If credito > (creditoDisponible + sobreGiro) Then
                lblCredito.Visible = True
                lblCredito.Text = "Autorizacion"
                lblFondoCredito.BackColor = Color.Red
            ElseIf credito > (creditoDisponible) Then
                lblCredito.Visible = True
                lblCredito.Text = "Sobregiro"
                lblFondoCredito.BackColor = Color.Yellow
            Else
                lblCredito.Visible = True
                lblCredito.Text = "VENDER!"
                lblFondoCredito.BackColor = Color.Green
            End If

            txtCreditoDisponible.Text = Format((creditoDisponible + sobreGiro) - credito, mdlPublicVars.formatoMoneda)
        Else
            lblCredito.Visible = False
            lblFondoCredito.BackColor = Color.Transparent
        End If
        'End If
        Return True
    End Function


    '----------------------------------------  FUNCIONES DE VALIDACION. ---------------------------

    Private Function fnModificarCotizacion()
        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue

        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim success As Boolean = True
        Dim errContenido As String = ""

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            Using transaction As New TransactionScope

                Try
                    Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First

                    'GUARDAR REGISTRO DE SALIDA.

                    '------------------------------------------------------  crear encabezado.-----------------------------
                    'paso 5, guardar el registro de encabezado
                    Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault

                    salida.descuento = 0
                    salida.subtotal = CType(lblSaldoFinal.Text, Double)
                    salida.total = CType(lblSaldoFinal.Text, Double)

                    salida.contado = rbnContado.Checked
                    salida.credito = rbnCredito.Checked

                    conexion.SaveChanges()
                    '--------------------------------------- fin de crear encabezado. -------------------

                    'paso 6, guardar el detalle
                    Dim index
                    Dim cantidad As Double = 0
                    Dim precio As Decimal = 0
                    Dim total As Decimal = 0
                    Dim idarticulo As Integer = 0
                    Dim articulo As String = ""
                    Dim iddetalle As Integer = 0
                    Dim elimina As Integer = 0
                    Dim cantSurtir As Integer = 0
                    Dim idSurtir As Integer = 0
                    Dim idInventario As Integer = 0
                    Dim tipoPrecio As Integer = 0
                    Dim observacion As String = ""
                    For index = 0 To Me.grdProductos.Rows.Count - 1

                        iddetalle = Me.grdProductos.Rows(index).Cells("iddetalle").Value ' id detalle
                        idarticulo = Me.grdProductos.Rows(index).Cells("Id").Value ' id articulo
                        articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' codigo

                        If articulo IsNot Nothing Then

                            cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value ' cantidad
                            precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                            total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                            elimina = Me.grdProductos.Rows(index).Cells("elimina").Value
                            cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value
                            idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value
                            idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value
                            tipoPrecio = Me.grdProductos.Rows(index).Cells("tipoPrecio").Value
                            observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value

                            Dim producto As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = idarticulo Select x).FirstOrDefault

                            If elimina > 0 Then
                                'modificar registro de detalle.
                                Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First

                                detalle.anulado = 1

                                'Verificamos si tiene pendientes por surtir
                                Dim surtir As tblSurtir = (From x In conexion.tblSurtirs Where x.salidaDetalle = detalle.idSalidaDetalle Select x).FirstOrDefault
                                If surtir IsNot Nothing Then
                                    surtir.anulado = 1
                                    conexion.SaveChanges()
                                End If
                                conexion.SaveChanges()

                            ElseIf iddetalle > 0 Then

                                'modificar registro de detalle.
                                Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                                Dim cantidadAntigua As Integer = detalle.cantidad

                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.precioFactura = precio
                                conexion.SaveChanges()

                                If detalle.tblArticulo.bitKit Then
                                    'Obtenemos la lista de salidas detalle asociadas a el kit
                                    Dim lSalidaDetallKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = detalle.idSalidaDetalle _
                                                                                         Select x).ToList

                                    'Recorremos el grid para actualizarlo
                                    Dim cantidadKit As Integer = 0
                                    For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetallKit
                                        'Realizamos el calculo para la cantidad nueva
                                        cantidadKit = salidaDetalleKit.cantidad / cantidadAntigua
                                        salidaDetalleKit.cantidad = cantidadKit * detalle.cantidad
                                        conexion.SaveChanges()
                                    Next
                                End If
                            Else
                                'crear registro de detalle
                                Dim detalle As New tblSalidaDetalle
                                detalle.idSalida = salida.idSalida
                                detalle.idArticulo = idarticulo
                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.anulado = 0
                                detalle.costo = producto.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio

                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()
                                'asignar el id detalle 
                                iddetalle = detalle.idSalidaDetalle

                                'Verificamos is el producto es un kit
                                If detalle.tblArticulo.bitKit Then
                                    'Guardamos el detalle de los articulos del Kit

                                    'Obtenemos todos los articulos asociados a un kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                                  Select x).ToList

                                    For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                        'Creamos un nuevo salida detalle
                                        Dim detalleHijo As New tblSalidaDetalle
                                        detalleHijo.idArticulo = detalleKit.articulo
                                        detalleHijo.anulado = False
                                        detalleHijo.cantidad = detalleKit.cantidad * detalle.cantidad
                                        detalleHijo.comentario = ""
                                        detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                        detalleHijo.precio = 0
                                        detalleHijo.idSalida = detalle.idSalida
                                        detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                        detalleHijo.tipoInventario = detalle.tipoInventario
                                        detalleHijo.tipoPrecio = detalle.tipoPrecio

                                        'Agregamos el detalle a la BD
                                        conexion.AddTotblSalidaDetalles(detalleHijo)
                                        conexion.SaveChanges()
                                    Next
                                End If
                            End If

                            If elimina = 0 Then
                                'Verifiamos si es surtir
                                If idSurtir > 0 Then
                                    'Modificamos el pendiente por surtir
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = idarticulo Select x Order By x.fechaTransaccion Descending).ToList

                                    For Each p As tblSurtir In pendiente
                                        If cantidad > p.saldo Then
                                            cantidad -= p.saldo
                                            p.saldo = 0
                                        Else
                                            p.saldo -= cantidad
                                            cantidad = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidad = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = iddetalle
                                    pendiente.articulo = idarticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = 0
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = mdlPublicVars.idVendedor
                                    pendiente.cliente = salida.idCliente
                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If
                            End If
                        End If
                    Next

                    'paso 8, completar la transaccion.
                    transaction.Complete()

                Catch ex As System.Data.EntityException
                    success = False
                Catch ex As Exception
                    success = False
                    ' Handle errors and deadlocks here and retry if needed. 
                    ' Allow an UpdateException to pass through and 
                    ' retry, otherwise stop the execution. 
                    If ex.[GetType]() <> GetType(UpdateException) Then
                        Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                        alerta.fnErrorGuardar()
                        Exit Try
                        ' If we get to this point, the operation will be retried. 
                    End If
                End Try
            End Using

            conn.Close()
        End Using


        If success = True Then
            conexion.AcceptAllChanges()
            If Not bitSugerirDespacho Then
                alerta.fnGuardar()
            End If
            Return True
        Else
            'alerta.fnErrorGuardar()
            Console.WriteLine("La operacion no pudo ser completada")
            Return False
        End If
    End Function

    '--------------------------------------------- RESERVA ------------------------------------------
    Private Sub fnGuardarReserva()
        'variable que guardan los codigos.
        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue

        'variable de sistema.
        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim hora As String = fnHoraServidor()
        Dim existenciaIns As Boolean = False
        'variables para errores.
        Dim success As Boolean = True
        Dim errContenido As String = ""



        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            'consultar un cliente
            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First
            Dim usr As tblUsuario = (From x In conexion.tblUsuarios Where x.idUsuario = mdlPublicVars.idUsuario).FirstOrDefault

            If success = True Then
                Using transaction As New TransactionScope
                    Try

                        'GUARDAR REGISTRO DE SALIDA.
                        '------------------------------------------------------  crear encabezado.-----------------------------
                        'paso 5, guardar el registro de encabezado
                        Dim codigoSalidaCredito As Integer = 0
                        Dim codigoSalidaContado As Integer = 0

                        Dim diaSemana As Integer = Weekday(mdlPublicVars.fnFecha_horaServidor, vbMonday)
                        Dim fechaActual As DateTime = mdlPublicVars.fnFecha_horaServidor
                        Dim fechaReserva As DateTime = mdlPublicVars.fnFecha_horaServidor
                        Dim dias As Integer = 0
                        Try
                            Dim cadDias As String = InputBox("Ingrese dias de reserva", "Informacion", mdlPublicVars.Salida_ReservaDias)
                            dias = CInt(cadDias)
                        Catch ex As Exception
                            dias = mdlPublicVars.Salida_ReservaDias
                        End Try

                        If (diaSemana = 1) Then
                            fechaReserva = fechaActual.AddDays(dias)
                        Else
                            fechaReserva = fechaActual.AddDays(dias + 1)
                        End If

                        Dim salidaCredito As New tblSalida
                        ' conexion.Refresh(System.Data.Objects.RefreshMode.ClientWins, conexion.tblCorrelativos)
                        conexion.SaveChanges()

                        Dim totalCredito As Decimal = 0
                        Try
                            totalCredito = CDec(Replace(txtCredito.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalCredito = 0
                        End Try

                        If (totalCredito > 0) Then
                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                             Select x).First

                            salidaCredito.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salidaCredito.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salidaCredito.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salidaCredito.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salidaCredito.idTipoMovimiento = codmovimiento
                            salidaCredito.idVendedor = usr.idVendedor

                            salidaCredito.idCliente = codcliente
                            salidaCredito.cliente = txtCliente.Text
                            salidaCredito.nit = txtNit.Text

                            salidaCredito.fechaVencimientoReserva = fechaReserva
                            salidaCredito.fechaTransaccion = fecha
                            salidaCredito.fechaRegistro = dtpFechaRegistro.Text & " " & hora


                            salidaCredito.cotizado = False
                            salidaCredito.reservado = True
                            salidaCredito.despachar = False
                            salidaCredito.facturado = False
                            salidaCredito.empacado = False
                            salidaCredito.anulado = False
                            salidaCredito.fechaAnulado = Nothing

                            salidaCredito.descuento = 0
                            salidaCredito.subtotal = totalCredito
                            salidaCredito.total = totalCredito


                            salidaCredito.contado = False
                            salidaCredito.credito = True

                            salidaCredito.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1
                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salidaCredito)

                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaCredito = salidaCredito.idSalida

                        End If

                        Dim salida As New tblSalida
                        Dim totalContado As Decimal = 0
                        Try
                            totalContado = CDec(Replace(txtContado.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalContado = 0
                        End Try

                        If (totalContado > 0) Then

                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                             Select x).First

                            salida.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salida.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salida.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salida.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salida.idTipoMovimiento = codmovimiento
                            salida.idVendedor = usr.idVendedor

                            salida.idCliente = codcliente
                            salida.cliente = txtCliente.Text
                            salida.nit = txtNit.Text
                            salida.fechaVencimientoReserva = fechaReserva

                            salida.fechaTransaccion = fecha
                            salida.fechaRegistro = dtpFechaRegistro.Text & " " & hora


                            salida.cotizado = False
                            salida.reservado = True
                            salida.despachar = False
                            salida.facturado = False
                            salida.empacado = False
                            salida.anulado = False
                            salida.fechaAnulado = Nothing


                            salida.descuento = 0
                            salida.subtotal = totalContado
                            salida.total = totalContado

                            salida.contado = True
                            salida.credito = False

                            salida.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1

                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salida)

                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaContado = salida.idSalida
                        End If

                        '--------------------------------------- fin de crear encabezado. -------------------

                        'paso 6, guardar el detalle
                        Dim index
                        Dim cantidad As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim id As Integer = 0
                        Dim nombre As String = ""
                        Dim cantSurtir As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim contado As Boolean = True
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        For index = 0 To Me.grdProductos.Rows.Count - 1

                            id = Me.grdProductos.Rows(index).Cells("id").Value ' id articulo
                            nombre = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' codigo

                            If nombre IsNot Nothing Then

                                cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value ' cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                                cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value 'surtir
                                idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value
                                idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value
                                tipoPrecio = Me.grdProductos.Rows(index).Cells("tipoPrecio").Value
                                observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value

                                If rbnContado.Checked = True Then
                                    contado = True
                                Else
                                    contado = Me.grdProductos.Rows(index).Cells("chmContado").Value
                                End If

                                Dim articulo As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = id Select x).First

                                Dim detalle As New tblSalidaDetalle
                                If rbnContado.Checked = True Then
                                    detalle.idSalida = codigoSalidaContado
                                Else
                                    If (Me.grdProductos.Rows(index).Cells("chmContado").Value = True) Then
                                        detalle.idSalida = codigoSalidaContado
                                    Else
                                        detalle.idSalida = codigoSalidaCredito
                                    End If
                                End If
                                detalle.anulado = 0
                                detalle.idArticulo = id
                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.costo = articulo.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio
                                'Crear el objeto
                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()

                                'Verificamos si el producto es un servicio
                                If detalle.tblArticulo.bitKit Then
                                    'Guardamos el detalle de los articulos del Kit

                                    'Obtenemos todos los articulos asociados a un kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                              Select x).ToList

                                    For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                        'Creamos un nuevo salida detalle
                                        Dim detalleHijo As New tblSalidaDetalle
                                        detalleHijo.idArticulo = detalleKit.articulo
                                        detalleHijo.anulado = False
                                        detalleHijo.cantidad = detalleKit.cantidad * detalle.cantidad
                                        detalleHijo.comentario = ""
                                        detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                        detalleHijo.precio = 0
                                        detalleHijo.idSalida = detalle.idSalida
                                        detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                        detalleHijo.tipoInventario = detalle.tipoInventario
                                        detalleHijo.tipoPrecio = detalle.tipoPrecio

                                        'Agregamos el detalle a la BD
                                        conexion.AddTotblSalidaDetalles(detalleHijo)
                                        conexion.SaveChanges()
                                    Next
                                End If

                                'Verifiamos si es surtir
                                If idSurtir > 0 Then

                                    'Modificamos el pendiente por surtir
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where (x.cliente = salida.idCliente Or x.cliente = salidaCredito.idCliente) And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                    Dim p As tblSurtir

                                    For Each p In pendiente

                                        If cantidad > p.saldo Then
                                            cantidad -= p.saldo
                                            p.saldo = 0
                                        Else
                                            p.saldo -= cantidad
                                            cantidad = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidad = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = detalle.idSalidaDetalle
                                    pendiente.articulo = detalle.idArticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = 0
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = mdlPublicVars.idVendedor

                                    If contado = True Then
                                        pendiente.cliente = salida.idCliente
                                    Else
                                        pendiente.cliente = salidaCredito.idCliente
                                    End If

                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If

                                'guardar los cambios.
                                conexion.SaveChanges()

                                If articulo.bitKit Then
                                    'Obtenemos la lista de los productos asociados a ese kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = articulo.idArticulo _
                                                                               Select x).ToList

                                    For Each detallekit As tblArticulo_Kit In lDetalleKit
                                        'descontar existencias.
                                        Dim codArtKit As Integer = detallekit.articulo
                                        Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = codArtKit Select x).FirstOrDefault

                                        'si es reserva, incrementar la reserva , y decrementar el saldo
                                        If inve.saldo >= (detallekit.cantidad * cantidad) Then
                                            inve.saldo = inve.saldo - (cantidad * detallekit.cantidad)
                                            inve.reserva = inve.reserva + (cantidad * detallekit.cantidad)
                                            conexion.SaveChanges()
                                        Else
                                            alerta.contenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + articulo.nombre1
                                            existenciaIns = True
                                            success = False
                                            Exit Try
                                        End If
                                    Next
                                ElseIf articulo.bitProducto = True Then
                                    'descontar existencias.
                                    Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                             And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                             And x.idArticulo = id Select x).FirstOrDefault

                                    'si es reserva, incrementar la reserva , y decrementar el saldo
                                    If inve.saldo >= cantidad Then
                                        inve.saldo = inve.saldo - cantidad
                                        inve.reserva = inve.reserva + cantidad
                                        conexion.SaveChanges()
                                    Else
                                        alerta.contenido = "Error !!!, Existencia insuficiente " + articulo.nombre1
                                        existenciaIns = True
                                        success = False
                                        Exit Try
                                    End If
                                End If


                            End If
                        Next

                        'paso 8, completar la transaccion.
                        transaction.Complete()

                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        ' Handle errors and deadlocks here and retry if needed. 
                        ' Allow an UpdateException to pass through and 
                        ' retry, otherwise stop the execution. 
                        MsgBox("Errores catch: " & ex.Message)

                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If


            If success = True Then
                conexion.AcceptAllChanges()
                alerta.fnGuardar()
                bitEditarSalida = False

                'cerrar conexion
                conn.Close()

                'Mostramos la ventana de Bitacora, Usando la Variable global de configuración para conocer si se pide bitacora o No.
                AgregaBitacora(mdlPublicVars.Salida_BitaraAlReservar)

                fnNuevo()
            Else
                If existenciaIns Then
                    alerta.fnErrorContenido()
                Else
                    alerta.fnErrorGuardar()
                End If
                Console.WriteLine("La operacion no pudo ser completada")
            End If

        End Using


    End Sub


    Private Function fnModificarReserva()

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue

        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim codigoSalida As Integer = 0


        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            'consultar un cliente
            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First

            If success = True Then
                Using transaction As New TransactionScope

                    Try
                        'GUARDAR REGISTRO DE SALIDA.

                        '------------------------------------------------------  crear encabezado.-----------------------------
                        'paso 5, guardar el registro de encabezado
                        Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).First



                        salida.descuento = 0
                        salida.subtotal = CType(lblSaldoFinal.Text, Double)
                        salida.total = CType(lblSaldoFinal.Text, Double)

                        salida.contado = rbnContado.Checked
                        salida.credito = rbnCredito.Checked

                        conexion.SaveChanges()
                        codigoSalida = salida.idSalida
                        '--------------------------------------- fin de crear encabezado. -------------------
                        'paso 6, guardar el detalle
                        Dim index
                        Dim cantidad As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim idarticulo As Integer = 0
                        Dim articulo As String = ""
                        Dim iddetalle As Integer = 0
                        Dim elimina As Integer = 0
                        Dim cantidadAnterior As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim cantSurtir As Integer = 0
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        For index = 0 To Me.grdProductos.Rows.Count - 1

                            iddetalle = Me.grdProductos.Rows(index).Cells("iddetalle").Value ' id detalle
                            idarticulo = Me.grdProductos.Rows(index).Cells("Id").Value ' id articulo
                            articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' codigo

                            If articulo IsNot Nothing Then
                                cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value ' cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                                elimina = Me.grdProductos.Rows(index).Cells("elimina").Value
                                idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value
                                cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value
                                idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value
                                tipoPrecio = Me.grdProductos.Rows(index).Cells("tipoPrecio").Value

                                Dim producto As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = idarticulo Select x).FirstOrDefault

                                If elimina > 0 Then
                                    Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                                    detalle.anulado = 1

                                    'Verificamos si tiene pendientes por surtir
                                    Dim surtir As tblSurtir = (From x In conexion.tblSurtirs Where x.salidaDetalle = detalle.idSalidaDetalle Select x).FirstOrDefault
                                    If surtir IsNot Nothing Then
                                        surtir.anulado = 1
                                        conexion.SaveChanges()
                                    End If
                                    cantidadAnterior = detalle.cantidad
                                    conexion.SaveChanges()

                                ElseIf iddetalle > 0 Then
                                    'modificar registro de detalle.
                                    Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                                    cantidadAnterior = detalle.cantidad
                                    detalle.cantidad = cantidad
                                    detalle.precio = precio
                                    detalle.precioFactura = precio
                                    conexion.SaveChanges()


                                    If detalle.tblArticulo.bitKit Then
                                        'Obtenemos la lista de salidas detalle asociadas a el kit
                                        Dim lSalidaDetallKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = detalle.idSalidaDetalle _
                                                                                             Select x).ToList

                                        'Recorremos el grid para actualizarlo
                                        Dim cantidadKit As Integer = 0
                                        For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetallKit
                                            'Realizamos el calculo para la cantidad nueva
                                            cantidadKit = salidaDetalleKit.cantidad / cantidadAnterior
                                            salidaDetalleKit.cantidad = cantidadKit * detalle.cantidad
                                            conexion.SaveChanges()
                                        Next
                                    End If

                                Else
                                    'crear registro de detalle
                                    Dim detalle As New tblSalidaDetalle
                                    detalle.idSalida = salida.idSalida
                                    detalle.idArticulo = idarticulo
                                    detalle.cantidad = cantidad
                                    detalle.precio = precio
                                    detalle.costo = producto.costoIVA
                                    detalle.tipoInventario = idInventario
                                    detalle.anulado = 0
                                    detalle.tipoPrecio = tipoPrecio
                                    detalle.comentario = observacion
                                    detalle.precioFactura = precio
                                    conexion.AddTotblSalidaDetalles(detalle)
                                    conexion.SaveChanges()

                                    'Verificamos is el producto es un kit
                                    If detalle.tblArticulo.bitKit Then
                                        'Guardamos el detalle de los articulos del Kit
                                        'Obtenemos todos los articulos asociados a un kit
                                        Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                                      Select x).ToList

                                        For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                            'Creamos un nuevo salida detalle
                                            Dim detalleHijo As New tblSalidaDetalle
                                            detalleHijo.idArticulo = detalleKit.articulo
                                            detalleHijo.anulado = False
                                            detalleHijo.cantidad = detalleKit.cantidad * detalle.cantidad
                                            detalleHijo.comentario = ""
                                            detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                            detalleHijo.precio = 0
                                            detalleHijo.idSalida = detalle.idSalida
                                            detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                            detalleHijo.tipoInventario = detalle.tipoInventario
                                            detalleHijo.tipoPrecio = detalle.tipoPrecio

                                            'Agregamos el detalle a la BD
                                            conexion.AddTotblSalidaDetalles(detalleHijo)
                                            conexion.SaveChanges()
                                        Next
                                    End If

                                    'Verifiamos si es surtir
                                    If idSurtir > 0 Then
                                        'Modificamos el pendiente por surtir
                                        Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                        Dim p As tblSurtir
                                        For Each p In pendiente
                                            If cantSurtir > p.saldo Then
                                                cantSurtir -= p.saldo
                                                p.saldo = 0
                                            Else
                                                p.saldo -= cantSurtir
                                                cantSurtir = 0
                                            End If
                                            conexion.SaveChanges()
                                            If cantSurtir = 0 Then
                                                Exit For
                                            End If
                                        Next
                                    ElseIf cantSurtir > 0 Then
                                        'Creamos el pendiente por surtir
                                        Dim pendiente As New tblSurtir
                                        pendiente.salidaDetalle = detalle.idSalidaDetalle
                                        pendiente.articulo = detalle.idArticulo
                                        pendiente.cantidad = cantSurtir
                                        pendiente.saldo = cantSurtir
                                        pendiente.fechaTransaccion = fecha
                                        pendiente.anulado = 0
                                        pendiente.usuario = mdlPublicVars.idUsuario
                                        pendiente.vendedor = mdlPublicVars.idVendedor
                                        pendiente.cliente = salida.idCliente

                                        conexion.AddTotblSurtirs(pendiente)
                                        conexion.SaveChanges()
                                    End If
                                End If

                                'descontar existencias.
                                Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                If iddetalle > 0 Then
                                    'Verificamos si es un producto  o un kit
                                    If producto.bitKit Then
                                        'Obtenemos todas las salidas detalle relacionadas al codigo detalle
                                        Dim lSalidaDetalleKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = iddetalle _
                                                                                              Select x).ToList

                                        'Recorremos la lista de salidas detalles para actualizar el inventario
                                        For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetalleKit
                                            Dim inventario As Integer = salidaDetalleKit.tipoInventario

                                            'Otenemos el inventario de cada articulo
                                            Dim inv As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                            inv.saldo += cantidadAnterior * salidaDetalleKit.cantidad
                                            inv.reserva -= cantidadAnterior * salidaDetalleKit.cantidad
                                            inv.saldo -= cantidad * salidaDetalleKit.cantidad
                                            inv.reserva += cantidad * salidaDetalleKit.cantidad
                                            conexion.SaveChanges()
                                        Next
                                    ElseIf producto.bitProducto Then
                                        inve.saldo += cantidadAnterior
                                        inve.reserva -= cantidadAnterior
                                        inve.saldo -= cantidad
                                        inve.reserva += cantidad
                                    End If
                                ElseIf elimina > 0 Then
                                    If producto.bitKit Then
                                        'Obtenemos todas las salidas detalle relacionadas al codigo detalle
                                        Dim lSalidaDetalleKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = iddetalle _
                                                                                              Select x).ToList

                                        'Recorremos la lista de salidas detalles para actualizar el inventario
                                        For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetalleKit
                                            Dim inventario As Integer = salidaDetalleKit.tipoInventario

                                            'Otenemos el inventario de cada articulo
                                            Dim inv As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                            inv.saldo += cantidadAnterior * salidaDetalleKit.cantidad
                                            inv.reserva -= cantidadAnterior * salidaDetalleKit.cantidad
                                            conexion.SaveChanges()
                                        Next
                                    ElseIf producto.bitProducto Then
                                        inve.saldo += cantidadAnterior
                                        inve.reserva -= cantidadAnterior
                                    End If
                                ElseIf elimina = 0 And iddetalle = 0 Then
                                    If producto.bitKit Then

                                        'Obtenemos todas las salidas detalle relacionadas al codigo detalle
                                        Dim lSalidaDetalleKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = iddetalle _
                                                                                              Select x).ToList

                                        'Recorremos la lista de salidas detalles para actualizar el inventario
                                        For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetalleKit
                                            Dim inventario As Integer = salidaDetalleKit.tipoInventario

                                            'Otenemos el inventario de cada articulo
                                            Dim inv As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                            If inv.saldo > (cantidad * salidaDetalleKit.cantidad) Then
                                                inv.saldo -= cantidad * salidaDetalleKit.cantidad
                                                inv.reserva += cantidad * salidaDetalleKit.cantidad
                                                conexion.SaveChanges()
                                            End If
                                        Next
                                    ElseIf producto.bitProducto Then
                                        If inve.saldo > cantidad Then
                                            inve.saldo -= cantidad
                                            inve.reserva += cantidad
                                        Else
                                            alerta.contenido = "Cantidad de articulo: " & articulo & " insuficiente!!"
                                            alerta.fnErrorContenido()
                                            success = False
                                            Exit Try
                                        End If
                                    End If
                                End If

                                conexion.SaveChanges()
                            End If
                        Next

                        'paso 8, completar la transaccion.
                        transaction.Complete()

                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        ' Handle errors and deadlocks here and retry if needed. 
                        ' Allow an UpdateException to pass through and 
                        ' retry, otherwise stop the execution. 
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            If success = True Then
                conexion.AcceptAllChanges()
                alerta.fnGuardar()
                Return True

            Else
                alerta.fnErrorGuardar()
                Console.WriteLine("La operacion no pudo ser completada")
                Return False
            End If

            'liberar la conexion.
            conn.Close()
        End Using

    End Function

    '--------------------------------------------  DESPACHO -----------------------------------------
    Private Sub fnGuardarDespacho()

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue

        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim hora As String = fnHoraServidor()
        Dim success As Boolean = True
        Dim errContenido As String = ""

        Dim autorizaCredito As Boolean = False    'variable que se utiliza para saber si se despliega la fnErrorAutorizacionCredito
        Dim codigoSalidaCredito As Integer = 0
        Dim codigoSalidaContado As Integer = 0

        'contador de pendientes por surtir, automaticamente envia el restante de cantidad y saldo a pendientes por surtir.
        Dim contadorSurtir As Integer = 0
        Dim cantidadSurtir As Double = 0


        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First
            Dim usr As tblUsuario = (From x In conexion.tblUsuarios Where x.idUsuario = mdlPublicVars.idUsuario).FirstOrDefault


            If success Then

                Using transaction As New TransactionScope

                    Try
                        'GUARDAR REGISTRO DE SALIDA.
                        Dim codigosalida As Integer = 0
                        '------------------------------------------------------  crear encabezado.-----------------------------
                        'paso 5, guardar el registro de encabezado

                        Dim salidaCredito As New tblSalida
                    
                        Dim totalCredito As Decimal = 0
                        Try
                            totalCredito = CDec(Replace(txtCredito.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalCredito = 0
                        End Try

                        If (totalCredito > 0) Then
                            'Establecemos la fecha de vencimiento del credito

                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                                 Select x).FirstOrDefault

                            If rbnCredito.Checked = True Then
                                Dim fechaVencimiento As DateTime = mdlPublicVars.fnFecha_horaServidor
                                Dim dia = Weekday(fechaVencimiento, vbMonday)
                                Dim diasCredito As Integer = (From x In conexion.tblClienteTipoPagoes Where x.idtipoPago = cli.idTipoPago Select x.credito).First

                                If diasCredito = 5 Then
                                    If dia = 1 Then
                                        salidaCredito.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito)
                                    Else
                                        salidaCredito.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 1)
                                    End If
                                End If

                                If diasCredito = 20 Then
                                    If dia >= 1 And dia <= 4 Then
                                        salidaCredito.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 3)
                                    Else
                                        salidaCredito.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 4)
                                    End If
                                End If

                            End If

                            salidaCredito.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salidaCredito.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salidaCredito.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salidaCredito.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salidaCredito.idTipoMovimiento = codmovimiento
                            salidaCredito.idVendedor = usr.idVendedor

                            salidaCredito.idCliente = codcliente
                            salidaCredito.cliente = txtCliente.Text
                            salidaCredito.nit = txtNit.Text

                            salidaCredito.fechaTransaccion = fecha
                            salidaCredito.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                            salidaCredito.fechaDespachado = dtpFechaRegistro.Text & " " & hora


                            salidaCredito.cotizado = False
                            salidaCredito.reservado = False
                            salidaCredito.despachar = True
                            salidaCredito.facturado = False
                            salidaCredito.empacado = True ' por defecto empacado para poder facturar de una vez
                            salidaCredito.anulado = False
                            salidaCredito.fechaAnulado = Nothing
                            'salidaCredito.idMunicipio = If(CInt(cmbDirEnvios.SelectedValue) = 0, mdlPublicVars.General_MunicipioLocal, CInt(cmbDirEnvios.SelectedValue))
                            'salidaCredito.direccionFacturacion = txtDireccionFacturacion.Text
                            'salidaCredito.direccionEnvio = cmbDirEnvios.Text

                            salidaCredito.descuento = 0
                            salidaCredito.subtotal = totalCredito
                            salidaCredito.total = totalCredito

                            salidaCredito.contado = False
                            salidaCredito.credito = True

                            salidaCredito.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1
                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salidaCredito)

                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaCredito = salidaCredito.idSalida
                            codigoSalidaAFacturar = salidaCredito.idSalida ' para facturar venta pequenia

                        End If

                        Dim totalContado As Decimal = 0
                        Try
                            totalContado = CDec(Replace(txtContado.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalContado = 0
                        End Try

                        Dim salida As New tblSalida

                        If (totalContado > 0) Then
                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                                 Select x).First

                            salida.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salida.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salida.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salida.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salida.idTipoMovimiento = codmovimiento
                            salida.idVendedor = usr.idVendedor

                            salida.idCliente = codcliente
                            salida.cliente = txtCliente.Text
                            salida.nit = txtNit.Text

                            salida.fechaTransaccion = fecha
                            salida.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                            salida.fechaDespachado = dtpFechaRegistro.Text & " " & hora

                            salida.cotizado = False
                            salida.reservado = False
                            salida.despachar = True
                            salida.facturado = False
                            salida.empacado = True        ' ponemos true para ver si nos permite facturar
                            salida.anulado = False
                            salida.fechaAnulado = Nothing
                            'salidaCredito.idMunicipio = If(CInt(cmbDirEnvios.SelectedValue) = 0, mdlPublicVars.General_MunicipioLocal, CInt(cmbDirEnvios.SelectedValue))
                            salida.descuento = 0
                            salida.subtotal = totalContado
                            salida.total = totalContado

                            salida.contado = True
                            salida.credito = False

                            salida.documento = correlativo.correlativo + 1
                            correlativo.correlativo = correlativo.correlativo + 1

                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salida)

                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaContado = salida.idSalida

                            codigoSalidaAFacturar = salida.idSalida 'para saber cual se va a facturar en venta pequenia
                        End If

                        '--------------------------------------- fin de crear encabezado. ------------------
                        'paso 6, guardar el detall
                        Dim index
                        Dim cantidad As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim idarticulo As Integer = 0
                        Dim nombre As String = ""
                        Dim cantSurtir As Integer = 0 ' sirve cuando el usuario ingresa el pendiente por surtir a comparacion de cantidadSurtir que es automatico.
                        Dim idSurtir As Integer = 0
                        Dim contado As Boolean = True
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        'crear registro de salida bodega.
                        If codigoSalidaContado > 0 Then
                            Dim sb As New tblsalidaBodega
                            sb.idsalida = codigoSalidaContado
                            conexion.AddTotblsalidaBodegas(sb)
                            conexion.SaveChanges()
                        End If

                        If codigoSalidaCredito > 0 Then
                            Dim sb As New tblsalidaBodega
                            sb.idsalida = codigoSalidaCredito
                            conexion.AddTotblsalidaBodegas(sb)
                            conexion.SaveChanges()
                        End If

                        For index = 0 To Me.grdProductos.Rows.Count - 1
                            idarticulo = Me.grdProductos.Rows(index).Cells("Id").Value ' id articulo
                            nombre = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' codigo

                            If nombre IsNot Nothing Then
                                cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value ' cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                                cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value 'surtir
                                idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value
                                idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value
                                tipoPrecio = Me.grdProductos.Rows(index).Cells("tipoPrecio").Value
                                observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value

                                Dim articulo As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = idarticulo Select x).First

                                Dim detalle As New tblSalidaDetalle

                                If rbnContado.Checked = True Then
                                    contado = True
                                Else
                                    contado = Me.grdProductos.Rows(index).Cells("chmContado").Value
                                End If

                                If rbnContado.Checked = True Then
                                    detalle.idSalida = codigoSalidaContado
                                Else
                                    If (Me.grdProductos.Rows(index).Cells("chmContado").Value = True) Then
                                        detalle.idSalida = codigoSalidaContado
                                    Else
                                        detalle.idSalida = codigoSalidaCredito
                                    End If
                                End If
                                detalle.anulado = 0
                                detalle.idArticulo = idarticulo
                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.costo = articulo.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio 'se agrego precio factura

                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()

                                If articulo.bitKit Then

                                    'Obtenemos la lista de los productos asociados a ese kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = articulo.idArticulo _
                                                                                   Select x).ToList

                                    For Each detallekit As tblArticulo_Kit In lDetalleKit

                                        Dim salidaKit As New tblSalidaDetalle
                                        salidaKit.anulado = 0
                                        salidaKit.idArticulo = detallekit.articulo
                                        salidaKit.cantidad = cantidad * detallekit.cantidad
                                        salidaKit.precio = 0
                                        salidaKit.costo = detallekit.tblArticulo1.costoIVA
                                        salidaKit.tipoInventario = idInventario
                                        salidaKit.tipoPrecio = detalle.tipoPrecio
                                        salidaKit.comentario = observacion
                                        salidaKit.kitSalidaDetalle = detalle.idSalidaDetalle
                                        salidaKit.idSalida = detalle.idSalida
                                        conexion.AddTotblSalidaDetalles(salidaKit)
                                        conexion.SaveChanges()

                                        'descontar existencias.
                                        Dim codArtKit As Integer = detallekit.articulo
                                        Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                     And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                     And x.idArticulo = codArtKit Select x).FirstOrDefault

                                        'si es reserva, incrementar la reserva , y decrementar el saldo
                                        If inve.saldo >= (salidaKit.cantidad) Then
                                            inve.saldo = inve.saldo - (salidaKit.cantidad)
                                            inve.salida = inve.salida + (salidaKit.cantidad)
                                            conexion.SaveChanges()
                                        Else

                                            errContenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + articulo.nombre1
                                            success = False
                                            Exit Try
                                        End If
                                    Next
                                ElseIf articulo.bitProducto Then

                                    'descontar existencias.
                                    Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                    'descontamos del inventario
                                    If inve.saldo >= cantidad Then
                                        inve.saldo = inve.saldo - cantidad
                                        inve.salida += cantidad
                                        conexion.SaveChanges()

                                    Else
                                        'cantidad a surtir.
                                        cantidadSurtir = cantidad - inve.saldo
                                        contadorSurtir = contadorSurtir + 1

                                        'descontar el saldo y enviar a pendientes por surtir.
                                        inve.salida = inve.salida + (inve.saldo)
                                        inve.saldo = 0

                                        Dim pendiente As New tblSurtir
                                        pendiente.salidaDetalle = detalle.idSalidaDetalle
                                        pendiente.articulo = detalle.idArticulo
                                        pendiente.cantidad = cantidadSurtir
                                        pendiente.saldo = cantidadSurtir
                                        pendiente.fechaTransaccion = fecha
                                        pendiente.anulado = 0
                                        pendiente.usuario = mdlPublicVars.idUsuario
                                        pendiente.vendedor = mdlPublicVars.idVendedor

                                        If contado = True Then
                                            pendiente.cliente = salida.idCliente
                                        Else
                                            pendiente.cliente = salidaCredito.idCliente
                                        End If

                                        conexion.AddTotblSurtirs(pendiente)
                                        conexion.SaveChanges()

                                        If contadorSurtir = 1 Then
                                            errContenido += " Saldo Insuficiente, Desea Surtir :" + vbCrLf & articulo.nombre1 + vbCrLf
                                        ElseIf contadorSurtir > 1 Then
                                            errContenido += ", " & articulo.nombre1
                                        End If

                                        'success = False
                                        'Exit Try
                                    End If
                                End If

                                'Verifiamos si es surtir
                                If idSurtir > 0 Then

                                    'Modificamos el pendiente por surtir, para descontar de los pendientes por surtir del cliente.
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where (x.cliente = salida.idCliente Or x.cliente = salidaCredito.idCliente) _
                                                                           And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Ascending).ToList
                                    Dim cantidadDescontar2 As Integer = cantidad

                                    For Each p As tblSurtir In pendiente

                                        If cantidadDescontar2 > p.saldo Then
                                            cantidadDescontar2 -= p.saldo
                                            p.saldo = 0
                                        Else
                                            p.saldo -= cantidadDescontar2
                                            cantidadDescontar2 = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidadDescontar2 = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = detalle.idSalidaDetalle
                                    pendiente.articulo = detalle.idArticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = 0
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = mdlPublicVars.idVendedor

                                    If contado = True Then
                                        pendiente.cliente = salida.idCliente
                                    Else
                                        pendiente.cliente = salidaCredito.idCliente
                                    End If

                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If

                                'Verificamos si tiene pendientes por pedir
                                Dim lPendientes As List(Of tblPendientePorPedir) = (From x In conexion.tblPendientePorPedirs
                                                                                     Where x.bitCreado And Not x.anulado And x.saldo > 0 And x.articulo = idarticulo
                                                                                     Select x).ToList
                                Dim cantidadDescontar As Integer = cantidad
                                'Recorremos la lista de pendientes
                                For Each pendiente As tblPendientePorPedir In lPendientes

                                    If cantidadDescontar > pendiente.saldo Then
                                        cantidadDescontar -= pendiente.saldo
                                        pendiente.saldo = 0
                                    Else
                                        pendiente.saldo -= cantidadDescontar
                                        cantidadDescontar = 0
                                    End If
                                    conexion.SaveChanges()
                                    If cantidadDescontar = 0 Then
                                        Exit For
                                    End If
                                Next
                            End If
                        Next
                        conexion.SaveChanges()

                        If contadorSurtir > 0 Then

                            If RadMessageBox.Show(errContenido + vbCrLf + " Desea Continuar...", "Articulos pendientes por Surtir", MessageBoxButtons.YesNo) = Windows.Forms.DialogResult.No Then
                                errContenido = "No se pudo Guardar"
                                success = False
                                Exit Try
                            End If

                        End If

                        'paso 8, completar la transaccion.
                        transaction.Complete()
                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            success = False
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            If success = True Then
                conexion.AcceptAllChanges()
                conexion.Dispose()

                bitRealizarPago = True ' si se completa la transaccion realizaremos el cobro
            End If

            'cerrar la conexion.
            conn.Close()

        End Using



        If success = True Then
            conexion.AcceptAllChanges()
            alerta.contenido = "Registro guardado correctamente"
            alerta.fnGuardar()
            bitEditarSalida = False

            'Mostramos la ventana de Bitacora, Usando la Variable global de configuración para conocer si se pide bitacora o No.
            AgregaBitacora(mdlPublicVars.Salida_BitaAlDespachar)

            '  fnNuevo()


            If codigoSalidaContado > 0 Then
                ' fnImprimir(codigoSalidaContado) 'no mostramos el reporte de despacho en venta pequenia
            End If

            If codigoSalidaCredito > 0 Then
                ' fnImprimir(codigoSalidaCredito) 'no mostramos el reporte de despacho en venta pequenia
            End If

        Else
            If autorizaCredito = True Then
                alerta.fnErrorAutorizacionCredito()
            Else
                alerta.contenido = errContenido
                alerta.fnErrorContenido()
                Console.WriteLine("La operacion no pudo ser completada")
            End If
        End If

    End Sub

    Private Function fnModificarDespacho()
        If fnErrores() = True Then
            Return False
        End If

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = cmbVendedor.SelectedValue
        Dim hora As String = fnHoraServidor()
        Dim fecha As DateTime = fnFecha_horaServidor()
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim idCorrelativo As String = ""



        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


            If success = True Then
                Using transaction As New TransactionScope
                    Try

                        'GUARDAR REGISTRO DE SALIDA.
                        '------------------------------------------------------  crear encabezado.-----------------------------
                        'paso 5, guardar el registro de encabezado
                        Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).First


                        salida.descuento = 0
                        salida.subtotal = CType(lblSaldoFinal.Text, Double)
                        salida.total = CType(lblSaldoFinal.Text, Double)
                        conexion.SaveChanges()

                        '--------------------------------------- fin de crear encabezado. ------------------
                        'paso 6, guardar el detalle
                        Dim index
                        Dim cantidad As Double = 0
                        Dim idajustecate As Integer = 0
                        Dim cantidadAjuste As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim idarticulo As Integer = 0
                        Dim idInventario As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim cantSurtir As Integer = 0
                        Dim observacion As String = ""
                        Dim articulo As String = ""
                        Dim iddetalle As Integer = 0

                        ''crear registro de salida bodega.
                        Dim codigobodega As Integer = 0

                        'Verificamos si existe algun ajuste
                        ' Dim totalAjuste As Decimal '= lblSaldoAjuste.Text

                        Dim codigoMovPrincipal As Integer = 0
                        'Dim codigoMovLiquidacion As Integer = 0

                        '      If totalAjuste <> 0 Then
                        'Si existe algun cambio entre el pago inicial y el pago ajuste es porque existe un ajuste

                        'Obtenemos el correlativo del ajuste
                        Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idTipoMovimiento = Ajuste_CodigoMovimiento _
                                                             Select x).FirstOrDefault

                        If correlativo IsNot Nothing Then
                            correlativo.correlativo += 1
                            conexion.SaveChanges()
                            idCorrelativo = correlativo.serie & correlativo.correlativo
                        Else
                            'Si no existe el correlativo lo creamos
                            Dim correlativoNuevo As New tblCorrelativo
                            correlativoNuevo.correlativo = 1
                            correlativoNuevo.serie = ""
                            correlativoNuevo.inicio = 1
                            correlativoNuevo.fin = 1000
                            correlativoNuevo.porcentajeAviso = 20
                            correlativoNuevo.idEmpresa = mdlPublicVars.idEmpresa
                            correlativoNuevo.idTipoMovimiento = mdlPublicVars.Ajuste_CodigoMovimiento
                            conexion.AddTotblCorrelativos(correlativoNuevo)
                            conexion.SaveChanges()

                            'asignar el numero de correlativo.
                            idCorrelativo = 1
                        End If
                        'Procedemos a crear el ajuste
                        '--------ENCABEZADO MOVIMIENTO INVENTARIO PRINCIPAL -------------
                        Dim movimiento As New tblMovimientoInventario
                        movimiento.correlativo = idCorrelativo
                        movimiento.empresa = mdlPublicVars.idEmpresa
                        movimiento.usuario = mdlPublicVars.idUsuario
                        movimiento.almacen = mdlPublicVars.General_idAlmacenPrincipal
                        movimiento.documento = ""
                        movimiento.bitBodega = True
                        movimiento.bitVenta = False
                        movimiento.tipoMovimiento = Ajuste_CodigoMovimiento
                        movimiento.inventarioInicial = mdlPublicVars.General_idTipoInventario
                        movimiento.inventarioFinal = mdlPublicVars.General_idTipoInventario
                        movimiento.ajuste = True
                        movimiento.traslado = False
                        movimiento.anulado = False
                        movimiento.revisado = False
                        movimiento.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                        movimiento.fechaTransaccion = fecha
                        movimiento.observacion = "Cod: " & salida.idSalida & ",Doc: " & salida.documento & ",Cliente: " & salida.tblCliente.Negocio
                        movimiento.revisado = True
                        movimiento.bitVenta = True
                        movimiento.bitBodega = False
                        movimiento.codigoSalida = salida.idSalida

                        conexion.AddTotblMovimientoInventarios(movimiento)
                        conexion.SaveChanges()

                        codigoMovPrincipal = movimiento.codigo
                        '    End If

                        For index = 0 To Me.grdProductos.Rows.Count - 1

                            'consultar datos base del registro de producto.
                            iddetalle = Me.grdProductos.Rows(index).Cells("iddetalle").Value ' id detalle
                            idarticulo = Me.grdProductos.Rows(index).Cells("Id").Value ' id articulo
                            articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value ' codigo
                            cantidad = Me.grdProductos.Rows(index).Cells("txmCantidad").Value ' cantidad
                            precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value, "Q", "").Trim) ' precio
                            total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value, "Q", "").Trim) ' total
                            idInventario = Me.grdProductos.Rows(index).Cells("idInventario").Value ' total
                            idSurtir = Me.grdProductos.Rows(index).Cells("idSurtir").Value ' idsurtir
                            cantSurtir = Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value ' cant surtir
                            observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value   'observacion
                            'consultar registro de inventario.
                            Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                             And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                             And x.idArticulo = idarticulo Select x).FirstOrDefault

                            'modificar registro de detalle.
                            Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                            detalle.comentario = observacion
                            If IsNumeric(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value) Then ' cantidadAjuste

                                'Obtenemos la informacion del articulo
                                Dim producto As tblArticulo = (From x In conexion.tblArticuloes.AsEnumerable Where x.idArticulo = idarticulo _
                                                               Select x).FirstOrDefault

                                idajustecate = Me.grdProductos.Rows(index).Cells("idajustecategoria").Value

                                'si el codigo de ajuste categoria es mayor a cero, existe
                                If idajustecate > 0 Then
                                    cantidadAjuste = Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value

                                    'Verificamos si es entrada o salida
                                    Dim tipoMov As tblTipoMovimiento = (From x In conexion.tblTipoMovimientoes.AsEnumerable Where x.idTipoMovimiento = idajustecate Select x).FirstOrDefault

                                    'Verificamos si es traslado o ajuste

                                    If tipoMov.traslado Then
                                        'Creamos un nuevo traslado

                                        'Procedemos a crear el ajuste
                                        '--------ENCABEZADO MOVIMIENTO INVENTARIO PRINCIPAL -------------
                                        Dim traslado As New tblMovimientoInventario
                                        traslado.correlativo = idCorrelativo
                                        traslado.empresa = mdlPublicVars.idEmpresa
                                        traslado.usuario = mdlPublicVars.idUsuario
                                        traslado.almacen = mdlPublicVars.General_idAlmacenPrincipal
                                        traslado.documento = ""
                                        traslado.bitBodega = True
                                        traslado.bitVenta = False
                                        traslado.tipoMovimiento = Ajuste_CodigoMovimiento
                                        traslado.inventarioInicial = mdlPublicVars.General_idTipoInventario
                                        traslado.inventarioFinal = tipoMov.idTipoInventario
                                        traslado.ajuste = False
                                        traslado.traslado = True
                                        traslado.anulado = False
                                        traslado.revisado = False
                                        traslado.fechaRegistro = dtpFechaRegistro.Text & " " & hora
                                        traslado.fechaTransaccion = fecha
                                        traslado.observacion = "Cod: " & salida.idSalida & ",Doc: " & salida.documento & ",Cliente: " & salida.tblCliente.Negocio
                                        traslado.revisado = True
                                        traslado.bitVenta = True
                                        traslado.bitBodega = False
                                        traslado.codigoSalida = salida.idSalida

                                        conexion.AddTotblMovimientoInventarios(traslado)
                                        conexion.SaveChanges()

                                        'Creamos el nuevo detalle del movimiento
                                        Dim detalleAj As New tblMovimientoInventarioDetalle
                                        detalleAj.movimientoInventario = traslado.codigo
                                        detalleAj.articulo = detalle.idArticulo
                                        detalleAj.cantidad = cantidadAjuste
                                        detalleAj.tipoMovimiento = tipoMov.idTipoMovimiento
                                        detalleAj.costo = producto.costoIVA
                                        detalleAj.total = producto.costoIVA * cantidadAjuste
                                        detalleAj.salidaDetalle = detalle.idSalidaDetalle

                                        detalleAj.entrada = tipoMov.aumentaInventario
                                        detalleAj.salida = tipoMov.disminuyeInventario

                                        conexion.AddTotblMovimientoInventarioDetalles(detalleAj)
                                        conexion.SaveChanges()

                                        'Devolvemos es cantidad al inventario del movimiento
                                        If tipoMov.idTipoInventario IsNot Nothing Then
                                            'Verificamos si aumenta o disminuye
                                            If tipoMov.nombre.Contains("-") Then
                                                traslado.inventarioInicial = mdlPublicVars.General_idTipoInventario
                                                traslado.inventarioFinal = tipoMov.idTipoInventario
                                                conexion.SaveChanges()
                                                'Obtenemos el inventario de se artciulo
                                                Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                                   Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = tipoMov.idTipoInventario
                                                                                   Select x).FirstOrDefault

                                                'decremental el total de la salida o venta.
                                                'salida.total = salida.total - detalleAj.total

                                                If inventario IsNot Nothing Then
                                                    'Aumentamos el saldo del inventario y disminuimos la salida
                                                    inventario.saldo -= cantidadAjuste
                                                    inventario.salida -= cantidadAjuste

                                                    'Guardamos los cambios
                                                    conexion.SaveChanges()
                                                Else
                                                    'Cremos el registro en inventario
                                                    Dim inveNuevo As New tblInventario

                                                    inveNuevo.idArticulo = detalle.idArticulo
                                                    inveNuevo.entrada = 0
                                                    inveNuevo.salida = 0
                                                    inveNuevo.transito = 0
                                                    inveNuevo.reserva = 0
                                                    inveNuevo.saldo = -cantidadAjuste
                                                    inveNuevo.idTipoInventario = tipoMov.idTipoInventario
                                                    inveNuevo.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal

                                                    'Agregamos el inventario
                                                    conexion.AddTotblInventarios(inveNuevo)
                                                    conexion.SaveChanges()

                                                End If
                                                detalle.cantidad = detalle.cantidad - cantidadAjuste

                                            ElseIf tipoMov.nombre.Contains("+") Then

                                                traslado.inventarioFinal = mdlPublicVars.General_idTipoInventario
                                                traslado.inventarioInicial = tipoMov.idTipoInventario

                                                'Obtenemos el inventario de se artciulo
                                                Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                                   Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = tipoMov.idTipoInventario
                                                                                   Select x).FirstOrDefault


                                                'incremental el total de la salida o venta.
                                                'salida.total = salida.total + detalleAj.total

                                                If inventario IsNot Nothing Then
                                                    'Aumentamos el saldo del inventario y disminuimos la salida
                                                    inventario.saldo += cantidadAjuste
                                                    inventario.entrada += cantidadAjuste

                                                    'Guardamos los cambios
                                                    conexion.SaveChanges()
                                                Else
                                                    'Cremos el registro en inventario
                                                    Dim inveNuevo As New tblInventario

                                                    inveNuevo.idArticulo = detalle.idArticulo
                                                    inveNuevo.entrada = 0
                                                    inveNuevo.salida = 0
                                                    inveNuevo.transito = 0
                                                    inveNuevo.reserva = 0
                                                    inveNuevo.saldo = cantidadAjuste
                                                    inveNuevo.idTipoInventario = tipoMov.idTipoInventario
                                                    inveNuevo.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal

                                                    'Agregamos el inventario
                                                    conexion.AddTotblInventarios(inveNuevo)
                                                    ctx.SaveChanges()

                                                End If
                                                detalle.cantidad = detalle.cantidad + cantidadAjuste
                                            End If
                                        End If
                                    ElseIf tipoMov.ajuste Then
                                        'Creamos el nuevo detalle del movimiento
                                        Dim detalleAj As New tblMovimientoInventarioDetalle

                                        detalleAj.movimientoInventario = codigoMovPrincipal
                                        detalleAj.articulo = idarticulo

                                        detalleAj.tipoMovimiento = idajustecate
                                        detalleAj.costo = precio
                                        detalleAj.total = (precio * cantidadAjuste)
                                        detalleAj.salidaDetalle = detalle.idSalidaDetalle
                                        detalleAj.cantidad = cantidadAjuste
                                        If tipoMov.aumentaInventario = True Then

                                            detalleAj.entrada = True
                                            detalleAj.salida = False
                                        ElseIf tipoMov.disminuyeInventario = True Then
                                            detalleAj.salida = True
                                            detalleAj.entrada = False
                                        End If

                                        conexion.AddTotblMovimientoInventarioDetalles(detalleAj)
                                        conexion.SaveChanges()

                                        'si ajuste categoria es una entrada, quiere decir que es un agregado o suma a la cantidad existente, por lo tanto descontar de inventario.
                                        If tipoMov.disminuyeInventario = True Then
                                            'restar de inventario y guardar registro de ajuste.
                                            'inve.saldo = inve.saldo - cantidadAjuste
                                            detalle.cantidad = detalle.cantidad - cantidadAjuste

                                            'Obtenemos el inventario de se artciulo
                                            Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                               Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = mdlPublicVars.General_idTipoInventario
                                                                               Select x).FirstOrDefault

                                            'Aumentamos el saldo del inventario y disminuimos la salida
                                            inventario.saldo += cantidadAjuste
                                            inventario.salida -= cantidadAjuste

                                            conexion.SaveChanges()
                                        Else
                                            'si ajuste movimiento no es entrada, es una salida se debe agregar la cantidad de ajuste al inventario.
                                            'inve.saldo = inve.saldo + cantidadAjuste
                                            detalle.cantidad = detalle.cantidad + cantidadAjuste
                                            conexion.SaveChanges()
                                            'If detalle.cantidad < 0 Then
                                            '    alerta.contenido = "Error !!!, Cantidad no puede ser menor a cero en articulo : " + articulo.ToString
                                            '    alerta.fnErrorContenido()
                                            '    success = False
                                            '    Exit Try
                                            'End If
                                        End If

                                        If producto.bitKit Then
                                            'Obtenemos la lista del detalle del kit en la tblSalidaDetalle
                                            Dim lSalidaDetalleKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = iddetalle _
                                                                                                  Select x).ToList

                                            'Recorremos el kit detalle y generamos los ajustes
                                            Dim cantidadAnterior As Integer = 0
                                            For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetalleKit
                                                cantidadAnterior = salidaDetalleKit.cantidad / salidaDetalleKit.tblSalidaDetalle2.cantidad

                                                'Creamos el nuevo detalle del movimiento
                                                Dim detalleAju As New tblMovimientoInventarioDetalle

                                                detalleAju.movimientoInventario = codigoMovPrincipal
                                                detalleAju.articulo = salidaDetalleKit.idArticulo
                                                detalleAju.cantidad = cantidadAjuste * salidaDetalleKit.cantidad
                                                detalleAju.tipoMovimiento = idajustecate
                                                detalleAju.costo = 0
                                                detalleAju.total = 0
                                                detalleAju.salidaDetalle = detalle.idSalidaDetalle

                                                If tipoMov.aumentaInventario = True Then
                                                    detalleAju.entrada = True
                                                    detalleAju.salida = False
                                                ElseIf tipoMov.disminuyeInventario = True Then
                                                    detalleAju.salida = True
                                                    detalleAju.entrada = False
                                                End If

                                                conexion.AddTotblMovimientoInventarioDetalles(detalleAju)
                                                conexion.SaveChanges()

                                                'si ajuste categoria es una entrada, quiere decir que es un agregado o suma a la cantidad existente, por lo tanto descontar de inventario.
                                                If tipoMov.disminuyeInventario = True Then
                                                    If (inve.saldo - (cantidadAjuste * cantidadAnterior)) >= 0 Then
                                                        'restar de inventario y guardar registro de ajuste.
                                                        'inve.saldo = inve.saldo - cantidadAjuste
                                                        salidaDetalleKit.cantidad = salidaDetalleKit.cantidad - (cantidadAjuste * cantidadAnterior)
                                                        conexion.SaveChanges()
                                                    Else
                                                        'cantidad insuficiente, error !!!
                                                        'no hay existencia.
                                                        alerta.contenido = "Error !!!, Existencia insuficiente de articulo: " + articulo.ToString
                                                        alerta.fnErrorContenido()
                                                        success = False
                                                        Exit Try
                                                    End If
                                                Else
                                                    'si ajuste movimiento no es entrada, es una salida se debe agregar la cantidad de ajuste al inventario.
                                                    'inve.saldo = inve.saldo + cantidadAjuste
                                                    salidaDetalleKit.cantidad = salidaDetalleKit.cantidad + (cantidadAjuste * cantidadAnterior)
                                                    If detalle.cantidad < 0 Then
                                                        alerta.contenido = "Error !!!, Cantidad no puede ser menor a cero en articulo : " + articulo.ToString
                                                        alerta.fnErrorContenido()
                                                        success = False
                                                        Exit Try
                                                    End If
                                                End If
                                            Next
                                        End If
                                        conexion.SaveChanges()
                                    End If

                                    conexion.SaveChanges()
                                End If
                            End If

                            'Verifiamos si es surtir
                            If idSurtir > 0 Then
                                'Modificamos el pendiente por surtir
                                Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                Dim p As tblSurtir
                                For Each p In pendiente
                                    If cantSurtir > p.saldo Then
                                        cantSurtir -= p.saldo
                                        p.saldo = 0

                                    Else
                                        p.saldo -= cantSurtir
                                        cantSurtir = 0
                                    End If
                                    conexion.SaveChanges()
                                    If cantSurtir = 0 Then
                                        Exit For
                                    End If
                                Next
                            ElseIf cantSurtir > 0 Then
                                'Creamos el pendiente por surtir
                                Dim pendiente As New tblSurtir
                                pendiente.salidaDetalle = detalle.idSalidaDetalle
                                pendiente.articulo = detalle.idArticulo
                                pendiente.cantidad = cantSurtir
                                pendiente.saldo = cantSurtir
                                pendiente.fechaTransaccion = fecha
                                pendiente.anulado = 0
                                pendiente.usuario = mdlPublicVars.idUsuario
                                pendiente.vendedor = mdlPublicVars.idVendedor
                                pendiente.cliente = salida.idCliente

                                conexion.AddTotblSurtirs(pendiente)
                                conexion.SaveChanges()
                            End If

                        Next

                        conexion.SaveChanges()
                        'paso 8, completar la transaccion.
                        transaction.Complete()

                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            If success = True Then
                conexion.AcceptAllChanges()
                alerta.fnGuardar()
                'fnLlenarDatos()
                Return True
            Else
                'alerta.fnErrorGuardar()
                Console.WriteLine("La operacion no pudo ser completada")
                Return False
            End If


            'cerrar la conexion
            conn.Close()
        End Using

    End Function


    'NUEVO
    Private Sub pbNuevo_Click() Handles Me.panel0
        'bitEditarBodega = False
        'If fnCuentaArticulos() Then
        '    If RadMessageBox.Show("Esta venta no ha sigo guardada, ¿desea realizar una nueva venta?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
        '        fnNuevo()
        '    End If
        'End If
        Dim formPedido As New frmVentaPequenia
        formPedido.Text = "Ventas"
        formPedido.bitEditarBodega = False
        formPedido.bitEditarSalida = False
        formPedido.MdiParent = frmMenuPrincipal
        permiso.PermisoFrmEspeciales(formPedido, False)
        Me.LayoutMdi(MdiLayout.Cascade)
    End Sub

#Region "reserva"

    ''RESERVAR


    'Private Sub pbReservar_Click() Handles Me.panel2
    '    If bitEditarBodega = True Or bitEditarSalida = True And bitSugerirDespacho = False And bitSugerirReserva = False Then
    '        alerta.fnUtiliceModificar()
    '        Exit Sub
    '    End If
    '    If bitSugerirReserva = True Then
    '        fnModificarCotizacion()
    '        'Obtenemos la salida
    '        Dim salida As tblSalida = (From x In ctx.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault
    '        CambiacotizarAreservar(salida.idSalida, salida.credito, salida.idCliente)
    '        Me.Close()
    '    ElseIf fnErrores() = False Then
    '        fnGuardarReserva()
    '    End If
    'End Sub
#End Region


    'DESPACHAR
    Private Sub pbGuardar_Click() Handles Me.panel2



        If bitEditarBodega Or bitEditarSalida And Not bitSugerirDespacho And Not bitEditarSalida Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If


        If bitSugerirDespacho = True Then
            fnModificarCotizacion()
            'Obtenemos la salida
            Dim salida As tblSalida

            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities
            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                salida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault
                conn.Close()
            End Using


            If CambiacotizarAdespacho(salida.idSalida, salida.credito, salida.idCliente) Then
                'Mandar a imprimir el despacho
                fnImprimir(salida.idSalida)
                fnNuevo()
                Me.Close()
                bitEditarSalida = False
                bitSugerirDespacho = False
                bitSugerirReserva = False
            End If


        ElseIf fnErrores() = False Then


            If RadMessageBox.Show("¿Desea realizar despacho?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = vbYes Then
                fnGuardarDespacho()
            End If


            'llamamos al formulario de pago
            If bitRealizarPago = True Then

                'Dim cliente As tblCliente
                ' Dim salida As tblSalida

                'Dim conexion As New dsi_pos_demoEntities
                'Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                '    conn.Open()
                '    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                '    ' salida = (From z In conexion.tblSalidas Where z.idSalida = codigoSalidaAFacturar Select z).FirstOrDefault

                '    ' cliente = (From x In conexion.tblClientes Where x.idCliente = salida.idCliente Select x).FirstOrDefault
                '    conn.Close()
                'End Using

                frmPagoVentaPequenia.Text = "Pagos"
                frmPagoVentaPequenia.codigosalidaAFacturar = codigoSalidaAFacturar 'enviamos el idsalida a cobrar
                frmPagoVentaPequenia.StartPosition = FormStartPosition.CenterScreen
                frmPagoVentaPequenia.ShowDialog()
                frmPagoVentaPequenia.Dispose()

            End If

            If mdlPublicVars.bitCrearFacturaVentaPequenia = True Then

                mdlPublicVars.GuardarFacturacion(codigoSalidaAFacturar)

                ' fnNuevo()
            End If

            If mdlPublicVars.bitImprimirFacturaVentaPequenia = True Then

                Dim fechaServer As DateTime = mdlPublicVars.fnFecha_horaServidor
                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Try

                    Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                        conn.Open()
                        conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


                        'recorremos las facturas creadas
                        For Each idFac As Integer In mdlPublicVars.listaDeFacturas

                            Dim factura As tblFactura = (From f In conexion.tblFacturas Where f.IdFactura = idFac Select f).FirstOrDefault

                            Dim impresion As tblImpresion = (From x In conexion.tblImpresions Where CType(x.descripcion, String) = CType(idFac, String) And x.tblTipoImpresion.bitFactura = True Select x).FirstOrDefault

                            If impresion IsNot Nothing Then
                                If impresion.bitImpreso = False Then

                                    'no mostramos impresoras
                                    'seleccionar una impresora.
                                    'frmImpresoras.Text = "Impresoras"
                                    'frmImpresoras.ShowDialog()
                                    'frmImpresoras.Dispose() 


                                    Dim r As New clsReporte
                                    r.tabla = mdlPublicVars.EntitiToDataTable(conexion.sp_ReporteFactura1("", impresion.descripcion, mdlPublicVars.idEmpresa))
                                    r.nombreParametro = "@filtro"
                                    r.reporte = impresion.tblTipoImpresion.reporte
                                    r.parametro = ""
                                    r.imprimirReporte()

                                    'If MessageBox.Show("Se imprimio correctamente !!!", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo) = Windows.Forms.DialogResult.Yes Then
                                    impresion.bitImpreso = True
                                    impresion.usuarioImprime = mdlPublicVars.idUsuario
                                    impresion.fechaImpresion = fechaServer

                                    factura.bitImpreso = True

                                    'Seleccionamos el tipo de pagos para saber si pago la factura o es pago transito
                                    Dim pago As tblCaja = (From c In conexion.tblCajas Where c.codigo = superSearchCodigoPagoVentaPequenia Select c).FirstOrDefault

                                    If pago.tblTipoPago.calendarizada Then
                                        factura.pagosTransito = factura.Monto
                                        factura.pagado = False

                                    Else
                                        factura.pagos = factura.Monto
                                        factura.pagado = True
                                    End If

                                    'factura.pagos = factura.Monto
                                    'factura.pagado = True

                                    conexion.SaveChanges()


                                    'Else

                                    ' alerta.contenido = "No existe Formato de Impresio"
                                    ' alerta.fnErrorContenido()
                                    'End If

                                End If

                            End If
                            conn.Close()
                        Next

                        'reiniciamos el codigo pago
                        superSearchCodigoPagoVentaPequenia = 0
                    End Using

                Catch ex As Exception
                    alerta.fnError()
                End Try
            End If

            fnNuevo() ' nueva salida para limpia campos formulario
        End If

    End Sub

    Private Sub pbSalir_Click() Handles Me.panel3

        If RadMessageBox.Show("¿ Desea Salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
            Me.Close()
        End If
    End Sub


    'Funcion utilizada para imprimir el despacho
    Private Sub fnImprimir(ByVal codSalida)
        Try
            Dim c As New clsReporte
            c.tabla = EntitiToDataTable(ctx.sp_reportePickingPedido("", codSalida))
            c.nombreParametro = "@filtro"
            c.reporte = "ventas_Picking.rpt"
            c.parametro = ""
            c.verReporte()
        Catch ex As Exception
        End Try

    End Sub

    'MODIFICAR
    Private Sub pbModificar_Click() Handles Me.panel2

        If fnErrores() = False Then
        Else
            Exit Sub
        End If

        Dim success As Boolean = False

        If chkDespachado.Checked = True And bitEditarBodega = False Then
            alerta.fnNoEditable()
            Exit Sub
        ElseIf chkDespachado.Checked = True And bitEditarBodega = True Then

            If RadMessageBox.Show("Desea modificar el despacho ", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                success = fnModificarDespacho()
            End If

        ElseIf chkReservado.Checked = True Then
            If RadMessageBox.Show("Desea modificar la reserva ", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                success = fnModificarReserva()
            End If

            'End If

        ElseIf chkCotizado.Checked = True Then
            If RadMessageBox.Show("Desea modificar la cotización ", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                success = fnModificarCotizacion()
            End If
        End If


        If success = True Then
            fnLlenarDatos()
            Me.Close()
        End If

    End Sub

    'BITACORA
    Private Sub pbBitacora_Click() Handles Me.panel5
        Try
            If CInt(codigoCliente) > 0 Then
                frmBitacora.idCliente = codigoCliente
                frmBitacora.idVendedor = cmbVendedor.SelectedValue
                frmBitacora.fecha = dtpFechaRegistro.Value
                frmBitacora.Text = "Bitacora"
                frmBitacora.StartPosition = FormStartPosition.CenterScreen
                permiso.PermisoFrmEspeciales(frmBitacora, False)
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Sub pbxInformacionCliente_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInfoCliente.Click
        Try
            Dim codCliente As Integer = CInt(codigoCliente)
            If codCliente > 0 Then
                frmInformacionCliente.codcliente = codigoCliente.ToString
                frmInformacionCliente.ventaActual = txtCredito.Text
                frmInformacionCliente.Text = "Informacion de Cliente"
                frmInformacionCliente.StartPosition = FormStartPosition.CenterScreen
                permiso.PermisoDialogEspeciales(frmInformacionCliente)
                frmInformacionCliente.Dispose()
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

    End Sub


    'Funcion utilizada para bloquear cliente
    Public Sub fnBloquearCombo()
        Try
            'Obtenemos  el numero de filas
            Dim filas As Integer = CInt(Me.grdProductos.Rows.Count)

            If filas > 1 Then
                'cmbCliente.Enabled = False
                cmbInventario.Enabled = False
            ElseIf filas = 1 Then
                'Verificamos si tiene informacion la fila
                Dim nombre As String = ""
                Try
                    nombre = Me.grdProductos.Rows(0).Cells("txbProducto").Value
                Catch ex As Exception
                    nombre = ""
                End Try

                If nombre IsNot Nothing Then
                    'cmbCliente.Enabled = False
                    cmbInventario.Enabled = False
                Else
                    'cmbCliente.Enabled = True
                    cmbInventario.Enabled = True
                End If
            End If
        Catch ex As Exception
        End Try
    End Sub

    'Cuando se da TAB en la fecha de registro o simplemente damos el foco a otro control
    Private Sub dtpFechaRegistro_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dtpFechaRegistro.Leave
        txtClave.Focus()
    End Sub



    'Procedimiento que permite cambiar el Estado de una salida de Cotizado a Despachado.
    Public Function CambiacotizarAdespacho(ByVal codigo As Integer, ByVal EsCredito As Boolean, ByVal CodCliente As Integer) As Boolean
        'variables para errores.
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim fecha As DateTime = fnFecha_horaServidor()

        'Variables para Guardar los resultado de las Consultas, El de Salidadetalle, ArticuloEmpresa y cada fila del Detalle...
        Dim ArtEmpresa

        'Variable para guardar temporalmene el codigo del articulo y la cantidad solicitada..
        Dim NombreArt As String
        Dim CodArticulo As Integer
        Dim Pedido As Integer
        Dim saldo As Integer
        Dim tInventario As Integer

        Dim Detalles As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles.AsEnumerable
                                                     Join y In ctx.tblArticuloes On x.idArticulo Equals y.idArticulo
                                                     Where x.idSalida = codigo And Not x.anulado
                                                     Select x).ToList

        'Entramos a revisar cada registro en detalle de salida, si existe un articulo que no cubre existencia se guarda el error.
        For Each fila As tblSalidaDetalle In Detalles
            NombreArt = fila.tblArticulo.nombre1
            CodArticulo = fila.idArticulo
            Pedido = fila.cantidad
            tInventario = fila.tipoInventario

            'Se Consulta en la tabla ArticulosEmpresa para consusltar la existencia real  "Saldo".
            ArtEmpresa = (From AE In ctx.tblInventarios Where AE.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                          And AE.idArticulo = CodArticulo And AE.idTipoInventario = tInventario Select AE).First

            If ArtEmpresa.saldo < Pedido Then
                saldo = Pedido - ArtEmpresa.saldo
                'Guardamos el error con los datos del producto en una variable para q se agruen todos lo productos que tengan error.
                errContenido = errContenido & "El articulo: " & NombreArt & ", Codigo: " & fila.tblArticulo.codigo1 & vbCrLf & ", Pedido " & Pedido.ToString & " en existencia " & ArtEmpresa.saldo.ToString & ", Faltantes " & saldo & vbCrLf
                success = False
            End If

        Next

        'Si existe un error mandamos el mensaje e interrumpimos la aplicación
        If success = False Then
            alerta.contenido = errContenido
            alerta.fnFaltantes()
        End If

        Using transaction As New TransactionScope
            Try
                'VERIFICAR CREDITO.
                If success = False Then
                    Exit Try
                End If

                'crear registro de salida bodega.
                Dim sb As New tblsalidaBodega
                sb.idsalida = codigo
                ctx.AddTotblsalidaBodegas(sb)
                ctx.SaveChanges()

                'Se Consulta en la tabla Salida y se cambia el estado de Despachado a True.
                Dim salida As tblSalida = (From x In ctx.tblSalidas _
                                              Where x.idSalida = codigo Select x).First

                'pasar despachar a true
                If EsCredito = True Then
                    Dim fechaVencimiento As DateTime = mdlPublicVars.fnFecha_horaServidor
                    Dim dia = Weekday(fechaVencimiento, vbMonday)
                    Dim cli As tblCliente = (From x In ctx.tblClientes Where x.idCliente = CodCliente Select x).First
                    Dim diasCredito As Integer = (From x In ctx.tblClienteTipoPagoes Where x.idtipoPago = cli.idTipoPago Select x.dias).First

                    If diasCredito = 5 Then
                        If dia = 1 Then
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito)
                        Else
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 1)
                        End If
                    End If

                    If diasCredito = 20 Then
                        If dia >= 1 And dia <= 4 Then
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 3)
                        Else
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 4)
                        End If
                    End If
                End If
                salida.despachar = True
                salida.fechaDespachado = fecha
                ctx.SaveChanges()

                'Entramos y modificamos a cada registro en detalle de salida, empezamos a cambiar el saldo del producto en inventario.
                Dim idInventario As Integer = 0
                Dim idDetalle As Integer = 0
                For Each fila As tblSalidaDetalle In Detalles
                    CodArticulo = fila.idArticulo
                    Pedido = fila.cantidad
                    idInventario = fila.tipoInventario
                    idDetalle = fila.idSalidaDetalle
                    If fila.tblArticulo.bitKit Then
                        'Obtenemos la lista de los productos asociados a ese kit
                        Dim lDetalleKit As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles Where x.kitSalidaDetalle = idDetalle _
                                                                       Select x).ToList

                        For Each detallekit As tblSalidaDetalle In lDetalleKit
                            'descontar existencias.
                            Dim codArtKit As Integer = detallekit.idArticulo
                            Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                         And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                         And x.idArticulo = codArtKit Select x).FirstOrDefault

                            'si es reserva, incrementar la reserva , y decrementar el saldo
                            If inve.saldo >= (fila.cantidad * detallekit.cantidad) Then
                                inve.saldo = inve.saldo - (fila.cantidad * detallekit.cantidad)
                                inve.salida = inve.salida + (fila.cantidad * detallekit.cantidad)
                                ctx.SaveChanges()
                            Else
                                alerta.contenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + detallekit.tblArticulo.nombre1
                                alerta.fnErrorContenido()
                                success = False
                                Exit Try
                            End If
                        Next
                    ElseIf fila.tblArticulo.bitProducto Then

                        'descontar existencias.
                        Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                     And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                     And x.idArticulo = CodArticulo Select x).FirstOrDefault

                        'descontamos del inventario
                        If inve.saldo >= fila.cantidad Then
                            inve.saldo = inve.saldo - fila.cantidad
                            inve.salida += fila.cantidad
                            ctx.SaveChanges()
                        Else
                            alerta.contenido = "Error !!!, Existencia insuficiente " & fila.tblArticulo.nombre1
                            alerta.fnErrorContenido()
                            success = False
                            Exit Try
                        End If
                    End If

                    'Verificamos si tiene pendientes por pedir
                    Dim lPendientes As List(Of tblPendientePorPedir) = (From x In ctx.tblPendientePorPedirs
                                                                         Where x.bitCreado And Not x.anulado And x.saldo > 0 And x.articulo = CodArticulo
                                                                         Select x).ToList
                    Dim cantidadDescontar As Integer = fila.cantidad
                    'Recorremos la lista de pendientes
                    For Each pendiente As tblPendientePorPedir In lPendientes

                        If cantidadDescontar > pendiente.saldo Then
                            cantidadDescontar -= pendiente.saldo
                            pendiente.saldo = 0

                        Else
                            pendiente.saldo -= cantidadDescontar
                            cantidadDescontar = 0
                        End If
                        ctx.SaveChanges()
                        If cantidadDescontar = 0 Then
                            Exit For
                        End If
                    Next
                Next

                'completar la transaccion.
                transaction.Complete()
            Catch ex As System.Data.EntityException
            Catch ex As Exception
                If ex.[GetType]() <> GetType(UpdateException) Then
                    Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                    alerta.fnErrorGuardar()
                    Exit Try
                End If
            End Try
        End Using

        If success = True Then
            ctx.AcceptAllChanges()
            alerta.fnGuardar()
        Else
            Console.WriteLine("La operacion no pudo ser completada")
        End If

        Return success
    End Function

    'Procedimiento que permite cambiar el Estado de una salida de Cotizado a á Reservado.
    Public Function CambiacotizarAreservar(ByVal codigo As Integer, ByVal EsCredito As Boolean, ByVal CodCliente As Integer) As Boolean
        'variables para errores.
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim fecha As DateTime = fnFecha_horaServidor()

        Using transaction As New TransactionScope
            Try
                'Variables para Guardar los resultado de las Consultas, El de Salidadetalle, ArticuloEmpresa y cada fila del Detalle...
                Dim ArtEmpresa
                'Variable para guardar temporalmene el codigo del articulo y la cantidad solicitada..
                Dim NombreArt As String
                Dim CodArticulo As Integer
                Dim Pedido As Integer
                Dim saldo As Integer
                Dim tInventario As Integer
                Dim detalles As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles.AsEnumerable
                                                             Join y In ctx.tblArticuloes On x.idArticulo Equals y.idArticulo
                                                             Where x.idSalida = codigo
                                                            Select x).ToList

                'Entramos a revisar cada registro en detalle de salida, si existe un articulo que no cubre existencia se guarda el error.
                For Each fila As tblSalidaDetalle In detalles
                    NombreArt = fila.tblArticulo.nombre1
                    CodArticulo = fila.idArticulo
                    Pedido = fila.cantidad
                    tInventario = fila.tipoInventario
                    'Se Consulta en la tabla ArticulosEmpresa para consusltar la existencia real  "Saldo".
                    ArtEmpresa = (From AE In ctx.tblInventarios Where AE.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                  And AE.idArticulo = CodArticulo And AE.idTipoInventario = tInventario Select AE).First

                    If ArtEmpresa.saldo < Pedido Then
                        saldo = Pedido - ArtEmpresa.saldo
                        'Guardamos el error con los datos del producto en una variable para q se agruen todos lo productos que tengan error.
                        errContenido = errContenido & "El articulo: " & NombreArt & ", Pedido " & Pedido.ToString & " en existencia " & ArtEmpresa.saldo.ToString & ", Faltantes " & saldo & vbCrLf
                        success = False
                    End If
                Next

                'Si existe un error mandamos el mensaje e interrumpimos la aplicación
                If success = False Then
                    alerta.contenido = errContenido
                    alerta.fnFaltantes()
                    Exit Try
                End If

                If success = False Then
                    Exit Try
                End If

                'Se Consulta en la tabla Salida y se cambia el estado de Despachado a True.
                Dim salida As tblSalida = (From x In ctx.tblSalidas _
                                              Where x.idSalida = codigo Select x).FirstOrDefault

                'Definimos la fecha en que vencerá la reserva
                Dim diaSemana As Integer = Weekday(mdlPublicVars.fnFecha_horaServidor, vbMonday)
                Dim fechaActual As DateTime = mdlPublicVars.fnFecha_horaServidor
                Dim fechaReserva As DateTime = mdlPublicVars.fnFecha_horaServidor
                Dim dias As Integer = 0
                Try
                    Dim cadDias As String = InputBox("Ingrese dias de reserva", "Informacion", mdlPublicVars.Salida_ReservaDias)
                    dias = CInt(cadDias)
                Catch ex As Exception
                    dias = mdlPublicVars.Salida_ReservaDias
                End Try

                If (diaSemana = 1) Then
                    fechaReserva = fechaActual.AddDays(dias)
                Else
                    fechaReserva = fechaActual.AddDays(dias + 1)
                End If

                'pasar reservado  a true
                salida.reservado = True
                salida.fechaVencimientoReserva = fechaReserva

                ctx.SaveChanges()

                'Entramos y modificamos a cada registro en detalle de salida, empezamos a cambiar el saldo del producto en inventario.
                Dim idInventario As Integer = 0
                Dim idDetalle As Integer = 0
                For Each fila As tblSalidaDetalle In detalles
                    CodArticulo = fila.idArticulo
                    Pedido = fila.cantidad
                    idInventario = fila.tipoInventario
                    idDetalle = fila.idSalidaDetalle
                    If fila.tblArticulo.bitKit Then
                        'Obtenemos la lista de los productos asociados a ese kit
                        Dim lDetalleKit As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles Where x.kitSalidaDetalle = idDetalle _
                                                                       Select x).ToList

                        For Each detallekit As tblSalidaDetalle In lDetalleKit
                            'descontar existencias.
                            Dim codArtKit As Integer = detallekit.idArticulo
                            Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                         And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                         And x.idArticulo = codArtKit Select x).FirstOrDefault

                            'si es reserva, incrementar la reserva , y decrementar el saldo
                            If inve.saldo >= (fila.cantidad * detallekit.cantidad) Then
                                inve.saldo = inve.saldo - (fila.cantidad * detallekit.cantidad)
                                inve.reserva = inve.reserva + (fila.cantidad * detallekit.cantidad)
                                ctx.SaveChanges()
                            Else
                                alerta.contenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + fila.tblArticulo.nombre1
                                alerta.fnErrorContenido()
                                success = False
                                Exit Try
                            End If
                        Next
                    ElseIf fila.tblArticulo.bitProducto Then

                        'descontar existencias.
                        Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                     And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                     And x.idArticulo = CodArticulo Select x).FirstOrDefault

                        inve.saldo = inve.saldo - fila.cantidad
                        inve.reserva = inve.reserva + fila.cantidad
                        ctx.SaveChanges()

                    End If
                Next

                'completar la transaccion.
                transaction.Complete()
            Catch ex As System.Data.EntityException
            Catch ex As Exception
                If ex.[GetType]() <> GetType(UpdateException) Then
                    Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                    alerta.fnErrorGuardar()
                    Exit Try
                    ' If we get to this point, the operation will be retried. 
                End If
            End Try
        End Using

        If success = True Then
            ctx.AcceptAllChanges()
            alerta.fnGuardar()
        Else
            Console.WriteLine("La operacion no pudo ser completada")
        End If

        Return success
    End Function


    'Busqueda de cliente por clave
    Private Sub txtClave_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs) Handles txtClave.KeyPress
        Try

            If e.KeyChar = ChrW(Keys.Enter) Or e.KeyChar = ChrW(Keys.Tab) Then
                Dim clave As String = txtClave.Text.Trim

                'Obtenemos el cliente
                Dim cliente As tblCliente = (From x In ctx.tblClientes _
                                             Where x.clave = clave _
                                             Select x).FirstOrDefault

                If cliente IsNot Nothing Then
                    codigoCliente = cliente.idCliente
                    txtNit.Text = cliente.nit1
                    txtCliente.Text = cliente.Nombre1

                    'asignar vendedor Default
                    cmbVendedor.SelectedValue = cliente.idVendedor

                    'activa si tien credito el cliente
                    txtCreditoDisponible.Text = "0.00"
                    rbnCredito.Checked = cliente.tblClienteTipoPago.credito
                    rbnContado.Checked = Not cliente.tblClienteTipoPago.credito

                    rbnCredito.Enabled = cliente.tblClienteTipoPago.credito
                    rbnContado.Enabled = cliente.tblClienteTipoPago.credito
                Else
                    RadMessageBox.Show("Cliente no encontrado", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                End If
            End If
        Catch ex As Exception
        End Try
    End Sub

    'IMPRESIONES
    Private Sub fnImpresiones() Handles Me.panel6
        'Obtenemos el cliente
        Dim codigo As Integer = CInt(codigoCliente)

        If codigo > 0 Then
            frmListadoImpresiones.Text = "Lista de Impresiones"
            frmListadoImpresiones.StartPosition = FormStartPosition.CenterScreen
            frmListadoImpresiones.cliente = codigo
            permiso.PermisoDialogEspeciales(frmListadoImpresiones)
            frmListadoImpresiones.Dispose()
        Else
            RadMessageBox.Show("Debe elegir un cliente!", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Exclamation)

        End If
    End Sub



    Private Sub txtClave_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles txtClave.Leave
        Dim clave As String = txtClave.Text

        'Obtenemos el cliente
        Dim cliente As tblCliente = (From x In ctx.tblClientes _
                                        Where x.clave = clave _
                                        Select x).FirstOrDefault
        If Not bitEditarBodega And Not bitEditarSalida Then
            If cliente IsNot Nothing Then
                codigoCliente = cliente.idCliente
            Else
                alerta.contenido = "Cliente no encontrado"
            End If
        End If
   
    End Sub


    'IMPORTAR
    Private Sub btnImportar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImportar.Click
        Try
            If CInt(codigoCliente) > 0 Then
                frmImportar.Text = "Importar"
                frmImportar.cliente = CInt(codigoCliente)
                frmImportar.bitSalida = True
                frmImportar.ShowDialog()

                Dim tblR As DataTable = frmImportar.tblRetorno
                frmImportar.Dispose()
                If tblR.Rows.Count > 0 Then

                    'buscar fila con id en blanco.
                    Dim filaBlanco As Integer = -1

                    Dim index
                    For index = 0 To Me.grdProductos.Rows.Count - 1
                        If Me.grdProductos.Rows(index).Cells(1).Value Is Nothing Then
                            Me.grdProductos.Rows.RemoveAt(index)
                        ElseIf LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString)).Length = 0 Then
                            filaBlanco = index
                        ElseIf LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString)).Length = 1 And LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString)) = 0 Then
                            filaBlanco = index
                        End If
                    Next

                    Dim inicio As Integer = 0

                    If filaBlanco <> -1 Then
                        'agregar al grid si nueva fila.
                        Me.grdProductos.Rows(filaBlanco).Cells("id").Value = tblR.Rows(0).Item("Id")
                        Me.grdProductos.Rows(filaBlanco).Cells("txmCodigo").Value = tblR.Rows(0).Item("Codigo")
                        Me.grdProductos.Rows(filaBlanco).Cells("txbProducto").Value = tblR.Rows(0).Item("Nombre")
                        Me.grdProductos.Rows(filaBlanco).Cells("txmCantidad").Value = tblR.Rows(0).Item("Cantidad")
                        Me.grdProductos.Rows(filaBlanco).Cells("txbPrecio").Value = tblR.Rows(0).Item("Costo")
                        inicio = 1
                    End If

                    'agregar los elementos restantes al grid.
                    For index = inicio To tblR.Rows.Count - 1
                        Me.grdProductos.Rows.Add(0, tblR.Rows(index).Item("id"), tblR.Rows(index).Item("Codigo"), tblR.Rows(index).Item("Nombre"),
                                                 tblR.Rows(index).Item("Cantidad"), tblR.Rows(index).Item("Costo"), 0, False, "", 0, "", "", 0, 0, 0,
                                                 mdlPublicVars.General_idTipoInventario, mdlPublicVars.Empresa_PrecioNormal)
                    Next
                    fnActualizar_Total()
                    Me.grdProductos.Rows.AddNew()
                End If
            Else
                RadMessageBox.Show("Debe seleccionar un cliente", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Info)
                'cmbCliente.Focus()
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'BOTON DETALLE PENDIENTES SURTIR
    Private Sub btnDetallePendiente_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If CInt(codigoCliente > 0) Then
            frmDetallePendienteNuevo.Text = "Pendientes por Surtir"
            frmDetallePendienteNuevo.bitPendiente = True
            frmDetallePendienteNuevo.cliente = CInt(codigoCliente)
            frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
            frmDetallePendienteNuevo.ShowDialog()
            frmDetallePendienteNuevo.Dispose()
        End If
    End Sub

    'BOTON DETALLE PRODUCTOS NUEVOS
    Private Sub btnDetalleNuevos_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDetalleNuevos.Click
        If CInt(codigoCliente > 0) Then
            frmDetallePendienteNuevo.Text = "Productos Nuevo"
            frmDetallePendienteNuevo.bitNuevo = True
            frmDetallePendienteNuevo.cliente = CInt(codigoCliente)
            frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
            frmDetallePendienteNuevo.ShowDialog()
            frmDetallePendienteNuevo.Dispose()
        End If
    End Sub

    'BOTON DETALLE OFERTAS
    Private Sub btnDetalleOfertas_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDetalleOfertas.Click
        frmDetallePendienteNuevo.Text = "Ofertas"
        frmDetallePendienteNuevo.bitOferta = True
        frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
        frmDetallePendienteNuevo.ShowDialog()
        frmDetallePendienteNuevo.Dispose()
    End Sub



    Private Sub btnDetallePendientePedir_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        frmDetallePendienteNuevo.Text = "Pendientes por Pedir"
        frmDetallePendienteNuevo.bitPedir = True
        frmDetallePendienteNuevo.cliente = CInt(codigoCliente)
        frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
        frmDetallePendienteNuevo.ShowDialog()
        frmDetallePendienteNuevo.Dispose()
    End Sub

    Private Sub frmSalidas_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        If fnCuentaArticulos() And Not bitEditarSalida Then
            If RadMessageBox.Show("¿ Desea Salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
                e.Cancel = True
            End If
        ElseIf RadMessageBox.Show("¿ Desea salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
            e.Cancel = True

        End If
    End Sub

    Private Sub btnTelefono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTelefono.Click
        If CInt(codigoCliente) > 0 Then
            frmDetalleTelefono.Text = "Teléfonos"
            frmDetalleTelefono.StartPosition = FormStartPosition.CenterScreen
            frmDetalleTelefono.idCliente = CInt(codigoCliente)
            frmDetalleTelefono.ShowDialog()
            frmDetalleTelefono.Dispose()
        End If
    End Sub




    Private Sub txtCliente_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles txtCliente.KeyDown
        If e.KeyCode = Keys.Enter Then
            frmBuscarClientePequenio.contenido = txtCliente.Text.Trim
            frmBuscarClientePequenio.Text = "Clientes"
            frmBuscarClientePequenio.StartPosition = FormStartPosition.CenterScreen
            frmBuscarClientePequenio.ShowDialog()
            frmBuscarClientePequenio.Dispose()


            If mdlPublicVars.superSearchId = 0 Then
                idCliente = 0
            Else
                idCliente = mdlPublicVars.superSearchId
                codigoCliente = mdlPublicVars.superSearchId
                txtCliente.Text = mdlPublicVars.superSearchNombre
                txtNit.Text = mdlPublicVars.superSearchNit
                txtClave.Text = mdlPublicVars.superSearchClave


                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Try
                    Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                        conn.Open()
                        conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                        Dim cliente As tblCliente = (From c In conexion.tblClientes Where c.idCliente = idCliente Select c).FirstOrDefault

                        txtCreditoDisponible.Text = "0.00"
                        rbnCredito.Checked = cliente.tblClienteTipoPago.credito
                        rbnContado.Checked = Not cliente.tblClienteTipoPago.credito
                        conn.Close()

                    End Using
                Catch ex As Exception

                End Try

            End If

        End If


    End Sub


    'Private Sub pb_Salir_Click() Handles Me.panel4
    '    If fnCuentaArticulos() And Not bitEditarSalida Then
    '        If RadMessageBox.Show("¿ Desea Salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
    '            Exit Sub
    '        End If
    '    ElseIf RadMessageBox.Show("¿ Desea salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
    '        Me.Close()
    '    End If
    'End Sub

    'Cambio de tipo de venta
    Private Sub rbnContado_CheckedChanged(sender As Object, e As EventArgs) Handles rbnContado.CheckedChanged
        fnActualizar_Total()
    End Sub
End Class
