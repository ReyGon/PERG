Option Strict On

Imports System.Linq
Imports System.IO
Imports System.Data
Imports System.Data.SqlClient
Imports Telerik.WinControls
Imports System.Transactions
Imports System.Data.Objects.DataClasses
Imports System.Data.EntityClient

Public Class frmVentaPequenia

#Region "Variables Publicas"
    Public inventario As Integer = 0
    Public facturarVentaPequenia As New cls_FacturarVentaPequenia
#End Region

#Region "Variables Privadas"
    Private codigoCliente As Integer  'variable que nos va a capturar el idcliente cuandose va modificar una cotizacion
    Private codigoSalidaAFacturar As Integer ' para facturar las salida Venta pequenia
    Private permiso As New clsPermisoUsuario
    Private valida As New bl_Pedidos

    Private _bitEditarSalida As Boolean
    Private _bitEditarBodega As Boolean
    Private _bitFactura As Boolean
    Private _bitRealizarPago As Boolean  'si se guarda el despacho vamos a realizar el cobro
    Private _bitSugerirDespacho As Boolean
    Private _bitSugerirReserva As Boolean
    Private _codigo As Integer
    Private _codFact As Integer
    Private _ventaPequenia As Integer
    Private _venta As Integer
#End Region

#Region "Propiedades"
    Public Property venta As Integer
        Get
            venta = _venta
        End Get
        Set(ByVal value As Integer)
            _venta = value
        End Set
    End Property

    Public Property bitEditarSalida() As Boolean
        Get
            bitEditarSalida = _bitEditarSalida
        End Get
        Set(ByVal value As Boolean)
            _bitEditarSalida = value
        End Set
    End Property

    Public Property bitEditarBodega() As Boolean
        Get
            bitEditarBodega = _bitEditarBodega
        End Get
        Set(ByVal value As Boolean)
            _bitEditarBodega = value
        End Set
    End Property

    Public Property bitFactura() As Boolean
        Get
            bitFactura = _bitFactura
        End Get
        Set(ByVal value As Boolean)
            _bitFactura = value
        End Set
    End Property

    Public Property codFact() As Integer
        Get
            codFact = _codFact
        End Get
        Set(ByVal value As Integer)
            _codFact = value
        End Set
    End Property

    Public Property bitSugerirDespacho() As Boolean
        Get
            bitSugerirDespacho = _bitSugerirDespacho
        End Get
        Set(ByVal value As Boolean)
            _bitSugerirDespacho = value
        End Set
    End Property

    Public Property bitSugerirReserva() As Boolean
        Get
            bitSugerirReserva = _bitSugerirReserva
        End Get
        Set(ByVal value As Boolean)
            _bitSugerirReserva = value
        End Set
    End Property

    Public Property codigo() As Integer
        Get
            codigo = _codigo
        End Get
        Set(ByVal value As Integer)
            _codigo = value
        End Set
    End Property

    Public Property ventaPequenia() As Integer
        Get
            ventaPequenia = _ventaPequenia
        End Get
        Set(value As Integer)
            _ventaPequenia = value
        End Set
    End Property

    Public Property bitRealizarPago() As Boolean
        Get
            bitRealizarPago = _bitRealizarPago
        End Get
        Set(value As Boolean)
            _bitRealizarPago = value
        End Set
    End Property
#End Region

#Region "Eventos"
    'LOAD
    Private Sub frmVentaPequenia_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
        mdlPublicVars.fnFormatoGridMovimientos(grdProductos)
        mdlPublicVars.fnGrid_iconos(grdProductos)
        mdlPublicVars.comboActivarFiltroLista(cmbInventario)
        ' llenarCombos()
        inventario = mdlPublicVars.General_idTipoInventario
        fnNuevo()
        fnIndicadores()

        Me.grdProductos.BeginEditMode = Telerik.WinControls.RadGridViewBeginEditMode.BeginEditProgrammatically
        grdProductos.CloseEditorWhenValidationFails = True
        grdProductos.StandardTab = False
    End Sub

    'BUSCAR POR NIT
    Private Sub txtNit_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles txtNit.KeyDown
        If e.KeyCode = Keys.Enter Or e.KeyCode = Keys.Tab Then
            'hacer que codigo cliente sea cero
            codigoCliente = 0
            'Verifica si presiono la tecla ENTER
            If e.KeyCode = Keys.Enter Then
                Try
                    'conexion nueva.
                    Dim conexion As New dsi_pos_demoEntities
                    Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                        conn.Open()
                        conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                        '1ro. buscar el cliente.
                        Dim cliente As tblCliente = (From x In conexion.tblClientes.AsEnumerable Where x.nit1.Equals(Me.txtNit.Text.Trim) Select x).FirstOrDefault

                        '2do. si no existe crearlo.
                        If cliente Is Nothing Then
                            If RadMessageBox.Show("El Cliente no Existe. ¿Desea Crearlo?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                                frmClientePequenio.Text = "Clientes"
                                frmClientePequenio.txtNit.Text = txtNit.Text
                                frmClientePequenio.ShowDialog()
                                frmClientePequenio.Dispose()

                                If mdlPublicVars.superSearchId = 0 Then
                                    'si el retorno no es correcto salir de la funcion.
                                    Exit Sub
                                Else
                                    txtClave.Text = mdlPublicVars.superSearchClave
                                    txtCliente.Text = mdlPublicVars.superSearchNombre
                                    codigoCliente = mdlPublicVars.superSearchId
                                    txtCreditoDisponible.Text = "0.00"
                                End If
                            Else
                                Exit Sub
                            End If
                        Else
                            'codigo de cliente existe.
                            codigoCliente = cliente.idCliente
                        End If

                        If codigoCliente > 0 Then
                            Me.grdProductos.Columns("txmCodigo").ReadOnly = False
                        Else
                            Me.grdProductos.Columns("txmCodigo").ReadOnly = True
                        End If

                        If codigoCliente <> Nothing Then
                            'consulta el cliente
                            Dim cliente2 As tblCliente = (From x In conexion.tblClientes.AsEnumerable Where x.idCliente = codigoCliente Select x).FirstOrDefault

                            'informacion del cliente
                            txtClave.Text = cliente2.clave
                            txtNit.Text = cliente2.nit1
                            txtCliente.Text = cliente2.Nombre1

                            'informacion de credito.
                            txtCreditoDisponible.Text = "0.00"
                            rbnCredito.Checked = CBool(cliente2.tblClienteTipoPago.credito)
                            rbnContado.Checked = Not CBool(cliente2.tblClienteTipoPago.credito)
                        End If
                        conn.Close()
                    End Using
                Catch ex As Exception
                    txtClave.Text = ""
                    txtNit.Text = ""
                    txtCliente.Text = ""
                    rbnCredito.Checked = False
                    rbnContado.Checked = False
                End Try
            End If
        End If
    End Sub

    'EVENTOS PARA F2 EN ARTICULOS
    Private Sub grdProductos_KeyDown(sender As System.Object, e As System.Windows.Forms.KeyEventArgs) Handles grdProductos.KeyDown
        If Me.grdProductos.RowCount > 0 Then
            If bitEditarSalida = True And verRegistro = False Then
                mdlPublicVars.fnGrid_EliminarFila(sender, e, grdProductos, "iddetalle")
                If e.KeyCode = Keys.Delete And grdProductos.RowCount = 0 Then
                    grdProductos.Rows.AddNew()
                End If
                fnActualizar_Total()
            End If

            Dim c As Integer = Me.grdProductos.CurrentColumn.Index
            Dim f As Integer = 0

            Try
                f = Me.grdProductos.CurrentRow.Index
            Catch ex As Exception
                f = -1
            End Try

            If bitEditarBodega = False And verRegistro = False And f >= 0 Then
                If e.KeyCode = Keys.F2 Then
                    'frmBuscarArticulo.bandera = True 'Cambio de estado para saber que se esta llamando de este formulario
                    If Me.grdProductos.Columns(c).Name = "txbPrecio" Then

                        'Dim estado As Integer = CType(Me.grdProductos.Rows(f).Cells("clrEstado").Value, Integer)
                        ' If (estado = 1 Or estado = 2) Then
                        frmBuscarArticuloPrecios.Text = "Precios"
                        frmBuscarArticuloPrecios.codigo = CType(Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("ID").Value, Integer)
                        frmBuscarArticuloPrecios.codClie = codigoCliente
                        frmBuscarArticuloPrecios.bitVentas = True
                        frmBuscarArticuloPrecios.StartPosition = FormStartPosition.CenterScreen
                        frmBuscarArticuloPrecios.formVentaPequenia = Me
                        permiso.PermisoFrmEspeciales(frmBuscarArticuloPrecios, False)
                        'End If
                    ElseIf Me.grdProductos.Columns(c).Name = "txbObservacion" Then
                        'Obtenemos el valor de la observacion actual
                        Dim texto As String = CStr(Me.grdProductos.Rows(f).Cells(c).Value)
                        frmTexto.Text = "Ingresar Observación"
                        frmTexto.texto = If(texto Is Nothing, "", texto)
                        frmTexto.StartPosition = FormStartPosition.CenterScreen
                        frmTexto.ShowDialog()

                        If mdlPublicVars.superSearchId > 0 Then
                            If frmTexto.guarda = True Then
                                Me.grdProductos.Rows(f).Cells(c).Value = mdlPublicVars.superSearchNombre
                            End If
                        End If
                    Else
                        If (codigoCliente > 0) Then
                            If Me.grdProductos.CurrentRow.Index >= 0 Then
                                If Me.grdProductos.Rows(f).Cells(c).Value Is Nothing Then
                                    mdlPublicVars.superSearchNombre = ""
                                Else
                                    mdlPublicVars.superSearchNombre = LTrim(RTrim(CStr(Me.grdProductos.Rows(f).Cells(c).Value)))
                                End If

                                frmBuscarArticuloVentaPequenia.codClie = codigoCliente
                                frmBuscarArticuloVentaPequenia.codVendedor = CInt(cmbVendedor.SelectedValue)
                                frmBuscarArticuloVentaPequenia.StartPosition = FormStartPosition.CenterScreen
                                frmBuscarArticuloVentaPequenia.OpcionRetorno = "salidas"
                                frmBuscarArticuloVentaPequenia.Text = "Buscar Articulos"
                                frmBuscarArticuloVentaPequenia.bitCliente = True
                                frmBuscarArticuloVentaPequenia.bitProveedor = False
                                frmBuscarArticuloVentaPequenia.grdIngresados = grdProductos
                                frmBuscarArticuloVentaPequenia.ventaPequenia = 1
                                frmBuscarArticuloVentaPequenia.formVentaPequenia = Me
                                mdlPublicVars.SiempreEncima(Me.Handle.ToInt32)

                                permiso.PermisoDialogEspeciales(frmBuscarArticuloVentaPequenia)
                            End If
                        Else
                            alerta.contenido = "Seleccione Cliente"
                            alerta.fnErrorContenido()

                            'cmbCliente.Focus()
                            txtCliente.Focus()
                        End If
                    End If
                End If

            ElseIf bitEditarBodega And f >= 0 Then
                If Me.grdProductos.Columns(c).Name = "txbAjuste" Then
                    'fnMuestraCombo()
                    mdlPublicVars.superSearchId = 0
                    mdlPublicVars.superSearchNombre = ""
                    fnMuestraCombo()
                ElseIf e.KeyCode = Keys.F2 Then
                    If Me.grdProductos.Columns(c).Name = "txbObservacion" Then
                        'Obtenemos el valor de la observacion actual
                        Dim texto As String = CStr(Me.grdProductos.Rows(f).Cells(c).Value)

                        frmTexto.Text = "Ingresar Observacion"
                        frmTexto.texto = If(texto Is Nothing, "", texto)
                        frmTexto.StartPosition = FormStartPosition.CenterScreen
                        frmTexto.ShowDialog()

                        If mdlPublicVars.superSearchId > 0 Then
                            If frmTexto.guarda = True Then
                                Me.grdProductos.Rows(f).Cells(c).Value = mdlPublicVars.superSearchNombre
                            End If
                        End If
                    End If
                End If
            End If

            'Para poder editar
            Dim fila As Integer = mdlPublicVars.fnGrid_codigoFilaSeleccionada(grdProductos)
            If e.KeyValue >= 48 And e.KeyValue <= 105 Then
                If fila >= 0 Then
                    Me.grdProductos.Rows(fila).Cells(Me.grdProductos.CurrentColumn.Index).BeginEdit()
                End If
            End If
        End If
    End Sub

    'FIN DE EDICION DE ARTICULOS
    Private Sub grdProductos_CellEndEdit(sender As System.Object, e As Telerik.WinControls.UI.GridViewCellEventArgs) Handles grdProductos.CellEndEdit
        Dim fila As Integer = Me.grdProductos.CurrentRow.Index
        If e.Column.Name = "txmCodigo" Then
            Dim codigo As String = CStr(e.Value)

            If codigo IsNot Nothing Then
                If codigo.Length > 0 Then
                    fnBuscarArticulo(codigo, e.RowIndex)
                End If
            End If
        End If

        If e.Column.Name = "txmCantidad" Or e.Column.Name = "txmCosto" Or e.Column.Name = "txmCantidadAjuste" Then
            fnActualizar_Total()
        End If

        grdProductos.CloseEditor()
        grdProductos.CancelEdit()
        grdProductos.EditorManager.CloseEditor()
        grdProductos.EditorManager.CancelEdit()
    End Sub

    'FORMATO DE COLORES EN BASE AL TPO DE PRECIO
    Private Sub grdProductos_CellFormatting(sender As System.Object, e As Telerik.WinControls.UI.CellFormattingEventArgs) Handles grdProductos.CellFormatting
        mdlPublicVars.fnGrid_FormatoPrecios(sender, e, Me.grdProductos.Columns.Count - 1)
    End Sub

    'INVOCACION DEL EDITOR EN EL GRID
    Private Sub grdProductos_EditorRequired(sender As System.Object, e As Telerik.WinControls.UI.EditorRequiredEventArgs) Handles grdProductos.EditorRequired
        grdProductos.BeginUpdate()
        grdProductos.EndUpdate()
    End Sub

    'CAMBIA DE SELECCION DE PRODUCTO
    Private Sub grdProductos_SelectionChanged(sender As System.Object, e As System.EventArgs) Handles grdProductos.SelectionChanged
        fnArticulo_informacion()
    End Sub

    'DOBLE CLICK EN EL GRID DE PRODUCTOS
    Private Sub grdProductos_CellDoubleClick(sender As System.Object, e As Telerik.WinControls.UI.GridViewCellEventArgs) Handles grdProductos.CellDoubleClick
        fnMuestraCombo()
    End Sub

    'EL USUARIO ELIMINA UNA FILA
    Private Sub grdProductos_UserDeletedRow(sender As System.Object, e As Telerik.WinControls.UI.GridViewRowEventArgs) Handles grdProductos.UserDeletedRow
        If Me.grdProductos.Rows.Count = 0 Then
            Me.grdProductos.Rows.AddNew()
        End If
        fnActualizar_Total()
    End Sub

    'INFORMACION DEL CLIENTE
    Private Sub btnInfoCliente_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnInfoCliente.Click
        Try
            Dim codCliente As Integer = CInt(codigoCliente)
            If codCliente > 0 Then
                frmInformacionCliente.codcliente = codigoCliente
                frmInformacionCliente.ventaActual = CDbl(lblTotal.Text)
                frmInformacionCliente.Text = "Informacion de Cliente"
                frmInformacionCliente.StartPosition = FormStartPosition.CenterScreen
                permiso.PermisoDialogEspeciales(frmInformacionCliente)
                frmInformacionCliente.Dispose()
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub
#End Region

#Region "Funciones Basicas"
    'NUEVO PEDIDO
    Private Sub fnNuevo()
        llenarCombos()
        lblTotal.Text = "0.00"
        lblRecuento.Text = "0"

        If verRegistro = True Or bitEditarBodega = True Or bitEditarSalida = True Then
            pnx0Nuevo.Visible = False
            pnx1Cotizar.Visible = False
            Me.grdProductos.AllowDeleteRow = False
        End If

        'si esta en modo edicion, que no permita eliminar productos solo colocar en existencia 0
        If bitEditarBodega = True Then
            'EDITAR EN BODEGA.
            Me.grdProductos.AllowDeleteRow = False
            dtpFechaRegistro.Enabled = False
            cmbVendedor.Enabled = False

            'ocultar columnas
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False

            'ver columnas.
            Me.grdProductos.Columns("txbAjuste").IsVisible = True
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = True

            'cantidad no editable.
            Me.grdProductos.Columns("txmCantidad").ReadOnly = True
            Me.grdProductos.Columns("txmCodigo").ReadOnly = True

            'llenar datos de encabezado y detalle.
            If bitFactura = True Then
                fnLlenarFactura(codFact)
            Else
                fnLlenarDatos()
            End If

            If verRegistro = True Then
                Me.grdProductos.Columns("txbAjuste").IsVisible = False
                Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False
                Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False
            End If
        ElseIf bitEditarSalida = True Then
            'EDITAR SALIDA
            'no permite eliminar productos del grid.
            Me.grdProductos.AllowDeleteRow = False

            'deshabilita opciones de encabezado.
            dtpFechaRegistro.Enabled = False
            'cmbCliente.Enabled = False
            cmbInventario.Enabled = False
            cmbVendedor.Enabled = False
            'cmbDirEnvios.Enabled = False

            'oculta las columnas que sirven en ajuste de bodega.
            'Me.grdProductos.Columns("idajuste").IsVisible = False
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False
            Me.grdProductos.Columns("txbAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False

            If chkCotizado.Checked And Not chkDespachado.Checked Then
                'Columna Cantidad de ESCRITURA.
                Me.grdProductos.Columns("txmCantidad").ReadOnly = False
            Else
                'Columna cantidad solo de lectura
                Me.grdProductos.Columns("txmCantidad").ReadOnly = True
            End If

            'LLENAR ENCABEZADO Y DETALLE
            fnLlenarDatos()
            If verRegistro = False Then
                fnNuevaFila()
            End If

            If verRegistro = True Then
                Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False
            End If
        Else

            'NUEVO PEDIDO

            'asignacion de vendedor.
            cmbVendedor.SelectedValue = mdlPublicVars.idVendedor
            cmbVendedor.Enabled = False

            'estado del pedido.
            chkCotizado.Checked = False
            chkDespachado.Checked = False

            'si editar = false,  nuevo
            Me.grdProductos.AllowDeleteRow = True
            dtpFechaRegistro.Enabled = True

            txtNit.Text = ""
            txtCodigo.Text = ""
            txtCliente.Text = ""
            txtClave.Text = ""
            dtpFechaRegistro.Text = Format(Now, mdlPublicVars.formatoFecha).ToString
            lblDocumento.Text = fnCorrelativo().ToString
            Me.grdProductos.Rows.Clear()

            'Me.grdProductos.Columns("idajuste").IsVisible = False
            Me.grdProductos.Columns("idajustecategoria").IsVisible = False
            Me.grdProductos.Columns("txbAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidadAjuste").IsVisible = False
            Me.grdProductos.Columns("txmCantidad").ReadOnly = False
            Me.grdProductos.Columns("txmCantidadSurtir").IsVisible = False

            Me.fnNuevaFila()

            'ponemos false imprimir factuar
            mdlPublicVars.bitImprimirFacturaVentaPequenia = False
            bitRealizarPago = False
            mdlPublicVars.bitCrearFacturaVentaPequenia = False
            mdlPublicVars.listaDeFacturas.Clear()

        End If
        'fnVerificaCredito()
        dtpFechaRegistro.Select()
        dtpFechaRegistro.Focus()
    End Sub

    'LLENAR LOS COMBOS EN LA VENTANA PRINCIPAL
    Private Sub llenarCombos()
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
            'consultar vendedores.
            Dim lVendedores As IQueryable = (From x In conexion.tblVendedors Select Codigo = CType(0, Integer), Nombre = CType("<-- Ninguno -->", String)).Union( _
                            From s In conexion.tblVendedors _
                            Select Codigo = CType(s.idVendedor, Integer), Nombre = CType(s.nombre, String) Order By Nombre)

            'llenar el combo de vendedores.
            With Me.cmbVendedor
                .DataSource = Nothing
                .ValueMember = "Codigo"
                .DisplayMember = "Nombre"
                .DataSource = lVendedores
            End With
            cmbVendedor.Select(0, 0)
            'consultar clientes

            'Llenamos los inventario
            Dim lInventarios As IQueryable = (From x In conexion.tblTipoInventarios _
                                            Select Codigo = x.idTipoinventario, Nombre = x.nombre)

            With Me.cmbInventario
                .DataSource = Nothing
                .ValueMember = "Codigo"
                .DisplayMember = "Nombre"
                .DataSource = lInventarios
            End With

            conn.Close()
        End Using
    End Sub

    'INDICADORES PRINCIPALES
    Private Sub fnIndicadores()
        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
            Try
                'NUEVO
                Dim fechaActual As DateTime = CType(mdlPublicVars.fnFecha_horaServidor, DateTime)
                Dim diferenciaMes As DateTime = fechaActual.AddDays(-mdlPublicVars.Empresa_DiasUltimosProductos)

                'ulo.tblUnidadMedida.nombre, txmSurtir = 0)
                Dim tabla As List(Of sp_buscar_Articulo_Result) = conexion.sp_buscar_Articulo(mdlPublicVars.idEmpresa, diferenciaMes.ToShortDateString, mdlPublicVars.General_idTipoInventario, mdlPublicVars.General_idAlmacenPrincipal, "", "", 1, 8, True, False, "", venta).ToList

                lblConteoNuevo.Text = tabla.Count.ToString
                If tabla.Count > 0 Then
                    lblFondoNuevo.BackColor = Color.Green
                Else
                    lblFondoNuevo.BackColor = Color.White
                End If

                'OFERTAS
                diferenciaMes = fechaActual.AddDays(-mdlPublicVars.General_NumeroDiasBitacoraProductos)
                Dim ofertas As Integer = (From x In conexion.tblBitacoraPreciosArticuloes Where x.fechaRegistro > diferenciaMes _
                                        And x.tblArticulo_Precio.tipoPrecio = mdlPublicVars.BuscarArticulo_CodigoOferta And x.tblArticulo_Precio.habilitado = True Select x).Count

                lblConteoOfertas.Text = ofertas.ToString
                If tabla.Count > 0 Then
                    lblFondoOferta.BackColor = Color.Green
                Else
                    lblFondoOferta.BackColor = Color.White
                End If
            Catch ex As Exception
                MessageBox.Show("Error en Indicadores : " + ex.ToString)
            End Try
            conn.Close()
        End Using
    End Sub

    'OBTENER EL CORRELATIVO
    Private Function fnCorrelativo() As Integer
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos.AsEnumerable
                                                 Where x.idTipoMovimiento = mdlPublicVars.Salida_TipoMovimientoVenta And x.idEmpresa = mdlPublicVars.idEmpresa
                                                 Select x).FirstOrDefault
                If correlativo IsNot Nothing Then
                    Return correlativo.correlativo + 1
                Else
                    'Creamos el nuevo correlativo
                    Dim correlativoNuevo As New tblCorrelativo
                    correlativoNuevo.correlativo = 1
                    correlativoNuevo.serie = ""
                    correlativoNuevo.inicio = 1
                    correlativoNuevo.fin = 1000
                    correlativoNuevo.porcentajeAviso = 20
                    correlativoNuevo.idEmpresa = mdlPublicVars.idEmpresa
                    correlativoNuevo.idTipoMovimiento = CShort(mdlPublicVars.Salida_TipoMovimientoVenta)
                    ctx.AddTotblCorrelativos(correlativoNuevo)
                    ctx.SaveChanges()
                    Return 1
                End If
            Catch ex As Exception
                Return 0
            End Try
            conn.Close()
        End Using
    End Function

    'AGREGAR NUEVA FILA AL GRID DE PRODUCTOS
    Public Sub fnNuevaFila()
        fnEliminaVacias()
        Me.grdProductos.Rows.AddNew()
    End Sub

    'ELIMINA FILAS VACIAS
    Private Sub fnEliminaVacias()
        Try
            'Recorremos el grid

            Dim nombre As String = ""
            For i As Integer = 0 To Me.grdProductos.Rows.Count - 1
                'Obtenemo el valor del nombre
                nombre = CStr(Me.grdProductos.Rows(i).Cells("txbProducto").Value)

                If IsNothing(nombre) Then
                    Me.grdProductos.Rows.RemoveAt(i)
                End If
            Next
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'LLENAR LOS DATOS DE UN PEDIDO
    Private Sub fnLlenarDatos()
        Try
            grdProductos.Rows.Clear()
            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities

            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                Dim salida As tblSalida = (From x In conexion.tblSalidas.AsEnumerable Where x.idSalida = codigo Select x).First()
                inventario = CInt(salida.idTipoInventario)
                codigoCliente = CInt(salida.idCliente)
                txtCodigo.Text = salida.idSalida.ToString

                'llenamos datos del cliente
                Dim cliente As tblCliente = (From x In conexion.tblClientes.AsEnumerable Where x.idCliente = codigoCliente Select x).FirstOrDefault
                txtClave.Text = cliente.clave
                'se agrego para mostrar datos de mostrador
                txtCliente.Text = salida.cliente
                txtNit.Text = salida.nit
                cmbVendedor.SelectedValue = salida.idVendedor
                cmbVendedor.Select(0, 0)
                lblDocumento.Text = salida.documento
                dtpFechaRegistro.Text = Format(salida.fechaRegistro, mdlPublicVars.formatoFecha)
                rbnContado.Checked = CBool(salida.contado)
                rbnCredito.Checked = CBool(salida.credito)
                ' estado
                chkCotizado.Checked = CBool(salida.cotizado)                
                chkDespachado.Checked = CBool(salida.despachar)

                'Obtenemos la lista de detalles
                Dim listaDetalles As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.idSalida = codigo Select x).ToList
                Dim detalle As tblSalidaDetalle

                For Each detalle In listaDetalles
                    If detalle.anulado = False And detalle.kitSalidaDetalle Is Nothing Then
                        Dim fila As Object()
                        fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, detalle.precio, _
                             detalle.cantidad * detalle.precio, salida.contado, detalle.comentario, "0", "", "0", "0", "0", "0", detalle.tipoInventario, detalle.tipoPrecio}
                        grdProductos.Rows.Add(fila)
                    End If
                Next

                fnActualizar_Total()
                conn.Close()
            End Using

        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'AGREGAR ARTICULO
    Public Sub fnAgregar_Articulos(ByVal surtir As Boolean)
        'agregar productos a grid.
        Dim filas() As Object

        'id, codigo,nombre,precio,cantidad
        filas = {"0", mdlPublicVars.superSearchId.ToString, mdlPublicVars.superSearchCodigo, mdlPublicVars.superSearchNombre, mdlPublicVars.superSearchCantidad.ToString,
                 Format(mdlPublicVars.superSearchPrecio, mdlPublicVars.formatoMoneda), "0", False, "", 0, "", 0, 0, 0,
                 mdlPublicVars.superSearchSurtir.ToString, mdlPublicVars.superSearchInventario.ToString, mdlPublicVars.superSearchTipoPrecio.ToString, mdlPublicVars.superSearchEstado.ToString}
        grdProductos.Rows.Add(filas)
        If surtir = True Then
            Me.grdProductos.Rows(Me.grdProductos.RowCount - 1).IsVisible = False
        End If
        grdProductos.Columns(3).IsCurrent = True
        grdProductos.Rows(grdProductos.Rows.Count - 1).IsCurrent = True
        fnActualizar_Total()
    End Sub

    'LLENAR FACTURA
    Private Sub fnLlenarFactura(ByVal codigo As Integer)
        Try
            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities

            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                'Obtenemos los datos de la factura
                Dim factura As tblFactura = (From x In conexion.tblFacturas Where x.IdFactura = codigo Select x).FirstOrDefault
                dtpFechaRegistro.Value = CDate(factura.Fecha)
                rbnContado.Checked = CBool(factura.contado)
                rbnCredito.Checked = CBool(factura.contado)

                'Obtenemos los pedidos de la factura
                Dim lPedidos As List(Of tblSalida) = (From x In conexion.tblSalidas Where x.IdFactura = codigo _
                                                  And x.anulado = False Select x).ToList

                Dim pedido As tblSalida
                Dim dirEnvios As String = ""
                Dim vendedores As String = ""
                Dim documentos As String = ""
                For Each pedido In lPedidos
                    codigoCliente = CInt(pedido.idCliente)
                    vendedores += pedido.tblVendedor.nombre & ", "
                    dirEnvios += pedido.direccionEnvio & ","
                    documentos += pedido.documento & ", "
                    txtCliente.Text = pedido.cliente
                    txtNit.Text = pedido.nit

                    'AGREGAMOS LOS PRODUCTOS AL GRID
                    'Obtenemos el detalle de ese pedido
                    Dim lDetalles As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.idSalida = pedido.idSalida _
                                                              Select x).ToList
                    Dim detalle As tblSalidaDetalle
                    For Each detalle In lDetalles
                        'Obtenemos si se hicieron ajustes
                        Dim ajuste As tblAjuste = (From x In conexion.tblAjustes Where x.idsalidadetalle = detalle.idSalidaDetalle _
                                               Select x).FirstOrDefault

                        'Creamos la fila para agregar al grid
                        Dim fila As Object()
                        If ajuste IsNot Nothing Then
                            fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, _
                            detalle.precio, "0", detalle.tblSalida.contado, ajuste.idAjusteCategoria, ajuste.tblAjusteCategoria.nombre, ajuste.cantidad, "0", "0", "0", _
                            detalle.tipoInventario, detalle.tipoPrecio}
                        Else

                            fila = {detalle.idSalidaDetalle, detalle.idArticulo, detalle.tblArticulo.codigo1, detalle.tblArticulo.nombre1, detalle.cantidad, _
                            detalle.precio, "0", detalle.tblSalida.contado, "0", "", "", "0", "0", "0", detalle.tipoInventario, detalle.tipoPrecio}
                        End If

                        'Agregamos la fila
                        Me.grdProductos.Rows.Add(fila)
                    Next
                Next

                'cmbDirEnvios.Text = dirEnvios
                cmbVendedor.Text = vendedores
                cmbVendedor.Select(0, 0)
                lblDocumento.Text = documentos

                conn.Close()
            End Using

            fnActualizar_Total()
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'COMBO PARA TIPO DE AJUSTE
    Private Sub fnMuestraCombo()
        Try
            Dim col As Integer = Me.grdProductos.CurrentColumn.Index
            Dim fil As Integer = Me.grdProductos.CurrentRow.Index

            'Sacado
            If Me.grdProductos.Columns(col).Name.ToString.ToLower = "txbajuste" Then

                Dim lAjustes As IQueryable = Nothing
                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                    conn.Open()
                    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)


                    lAjustes = (From x In conexion.tblTipoMovimientoes.AsQueryable Select Codigo = CType(0, Integer), Nombre = CType("<-- Ninguno -->", String)).Union( _
                                From x In conexion.tblTipoMovimientoes.AsQueryable
                                Where x.ajusteVenta
                                Select Codigo = CType(x.idTipoMovimiento, Integer), Nombre = CType(x.nombre + " : " + If(x.idTipoInventario Is Nothing, "", x.tblTipoInventario.nombre), String))

                    conn.Close()
                End Using

                With frmCombo.combo
                    .DataSource = Nothing
                    .ValueMember = "Codigo"
                    .DisplayMember = "Nombre"
                    .DataSource = lAjustes
                End With

                frmCombo.Text = "Tipo de Ajuste"
                frmCombo.ShowDialog()

                If mdlPublicVars.superSearchId = 0 Then
                    Me.grdProductos.Rows(fil).Cells("idajustecategoria").Value = 0
                    Me.grdProductos.Rows(fil).Cells("txbAjuste").Value = ""
                    Me.grdProductos.Rows(fil).Cells("txmCantidadAjuste").Value = ""
                Else
                    'actualizar
                    Me.grdProductos.Rows(fil).Cells("idajustecategoria").Value = mdlPublicVars.superSearchId
                    Me.grdProductos.Rows(fil).Cells("txbAjuste").Value = mdlPublicVars.superSearchNombre
                End If
            End If ' fin de sacado.

        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

        fnActualizar_Total()
    End Sub

    'REMOVER LA FILA ACTUAL DEL GRID DE PRODUCTOS
    Public Sub fnRemoverFila()
        Dim filaActual As Integer = CType(Me.grdProductos.CurrentRow.Index, Integer)

        If filaActual >= 0 Then
            Dim index As Integer = 0
            Dim yaBorro As Boolean = False

            For index = filaActual To Me.grdProductos.Rows.Count - 1
                Dim codigoArt As Integer = CType(Me.grdProductos.Rows(filaActual).Cells("Id").Value, Integer)
                If yaBorro = False Then
                    'Si borrar es igual a false, elimina la fila
                    Me.grdProductos.Rows.RemoveAt(filaActual)
                    yaBorro = True
                Else
                    'Si estamos es una fila que no tiene datos la eliminamos
                    If codigoArt = 0 Then
                        Me.grdProductos.Rows.RemoveAt(filaActual)
                    End If
                End If
            Next
        End If
    End Sub

    'AGREGAR PENDIENTES POR SURTIR
    Public Sub fnAgregar_Pendientes()
        'agregar productos a grid.
        Dim filas() As Object

        'id, codigo,nombre,precio,cantidad
        filas = {"0", mdlPublicVars.superSearchId.ToString, mdlPublicVars.superSearchCodigo, mdlPublicVars.superSearchNombre, mdlPublicVars.superSearchCantidad.ToString,
                 Format(mdlPublicVars.superSearchPrecio, mdlPublicVars.formatoMoneda), "0", False, "", 0, "", 0, 0,
                 mdlPublicVars.superSearchCodSurtir, mdlPublicVars.superSearchSurtir, mdlPublicVars.General_idTipoInventario.ToString,
                 mdlPublicVars.superSearchTipoPrecio, mdlPublicVars.superSearchEstado}
        grdProductos.Rows.Add(filas)
        grdProductos.Columns("txmCantidad").IsCurrent = True
        grdProductos.Rows(grdProductos.Rows.Count - 1).IsCurrent = True
        fnActualizar_Total()
    End Sub

    'AGREGAR PRECIO
    Public Sub fnAgregarPrecio(ByVal especial As Boolean)
        Try
            Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txbPrecio").Value = CType(mdlPublicVars.superSearchPrecio, Decimal)
            Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("TipoPrecio").Value = CType(mdlPublicVars.superSearchTipoPrecio, Integer)

            'validar que la salida no este en estado de despacho.
            If bitEditarBodega = True And codigo > 0 Then
                Dim s As tblSalida
                Dim conexion As New dsi_pos_demoEntities
                Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                    conn.Open()
                    conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                    s = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault
                    conn.Close()
                End Using

                'si despachado es falso actualizar la cantidad, de lo contrario no actualizar, solo precio.
                If Not s.despachar Then
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCantidad").Value = CType(mdlPublicVars.superSearchCantidad, Integer)
                End If
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'FUNCION UTILIZADA PARA VERIFICAR SI TIENE ARTICULOS EL GRID
    Private Function fnCuentaArticulos() As Boolean
        Dim nombre As String = ""
        For i As Integer = 0 To Me.grdProductos.RowCount - 1
            nombre = CStr(Me.grdProductos.Rows(i).Cells("txbProducto").Value)

            If nombre IsNot Nothing Then
                Return True
            End If
        Next
        Return False
    End Function

    'BUSCAR ARTICULO EN BASE A CODIGO
    Public Sub fnBuscarArticulo(ByVal codigo As String, ByVal posicion As Integer)
        Dim bitNuevaFila As Boolean = False
        Try

            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities
            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

                'Verificamos si existe en codigos de barra
                Dim codigoBarra As tblArticulo_CodigoBarra = (From x In conexion.tblArticulo_CodigoBarra.AsEnumerable Where x.codigoBarra = codigo _
                                                              Select x).FirstOrDefault

                Dim cantidad As Integer = 0
                Dim articulo As tblArticulo = Nothing
                If codigoBarra Is Nothing Then
                    'Buscamos el articulo en base al codigo
                    articulo = (From x In conexion.tblArticuloes Where x.codigo1.ToLower.Equals(codigo.ToLower) _
                               Select x).FirstOrDefault
                Else
                    articulo = (From x In conexion.tblArticuloes Where x.idArticulo = codigoBarra.articulo _
                               Select x).FirstOrDefault
                    cantidad = CInt(codigoBarra.unidadEmpaque)
                End If

                If articulo Is Nothing And codigoBarra Is Nothing Then
                    alerta.contenido = "Este producto no existe"
                    alerta.fnErrorContenido()
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").Value = ""
                    Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").BeginEdit()
                Else
                    Dim codCliente As Integer = codigoCliente
                    'Obtenemos el tipo de negocio del cliente
                    Dim cliente As tblCliente = (From x In conexion.tblClientes.AsEnumerable Where x.idCliente = codCliente Select x).FirstOrDefault
                    Dim tNegocio As Integer = CInt(cliente.idTipoNegocio)

                    'Seleccionamos el precio del articulo
                    Dim precioArt As tblArticulo_TipoNegocio = (From x In conexion.tblArticulo_TipoNegocio.AsEnumerable Where x.articulo = articulo.idArticulo And _
                                                               x.tipoNegocio = tNegocio Select x).FirstOrDefault
                    Dim precio As Decimal = 0
                    'Asignamos el precio
                    If precioArt IsNot Nothing Then
                        precio = CDec((From x In conexion.sp_redondearPrecio(precioArt.tblArticulo.precioPublico * (100 - precioArt.descuento) / 100) Select PrecioRetornado = x.Precio).FirstOrDefault)
                    Else
                        alerta.contenido = "Producto: " & articulo.nombre1 & " no tiene precio!"
                        alerta.fnErrorContenido()

                        Me.grdProductos.Rows(Me.grdProductos.CurrentRow.Index).Cells("txmCodigo").BeginEdit()
                        Exit Sub
                    End If

                    Dim artEstado As tblArticulo = (From x In conexion.tblArticuloes Where x.codigo1 = codigo Select x).FirstOrDefault
                    Dim estadoPedido As Integer = CInt((From x In conexion.spArticulo_EstadoDePrecio(artEstado.idArticulo, codCliente) Select x.Estado).FirstOrDefault)

                    'Agregamos el producto
                    Me.grdProductos.Rows(posicion).Cells("iddetalle").Value = "0"
                    Me.grdProductos.Rows(posicion).Cells("id").Value = articulo.idArticulo
                    Me.grdProductos.Rows(posicion).Cells("txmCodigo").Value = codigo
                    Me.grdProductos.Rows(posicion).Cells("txbProducto").Value = articulo.nombre1
                    Me.grdProductos.Rows(posicion).Cells("txbObservacion").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("txmCantidad").Value = If(codigoBarra Is Nothing, 0, cantidad)
                    Me.grdProductos.Rows(posicion).Cells("txbPrecio").Value = Format(precio, mdlPublicVars.formatoMoneda)
                    Me.grdProductos.Rows(posicion).Cells("Total").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("idajustecategoria").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("txbAjuste").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("txmCantidadAjuste").Value = ""
                    Me.grdProductos.Rows(posicion).Cells("elimina").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("idSurtir").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("txmCantidadSurtir").Value = 0
                    Me.grdProductos.Rows(posicion).Cells("idInventario").Value = mdlPublicVars.General_idTipoInventario
                    Me.grdProductos.Rows(posicion).Cells("tipoPrecio").Value = mdlPublicVars.Empresa_PrecioNormal
                    Me.grdProductos.Rows(posicion).Cells("clrEstado").Value = estadoPedido
                    Me.fnNuevaFila()
                End If

                conn.Close()
            End Using
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

    End Sub

    'INFORMACION DE ARTICULO
    Private Sub fnArticulo_informacion()
        Dim idcliente As Integer = codigoCliente
        Dim index As Integer = mdlPublicVars.fnGrid_codigoFilaSeleccionada(grdProductos)

        Dim conexion As New dsi_pos_demoEntities
        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                If IsNothing(Me.grdProductos.Rows(index).Cells("id").Value) = True Then
                    lblObservacion.Text = ""
                    lblCompatibilidad.Text = ""
                    lblSaldo.Text = Format("0", mdlPublicVars.formatoMoneda)
                    lblUltPrecio.Text = Format("0", mdlPublicVars.formatoMoneda)
                    lblUltTipoPrecio.Text = ""
                    Exit Sub
                End If

                Dim codigo As Integer = CInt(Me.grdProductos.Rows(index).Cells("id").Value)
                lblObservacion.Text = ""
                lblSaldo.Text = Format(0, mdlPublicVars.formatoMoneda)
                lblUltPrecio.Text = Format(0, mdlPublicVars.formatoMoneda)
                If CInt(codigo) > 0 Then
                    codigo = CInt(codigo)
                    Dim datos As sp_CadenaCompatibilidad_Result = (From x In conexion.sp_CadenaCompatibilidad(codigo, mdlPublicVars.General_idTipoInventario) Select x).First
                    lblObservacion.Text = datos.Obs
                    lblSaldo.Text = Format(datos.Saldo, mdlPublicVars.formatoMoneda)
                    lblCompatibilidad.Text = datos.Compatibilidad

                    Dim ultPrecio As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles
                                                         Where x.tblSalida.facturado = True And x.tblSalida.anulado = False And x.tblSalida.despachar = True _
                                    And x.idArticulo = codigo And x.tblSalida.idCliente = idcliente
                                    Order By x.tblSalida.fechaFacturado Descending Select x).FirstOrDefault

                    If ultPrecio IsNot Nothing Then
                        lblUltPrecio.Text = Format(ultPrecio.precio, mdlPublicVars.formatoMoneda)
                        lblUltTipoPrecio.Text = ultPrecio.tblArticuloTipoPrecio.nombre
                    End If
                End If

            Catch ex As NullReferenceException
            Catch ex As Exception
                RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                lblObservacion.Text = ""
                lblCompatibilidad.Text = ""
                lblSaldo.Text = Format(0, mdlPublicVars.formatoMoneda)
            End Try

            'cerrar conexion
            conn.Close()
        End Using
    End Sub

    'REPORTE COTIZACION
    Private Sub fnReporte_Cotizacion(ByVal codigo As Integer)
        Dim r As New clsReporte
        Dim permiso As New clsPermisoUsuario
        Dim success As Boolean = False
        Dim salida As tblSalida = Nothing
        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                salida = (From x In conexion.tblSalidas Where x.idSalida = codigo).FirstOrDefault
                r.reporte = "ventas_Cotizacion1.rpt"
                r.tabla = EntitiToDataTable(From x In conexion.sp_ReporteVenta("", False, codigo))
                r.nombreParametro = "filtro"
                r.parametro = "Filtro del reporte:  "
                success = True
            Catch ex As Exception
                success = False
            End Try

            conn.Close()
        End Using

        If success = True Then
            frmDocumentosSalida.reporteBase = r.DocumentoReporte()
            frmDocumentosSalida.txtTitulo.Text = "Venta : " & salida.documento
            frmDocumentosSalida.Text = "Fact. de Salida"
            frmDocumentosSalida.bitCliente = True
            frmDocumentosSalida.codigo = CInt(salida.idCliente)
            permiso.PermisoFrmEspeciales(frmDocumentosSalida, False)
        End If

    End Sub

    'ACTUALIZAR TOTAL
    Public Sub fnActualizar_Total()
        Try
            If Me.grdProductos.Rows.Count > 0 Then
                Dim cantidad As Double = 0
                Dim cantidadAjuste As Double = 0
                Dim idajuste As Integer = 0
                Dim precio As Decimal = 0
                Dim total As Decimal = 0
                Dim credito As Boolean = False
                Dim index As Integer = 0

                Dim ajustePositivo As Decimal = 0
                Dim ajusteNegativo As Decimal = 0
                Dim nombre As String = ""
                Dim numeroProductos As Integer = 0
                For index = 0 To Me.grdProductos.Rows.Count - 1
                    cantidad = CType(Me.grdProductos.Rows(index).Cells("txmCantidad").Value, Double)

                    nombre = CType(Me.grdProductos.Rows(index).Cells("txbProducto").Value, String)

                    If nombre IsNot Nothing Then
                        precio = CType(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value.ToString, "Q", ""), Decimal)
                        If bitEditarBodega = True And verRegistro = False Then
                            If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) Then

                                cantidadAjuste = CType(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value, Double)
                                Try
                                    idajuste = CType(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value, Integer)
                                Catch ex As Exception
                                    idajuste = 0
                                End Try

                                Dim ac As tblTipoMovimiento = (From x In ctx.tblTipoMovimientoes.AsEnumerable Where x.idTipoMovimiento = idajuste Select x).FirstOrDefault

                                If ac IsNot Nothing Then
                                    If ac.nombre.Contains("-") = True Then
                                        'cantidad = cantidad - cantidadAjuste
                                        ajusteNegativo += CDec(cantidadAjuste * precio)
                                    Else
                                        'cantidad = cantidad + cantidadAjuste
                                        ajustePositivo += CDec(cantidadAjuste * precio)
                                    End If
                                End If
                            End If
                        End If

                        If (cantidad * precio) = 0 Then
                            Me.grdProductos.Rows(index).Cells("Total").Value = "0"
                            total = 0
                        Else
                            If Me.grdProductos.Rows(index).IsVisible Then
                                Me.grdProductos.Rows(index).Cells("Total").Value = Format(cantidad * precio, mdlPublicVars.formatoMoneda).ToString
                                total = total + CType(Replace(Me.grdProductos.Rows(index).Cells("Total").Value.ToString, "Q", "").Trim, Decimal)
                            End If
                        End If

                        If Me.grdProductos.Rows(index).IsVisible Then
                            numeroProductos += 1
                        End If
                    End If
                Next

                'mostrar total menos descuentos.
                lblTotal.Text = Format(total, mdlPublicVars.formatoMoneda)
                lblRecuento.Text = numeroProductos.ToString
            Else
                lblTotal.Text = Format(0, mdlPublicVars.formatoMoneda)
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try

        'verificar el credito del cliente
        'fnVerificaCredito()
    End Sub

    'IMPRIMIR DESPACHO
    Private Sub fnImprimir(ByVal codSalida As Integer)
        Try
            Dim c As New clsReporte
            c.tabla = EntitiToDataTable(ctx.sp_reportePickingPedido("", codSalida))
            c.nombreParametro = "@filtro"
            c.reporte = "ventas_Picking.rpt"
            c.parametro = ""
            c.verReporte()
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'BLOQUEAR COMBO
    Public Sub fnBloquearCombo()
        Try
            'Obtenemos  el numero de filas
            Dim filas As Integer = CInt(Me.grdProductos.Rows.Count)
            If filas > 1 Then
                'cmbCliente.Enabled = False
                cmbInventario.Enabled = False
            ElseIf filas = 1 Then
                'Verificamos si tiene informacion la fila
                Dim nombre As String = ""
                Try
                    nombre = Me.grdProductos.Rows(0).Cells("txbProducto").Value.ToString
                Catch ex As Exception
                    nombre = ""
                End Try

                If nombre IsNot Nothing Then
                    'cmbCliente.Enabled = False
                    cmbInventario.Enabled = False
                Else
                    'cmbCliente.Enabled = True
                    cmbInventario.Enabled = True
                End If
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'BUSCAR CLIENTE POR CLAVE
    Private Sub txtClave_KeyPress(ByVal sender As System.Object, ByVal e As System.Windows.Forms.KeyPressEventArgs)
        Try

            If e.KeyChar = ChrW(Keys.Enter) Or e.KeyChar = ChrW(Keys.Tab) Then
                Dim clave As String = txtClave.Text.Trim

                'Obtenemos el cliente
                Dim cliente As tblCliente = (From x In ctx.tblClientes _
                                             Where x.clave = clave _
                                             Select x).FirstOrDefault

                If cliente IsNot Nothing Then
                    codigoCliente = cliente.idCliente
                    txtNit.Text = cliente.nit1
                    txtCliente.Text = cliente.Nombre1

                    'asignar vendedor Default
                    cmbVendedor.SelectedValue = cliente.idVendedor

                    'activa si tien credito el cliente
                    txtCreditoDisponible.Text = "0.00"
                    rbnCredito.Checked = CBool(cliente.tblClienteTipoPago.credito)
                    rbnContado.Checked = Not CBool(cliente.tblClienteTipoPago.credito)

                    rbnCredito.Enabled = CBool(cliente.tblClienteTipoPago.credito)
                    rbnContado.Enabled = CBool(cliente.tblClienteTipoPago.credito)
                Else
                    RadMessageBox.Show("Cliente no encontrado", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                End If
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'BOTON DETALLE PRODUCTOS NUEVOS
    Private Sub btnDetalleNuevos_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDetalleNuevos.Click
        If CInt(codigoCliente) > 0 Then
            frmDetallePendienteNuevo.Text = "Productos Nuevo"
            frmDetallePendienteNuevo.bitNuevo = True
            frmDetallePendienteNuevo.cliente = CInt(codigoCliente)
            frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
            frmDetallePendienteNuevo.ShowDialog()
            frmDetallePendienteNuevo.Dispose()
        End If
    End Sub

    'BOTON DETALLE OFERTAS
    Private Sub btnDetalleOfertas_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnDetalleOfertas.Click
        frmDetallePendienteNuevo.Text = "Ofertas"
        frmDetallePendienteNuevo.bitOferta = True
        frmDetallePendienteNuevo.StartPosition = FormStartPosition.CenterScreen
        frmDetallePendienteNuevo.ShowDialog()
        frmDetallePendienteNuevo.Dispose()
    End Sub

    'CERRANDO EL FORMULARIO
    Private Sub frmSalidas_FormClosing(ByVal sender As System.Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles MyBase.FormClosing
        If fnCuentaArticulos() And Not bitEditarSalida Then
            If RadMessageBox.Show("¿ Desea Salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
                e.Cancel = True
            End If
        ElseIf RadMessageBox.Show("¿ Desea salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.No Then
            e.Cancel = True

        End If
    End Sub

    'VER TELEFONOS
    Private Sub btnTelefono_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnTelefono.Click
        If CInt(codigoCliente) > 0 Then
            frmDetalleTelefono.Text = "Teléfonos"
            frmDetalleTelefono.StartPosition = FormStartPosition.CenterScreen
            frmDetalleTelefono.idCliente = CInt(codigoCliente)
            frmDetalleTelefono.ShowDialog()
            frmDetalleTelefono.Dispose()
        End If
    End Sub

    'CAMBIO TIPO DE VENTA
    Private Sub rbnContado_CheckedChanged(sender As Object, e As EventArgs) Handles rbnContado.CheckedChanged
        fnActualizar_Total()
    End Sub
#End Region

#Region "Botones de Barra"
    'NUEVO PEDIDO
    Private Sub fnNuevo_Click() Handles Me.panel0
        Dim formPedido As New frmVentaPequenia
        formPedido.Text = "Ventas"
        formPedido.bitEditarBodega = False
        formPedido.bitEditarSalida = False
        formPedido.MdiParent = frmMenuPrincipal
        permiso.PermisoFrmEspeciales(formPedido, False)
        Me.LayoutMdi(MdiLayout.Cascade)
    End Sub

    'COTIZAR
    Private Sub fnCotizar_Click() Handles Me.panel1
        If bitEditarBodega = True Or bitEditarSalida = True Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If
        If fnErrores() = False Then
            fnGuardarCotizacion()
        End If
    End Sub

    'DESPACHAR
    Private Sub fnDespachar_Click() Handles Me.panel2
        If bitEditarBodega Or bitEditarSalida And Not bitSugerirDespacho And Not bitEditarSalida Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If


        If bitSugerirDespacho = True Then
            fnModificarCotizacion()
            'Obtenemos la salida
            Dim salida As tblSalida

            'conexion nueva.
            Dim conexion As New dsi_pos_demoEntities
            Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                conn.Open()
                conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                salida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault
                conn.Close()
            End Using

            If CambiacotizarAdespacho(salida.idSalida, CBool(salida.credito), CInt(salida.idCliente)) Then
                'Mandar a imprimir el despacho
                fnImprimir(salida.idSalida)
                fnNuevo()
                Me.Close()
                bitEditarSalida = False
                bitSugerirDespacho = False
                bitSugerirReserva = False
            End If


        ElseIf fnErrores() = False Then
            If RadMessageBox.Show("¿Desea realizar despacho?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = vbYes Then
                fnGuardarDespacho()
            End If
            'llamamos al formulario de pago
            If bitRealizarPago = True Then
                frmPagoVentaPequenia.Text = "Pagos"
                frmPagoVentaPequenia.codigosalidaAFacturar = codigoSalidaAFacturar 'enviamos el idsalida a cobrar
                frmPagoVentaPequenia.StartPosition = FormStartPosition.CenterScreen
                frmPagoVentaPequenia.ShowDialog()
                frmPagoVentaPequenia.Dispose()

            End If

            If mdlPublicVars.bitCrearFacturaVentaPequenia = True Then
                mdlPublicVars.GuardarFacturacion(codigoSalidaAFacturar)
            End If

            If mdlPublicVars.bitImprimirFacturaVentaPequenia = True Then

                Dim fechaServer As DateTime = CType(mdlPublicVars.fnFecha_horaServidor, DateTime)
                'conexion nueva.
                Dim conexion As New dsi_pos_demoEntities

                Try
                    Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
                        conn.Open()
                        conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
                        'recorremos las facturas creadas
                        For Each idFac As Integer In mdlPublicVars.listaDeFacturas
                            Dim factura As tblFactura = (From f In conexion.tblFacturas Where f.IdFactura = idFac Select f).FirstOrDefault
                            Dim impresion As tblImpresion = (From x In conexion.tblImpresions Where CType(x.descripcion, String) = CType(idFac, String) And x.tblTipoImpresion.bitFactura = True Select x).FirstOrDefault

                            If impresion IsNot Nothing Then
                                If impresion.bitImpreso = False Then
                                    Dim r As New clsReporte
                                    r.tabla = mdlPublicVars.EntitiToDataTable(conexion.sp_ReporteFactura1("", CInt(impresion.descripcion), mdlPublicVars.idEmpresa))
                                    r.nombreParametro = "@filtro"
                                    r.reporte = impresion.tblTipoImpresion.reporte
                                    r.parametro = ""
                                    r.imprimirReporte()

                                    impresion.bitImpreso = True
                                    impresion.usuarioImprime = mdlPublicVars.idUsuario
                                    impresion.fechaImpresion = fechaServer
                                    factura.bitImpreso = True

                                    'Seleccionamos el tipo de pagos para saber si pago la factura o es pago transito
                                    Dim pago As tblCaja = (From c In conexion.tblCajas Where c.codigo = superSearchCodigoPagoVentaPequenia Select c).FirstOrDefault

                                    If pago.tblTipoPago.calendarizada Then
                                        factura.pagosTransito = factura.Monto
                                        factura.pagado = False
                                    Else
                                        factura.pagos = factura.Monto
                                        factura.pagado = True
                                    End If
                                    conexion.SaveChanges()
                                End If
                            End If
                            conn.Close()
                        Next

                        'reiniciamos el codigo pago
                        superSearchCodigoPagoVentaPequenia = 0
                    End Using

                Catch ex As Exception
                    alerta.fnError()
                End Try
            End If

            fnNuevo() ' nueva salida para limpia campos formulario
        End If

    End Sub

    'MODIFICAR
    Private Sub fnModificar_Click() Handles Me.panel2
        If fnErrores() Then
            Exit Sub
        End If

        Dim success As Boolean = False

        If chkDespachado.Checked = True And bitEditarBodega = False Then
            alerta.fnNoEditable()
            Exit Sub
        ElseIf chkDespachado.Checked = True And bitEditarBodega = True Then

            If RadMessageBox.Show("Desea modificar el despacho ", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                success = fnModificarDespacho()
            End If

        ElseIf chkCotizado.Checked = True Then
            If RadMessageBox.Show("Desea modificar la cotización ", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                success = fnModificarCotizacion()
            End If
        End If

        If success Then
            fnLlenarDatos()
            Me.Close()
        End If
    End Sub

    'SALIR
    Private Sub fnSalir_Click() Handles Me.panel3
        If RadMessageBox.Show("¿ Desea Salir ?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
            Me.Close()
        End If
    End Sub
#End Region

#Region "Procesos Principales"
    'AGREGAR BITACORA
    Private Sub AgregaBitacora(ByVal seguir As Boolean)
        If seguir = True Then
            Try
                frmBitacora.idCliente = codigoCliente
                frmBitacora.idVendedor = CInt(cmbVendedor.SelectedValue)
                frmBitacora.fecha = dtpFechaRegistro.Value
                frmBitacora.Text = "Bitacora"
                frmBitacora.StartPosition = FormStartPosition.CenterScreen
                permiso.PermisoDialogEspeciales(frmBitacora)
                frmBitacora.Dispose()
            Catch ex As Exception
            End Try
        End If
    End Sub

    'VERIFICAR ERRORES
    Private Function fnErrores() As Boolean
        If bitEditarBodega = False Then
            If Me.grdProductos.Rows.Count = 0 Then
                alerta.contenido = "Faltan articulos"
                alerta.fnErrorContenido()
                Return True
            End If

            Dim index As Integer
            For index = 0 To Me.grdProductos.Rows.Count - 1
                Dim articulo As String = CType(Me.grdProductos.Rows(index).Cells("txbProducto").Value, String)

                If articulo IsNot Nothing Then
                    If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) Then
                    Else
                        alerta.contenido = "Requiere numero !!! " + Me.grdProductos.Rows(index).Cells("Cantidad").Value.ToString
                        alerta.fnErrorContenido()
                        Return True
                    End If
                End If
            Next
        Else
            'errores de modificar.
            If IsNumeric(txtCodigo.Text) Then
                If IsNumeric(lblTotal.Text) Then
                Else
                    alerta.contenido = "Requiere Numero"
                    alerta.fnErrorContenido()
                    Return True
                End If

                Dim t As Double = CDbl(lblTotal.Text)
                If t > 0 Then
                Else
                    alerta.contenido = "Requiere mayor a cero."
                    alerta.fnErrorContenido()
                    Return True
                End If
            Else
                alerta.fnUtiliceGuardar()
                Return True
            End If

            'recorrer la existencia y 
            Dim index As Integer
            Dim idajuste As Integer = 0
            Dim cantidad As Integer = 0
            Dim cantidadAjuste As Integer = 0
            Dim idarticulo As Integer = 0
            Dim articulo As String = ""

            For index = 0 To Me.grdProductos.Rows.Count - 1
                idajuste = CInt(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value)
                idarticulo = CInt(Me.grdProductos.Rows(index).Cells("Id").Value) 'id articulo
                articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value.ToString ' articulo

                If articulo.Length > 0 Then
                    ''revisar si cantidad es numerico.
                    If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) Then
                        cantidad = CInt(Me.grdProductos.Rows(index).Cells("txmCantidad").Value)
                    Else
                        alerta.contenido = "Requiere numero en linea " + (index + 1).ToString + " Articulo " + articulo.ToString
                        alerta.fnErrorContenido()
                        Return True
                    End If

                    'revisar cantidad de ajuste, si es numerico.
                    If idajuste > 0 Then
                        If IsNumeric(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) And CInt(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) > 0 Then
                            cantidadAjuste = CInt(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value)
                        ElseIf CInt(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value) = 0 Then
                            alerta.contenido = "Debe ingresar una cantidad de ajuste en la linea:  " + (index + 1).ToString + ", Articulo :" + articulo.ToString
                            alerta.fnErrorContenido()
                            Return True
                        Else
                            alerta.contenido = "Ingrese cantidad de ajuste en linea: " + (index + 1).ToString + ", Articulo :" + articulo.ToString
                            alerta.fnErrorContenido()
                            Return True
                        End If
                    End If

                End If
            Next
        End If

        'Verificamos que tenga mas de un producto
        Dim numeroProductos As Integer = 0
        Dim codArt As String = ""
        For i As Integer = 0 To Me.grdProductos.Rows.Count - 1
            codArt = Me.grdProductos.Rows(i).Cells("id").Value.ToString
            If codArt IsNot Nothing Then
                numeroProductos += 1
            End If
        Next

        If numeroProductos = 0 Then
            alerta.contenido = "Debe de ingresar al menos un producto"
            alerta.fnErrorContenido()
            Return True
        End If

        Return False
    End Function

    'GUARDAR COTIZACION
    Private Sub fnGuardarCotizacion()
        'validaciones
        If IsNumeric(txtCodigo.Text) Then
            alerta.fnUtiliceModificar()
            Exit Sub
        End If

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = CInt(cmbVendedor.SelectedValue)
        Dim fecha As DateTime = CType(fnFecha_horaServidor(), DateTime)
        Dim hora As String = fnHoraServidor().ToString
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim codigoSalidaCredito As Integer = 0
        Dim codigoSalidaContado As Integer = 0
        Dim errorContenido As Boolean = False

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            'consultar un cliente
            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First
            Dim usr As tblUsuario = (From x In conexion.tblUsuarios Where x.idUsuario = mdlPublicVars.idUsuario).FirstOrDefault

            If success = True Then
                'crear el encabezado de la transaccion
                Using transaction As New TransactionScope
                    'inicio de excepcion
                    Try
                        Dim salida As New tblSalida
                        Dim totalContado As Decimal = 0

                        Try
                            totalContado = CType(Replace(lblTotal.Text, "Q", "").Trim, Decimal)
                        Catch ex As Exception
                            totalContado = 0
                        End Try


                        If (totalContado > 0) Then
                            'Sustraemos el correlativo
                            Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                                 Select x).FirstOrDefault ' se agreg ordefault

                            salida.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                            salida.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                            salida.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                            salida.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                            salida.idTipoMovimiento = CShort(codmovimiento)
                            salida.idVendedor = CShort(usr.idVendedor)
                            salida.idCliente = codcliente
                            salida.cliente = txtCliente.Text
                            salida.nit = txtNit.Text
                            salida.fechaTransaccion = fecha
                            salida.fechaRegistro = CDate(dtpFechaRegistro.Text & " " & hora)
                            salida.observacion = txtObservacion.Text
                            salida.idMunicipio = mdlPublicVars.PuntoVentaPequeno_codigoMunicipio
                            salida.cotizado = True
                            salida.reservado = False
                            salida.despachar = False
                            salida.facturado = False
                            salida.empacado = False
                            salida.anulado = False
                            salida.fechaAnulado = Nothing
                            salida.descuento = 0
                            salida.subtotal = totalContado
                            salida.total = totalContado
                            salida.direccionFacturacion = cli.direccionFactura1
                            salida.direccionEnvio = cli.direccionFactura1
                            salida.contado = rbnContado.Checked
                            salida.credito = rbnCredito.Checked
                            salida.documento = (correlativo.correlativo + 1).ToString
                            correlativo.correlativo = correlativo.correlativo + 1

                            'agregar salida al modelo
                            conexion.AddTotblSalidas(salida)
                            'guardar cambios
                            conexion.SaveChanges()
                            codigoSalidaContado = salida.idSalida
                            ' codigoSalidaAFacturar = salida.idSalida 'para la venta pequenia
                        End If

                        'paso 6, guardar el detalle
                        Dim index As Integer
                        Dim cantidad As Integer = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim id As Integer = 0
                        Dim nombre As String = ""
                        Dim cantSurtir As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim contado As Boolean = True
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        For index = 0 To Me.grdProductos.Rows.Count - 1
                            id = CInt(Me.grdProductos.Rows(index).Cells("Id").Value) ' id articulo
                            nombre = Me.grdProductos.Rows(index).Cells("txbProducto").Value.ToString ' articulo

                            If nombre IsNot Nothing Then
                                cantidad = CInt(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) 'cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value.ToString, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value.ToString, "Q", "").Trim) ' total
                                cantSurtir = CInt(Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value) 'cantidadSurtir
                                idSurtir = CInt(Me.grdProductos.Rows(index).Cells("idSurtir").Value)
                                idInventario = CInt(Me.grdProductos.Rows(index).Cells("idInventario").Value)
                                tipoPrecio = CInt(Me.grdProductos.Rows(index).Cells("tipoPrecio").Value)
                                observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value.ToString

                                If precio <= 0 Then
                                    alerta.contenido = "No se puede guardar artículo: " & nombre & vbCrLf & "No tiene precio"
                                    errorContenido = True
                                    success = False
                                    Exit Try
                                End If

                                Dim producto As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = id Select x).First
                                Dim detalle As New tblSalidaDetalle
                                detalle.idSalida = salida.idSalida
                                detalle.anulado = False
                                detalle.idArticulo = id
                                detalle.cantidad = cantidad
                                detalle.precio = precio
                                detalle.costo = producto.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio
                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()

                                'Verificamos is el producto es un servicio
                                If producto.bitKit Then
                                    'Guardamos el detalle de los articulos del Kit
                                    'Obtenemos todos los articulos asociados a un kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                                  Select x).ToList

                                    For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                        'Creamos un nuevo salida detalle
                                        Dim detalleHijo As New tblSalidaDetalle
                                        detalleHijo.idArticulo = CInt(detalleKit.articulo)
                                        detalleHijo.anulado = False
                                        detalleHijo.cantidad = CInt(detalleKit.cantidad * detalle.cantidad)
                                        detalleHijo.comentario = ""
                                        detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                        detalleHijo.precio = 0
                                        detalleHijo.idSalida = detalle.idSalida
                                        detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                        detalleHijo.tipoInventario = detalle.tipoInventario
                                        detalleHijo.tipoPrecio = detalle.tipoPrecio

                                        'Agregamos el detalle a la BD
                                        conexion.AddTotblSalidaDetalles(detalleHijo)
                                        conexion.SaveChanges()
                                    Next
                                End If

                                'Verifiamos si es surtir
                                If idSurtir > 0 Then
                                    'Modificamos el pendiente por surtir
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                    Dim p As tblSurtir
                                    For Each p In pendiente
                                        If cantidad > p.saldo Then
                                            cantidad = CInt(cantidad - p.saldo)
                                            p.saldo = 0
                                        Else
                                            p.saldo -= cantidad
                                            cantidad = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidad = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = detalle.idSalidaDetalle
                                    pendiente.articulo = detalle.idArticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = False
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = CShort(mdlPublicVars.idVendedor)
                                    pendiente.cliente = salida.idCliente
                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If
                            End If
                        Next

                        'paso 8, completar la transaccion.
                        transaction.Complete()
                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        RadMessageBox.Show(ex.Message + vbCrLf + ex.InnerException.ToString, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
                        ' Handle errors and deadlocks here and retry if needed. 
                        ' Allow an UpdateException to pass through and 
                        ' retry, otherwise stop the execution. 
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            'cerrar conexion
            conn.Close()
        End Using

        If success = True Then
            conexion.AcceptAllChanges()
            alerta.fnGuardar()
            bitEditarSalida = False
            fnNuevo()
            'Mostramos la ventana de Bitacora, Usando la Variable global de configuración para conocer si se pide bitacora o No.
            AgregaBitacora(mdlPublicVars.Salida_BitacoraAlCotizar)
            If RadMessageBox.Show("¿Desea mostrar doc de salida?", mdlPublicVars.nombreSistema, MessageBoxButtons.YesNo, RadMessageIcon.Question) = Windows.Forms.DialogResult.Yes Then
                If rbnContado.Checked Then
                    fnReporte_Cotizacion(codigoSalidaContado)
                End If
                If rbnCredito.Checked Then
                    fnReporte_Cotizacion(codigoSalidaCredito)
                End If
            End If
            'Iniciamos un nueva venta 
            fnNuevo()
        Else
            If errorContenido Then
                alerta.fnErrorContenido()
            Else
                alerta.fnErrorGuardar()
            End If
            Console.WriteLine("La operacion no pudo ser completada")
        End If

    End Sub

    'MODIFICAR COTIZACION
    Private Function fnModificarCotizacion() As Boolean
        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = CInt(cmbVendedor.SelectedValue)

        Dim fecha As DateTime = CType(fnFecha_horaServidor(), DateTime)
        Dim success As Boolean = True
        Dim errContenido As String = ""

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Using transaction As New TransactionScope
                Try
                    Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First

                    'GUARDAR REGISTRO DE SALIDA.

                    '------------------------------------------------------  crear encabezado.-----------------------------
                    'paso 5, guardar el registro de encabezado
                    Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).FirstOrDefault

                    salida.descuento = 0
                    salida.subtotal = CDec(lblTotal.Text)
                    salida.total = CDec(lblTotal.Text)
                    salida.contado = rbnContado.Checked
                    salida.credito = rbnCredito.Checked

                    conexion.SaveChanges()
                    '--------------------------------------- fin de crear encabezado. -------------------

                    'paso 6, guardar el detalle
                    Dim index As Integer
                    Dim cantidad As Double = 0
                    Dim precio As Decimal = 0
                    Dim total As Decimal = 0
                    Dim idarticulo As Integer = 0
                    Dim articulo As String = ""
                    Dim iddetalle As Integer = 0
                    Dim elimina As Integer = 0
                    Dim cantSurtir As Integer = 0
                    Dim idSurtir As Integer = 0
                    Dim idInventario As Integer = 0
                    Dim tipoPrecio As Integer = 0
                    Dim observacion As String = ""
                    For index = 0 To Me.grdProductos.Rows.Count - 1
                        iddetalle = CInt(Me.grdProductos.Rows(index).Cells("iddetalle").Value) ' id detalle
                        idarticulo = CInt(Me.grdProductos.Rows(index).Cells("Id").Value) ' id articulo
                        articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value.ToString ' codigo

                        If articulo IsNot Nothing Then
                            cantidad = CInt(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) ' cantidad
                            precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value.ToString, "Q", "").Trim) ' precio
                            total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value.ToString, "Q", "").Trim) ' total
                            elimina = CInt(Me.grdProductos.Rows(index).Cells("elimina").Value)
                            cantSurtir = CInt(Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value)
                            idSurtir = CInt(Me.grdProductos.Rows(index).Cells("idSurtir").Value)
                            idInventario = CInt(Me.grdProductos.Rows(index).Cells("idInventario").Value)
                            tipoPrecio = CInt(Me.grdProductos.Rows(index).Cells("tipoPrecio").Value)
                            observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value.ToString

                            Dim producto As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = idarticulo Select x).FirstOrDefault
                            If elimina > 0 Then
                                'modificar registro de detalle.
                                Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                                detalle.anulado = True
                                'Verificamos si tiene pendientes por surtir
                                Dim surtir As tblSurtir = (From x In conexion.tblSurtirs Where x.salidaDetalle = detalle.idSalidaDetalle Select x).FirstOrDefault
                                If surtir IsNot Nothing Then
                                    surtir.anulado = True
                                    conexion.SaveChanges()
                                End If
                                conexion.SaveChanges()

                            ElseIf iddetalle > 0 Then
                                'modificar registro de detalle.
                                Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                                Dim cantidadAntigua As Integer = detalle.cantidad

                                detalle.cantidad = CInt(cantidad)
                                detalle.precio = precio
                                detalle.precioFactura = precio
                                conexion.SaveChanges()

                                If detalle.tblArticulo.bitKit Then
                                    'Obtenemos la lista de salidas detalle asociadas a el kit
                                    Dim lSalidaDetallKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = detalle.idSalidaDetalle _
                                                                                         Select x).ToList

                                    'Recorremos el grid para actualizarlo
                                    Dim cantidadKit As Integer = 0
                                    For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetallKit
                                        'Realizamos el calculo para la cantidad nueva
                                        cantidadKit = CInt(salidaDetalleKit.cantidad / cantidadAntigua)
                                        salidaDetalleKit.cantidad = cantidadKit * detalle.cantidad
                                        conexion.SaveChanges()
                                    Next
                                End If
                            Else
                                'crear registro de detalle
                                Dim detalle As New tblSalidaDetalle
                                detalle.idSalida = salida.idSalida
                                detalle.idArticulo = idarticulo
                                detalle.cantidad = CInt(cantidad)
                                detalle.precio = precio
                                detalle.anulado = False
                                detalle.costo = producto.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio

                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()
                                'asignar el id detalle 
                                iddetalle = detalle.idSalidaDetalle

                                'Verificamos is el producto es un kit
                                If detalle.tblArticulo.bitKit Then
                                    'Guardamos el detalle de los articulos del Kit

                                    'Obtenemos todos los articulos asociados a un kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = detalle.idArticulo
                                                                                  Select x).ToList

                                    For Each detalleKit As tblArticulo_Kit In lDetalleKit
                                        'Creamos un nuevo salida detalle
                                        Dim detalleHijo As New tblSalidaDetalle
                                        detalleHijo.idArticulo = CInt(detalleKit.articulo)
                                        detalleHijo.anulado = False
                                        detalleHijo.cantidad = CInt(detalleKit.cantidad * detalle.cantidad)
                                        detalleHijo.comentario = ""
                                        detalleHijo.costo = detalleKit.tblArticulo1.costoIVA
                                        detalleHijo.precio = 0
                                        detalleHijo.idSalida = detalle.idSalida
                                        detalleHijo.kitSalidaDetalle = detalle.idSalidaDetalle
                                        detalleHijo.tipoInventario = detalle.tipoInventario
                                        detalleHijo.tipoPrecio = detalle.tipoPrecio

                                        'Agregamos el detalle a la BD
                                        conexion.AddTotblSalidaDetalles(detalleHijo)
                                        conexion.SaveChanges()
                                    Next
                                End If
                            End If

                            If elimina = 0 Then
                                'Verifiamos si es surtir
                                If idSurtir > 0 Then
                                    'Modificamos el pendiente por surtir
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = idarticulo Select x Order By x.fechaTransaccion Descending).ToList

                                    For Each p As tblSurtir In pendiente
                                        If cantidad > p.saldo Then
                                            cantidad = CDbl(cantidad - p.saldo)
                                            p.saldo = 0
                                        Else
                                            p.saldo = CType(p.saldo - cantidad, Integer?)
                                            cantidad = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidad = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = iddetalle
                                    pendiente.articulo = idarticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = False
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = CShort(mdlPublicVars.idVendedor)
                                    pendiente.cliente = salida.idCliente
                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If
                            End If
                        End If
                    Next

                    'paso 8, completar la transaccion.
                    transaction.Complete()

                Catch ex As System.Data.EntityException
                    success = False
                Catch ex As Exception
                    success = False
                    ' Handle errors and deadlocks here and retry if needed. 
                    ' Allow an UpdateException to pass through and 
                    ' retry, otherwise stop the execution. 
                    If ex.[GetType]() <> GetType(UpdateException) Then
                        Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                        alerta.fnErrorGuardar()
                        Exit Try
                        ' If we get to this point, the operation will be retried. 
                    End If
                End Try
            End Using

            conn.Close()
        End Using


        If success = True Then
            conexion.AcceptAllChanges()
            If Not bitSugerirDespacho Then
                alerta.fnGuardar()
                Return True
            End If
            Return False
        Else
            Return False
            'alerta.fnErrorGuardar()
            Console.WriteLine("La operacion no pudo ser completada")
        End If
    End Function

    'GUARDAR DESPACHO
    Private Sub fnGuardarDespacho()
        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Integer = CInt(cmbVendedor.SelectedValue)
        Dim codigoSalida As Integer = 0
        Dim fecha As DateTime = CType(fnFecha_horaServidor(), DateTime)
        Dim hora As String = fnHoraServidor().ToString
        Dim success As Boolean = True
        Dim errContenido As String = ""

        Dim autorizaCredito As Boolean = False    'variable que se utiliza para saber si se despliega la fnErrorAutorizacionCredito

        'contador de pendientes por surtir, automaticamente envia el restante de cantidad y saldo a pendientes por surtir.
        Dim contadorSurtir As Integer = 0
        Dim cantidadSurtir As Double = 0


        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Dim cli As tblCliente = (From x In conexion.tblClientes Where x.idCliente = codcliente Select x).First
            Dim usr As tblUsuario = (From x In conexion.tblUsuarios Where x.idUsuario = mdlPublicVars.idUsuario).FirstOrDefault
            If success Then
                Using transaction As New TransactionScope
                    Try
                        'GUARDAR REGISTRO DE SALIDA.
                        Dim totalSalida As Decimal = 0
                        Try
                            totalSalida = CDec(Replace(lblTotal.Text, "Q", "").Trim)
                        Catch ex As Exception
                            totalSalida = 0
                        End Try
                        Dim salida As New tblSalida
                        'Sustraemos el correlativo
                        Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idEmpresa = mdlPublicVars.idEmpresa And x.idTipoMovimiento = codmovimiento _
                                                             Select x).First

                        salida.idEmpresa = CType(mdlPublicVars.idEmpresa, Integer)
                        salida.idUsuario = CType(mdlPublicVars.idUsuario, Integer)
                        salida.idTipoInventario = CType(mdlPublicVars.General_idTipoInventario, Integer)
                        salida.idAlmacen = CType(mdlPublicVars.General_idAlmacenPrincipal, Integer)
                        salida.idTipoMovimiento = CShort(codmovimiento)
                        salida.idVendedor = CShort(usr.idVendedor)
                        salida.idCliente = codcliente
                        salida.cliente = txtCliente.Text
                        salida.nit = txtNit.Text
                        salida.fechaTransaccion = fecha
                        salida.fechaRegistro = CDate(dtpFechaRegistro.Text & " " & hora)
                        salida.fechaDespachado = CDate(dtpFechaRegistro.Text & " " & hora)
                        salida.cotizado = False
                        salida.reservado = False
                        salida.despachar = True
                        salida.facturado = False
                        salida.empacado = True        ' ponemos true para ver si nos permite facturar
                        salida.anulado = False
                        salida.fechaAnulado = Nothing
                        'salidaCredito.idMunicipio = If(CInt(cmbDirEnvios.SelectedValue) = 0, mdlPublicVars.General_MunicipioLocal, CInt(cmbDirEnvios.SelectedValue))
                        salida.descuento = 0
                        salida.subtotal = totalSalida
                        salida.total = totalSalida
                        salida.contado = rbnContado.Checked
                        salida.credito = rbnCredito.Checked
                        salida.documento = (correlativo.correlativo + 1).ToString
                        correlativo.correlativo = correlativo.correlativo + 1

                        'agregar salida al modelo
                        conexion.AddTotblSalidas(salida)

                        'guardar cambios
                        conexion.SaveChanges()
                        codigosalida = salida.idSalida
                        codigoSalidaAFacturar = salida.idSalida 'para saber cual se va a facturar en venta pequenia

                        '--------------------------------------- fin de crear encabezado. ------------------
                        'paso 6, guardar el detall
                        Dim index As Integer
                        Dim cantidad As Double = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim idarticulo As Integer = 0
                        Dim nombre As String = ""
                        Dim cantSurtir As Integer = 0 ' sirve cuando el usuario ingresa el pendiente por surtir a comparacion de cantidadSurtir que es automatico.
                        Dim idSurtir As Integer = 0
                        Dim contado As Boolean = True
                        Dim idInventario As Integer = 0
                        Dim tipoPrecio As Integer = 0
                        Dim observacion As String = ""
                        'crear registro de salida bodega.
                        If codigosalida > 0 Then
                            Dim sb As New tblsalidaBodega
                            sb.idsalida = codigosalida
                            conexion.AddTotblsalidaBodegas(sb)
                            conexion.SaveChanges()
                        End If


                        For index = 0 To Me.grdProductos.Rows.Count - 1
                            idarticulo = CInt(Me.grdProductos.Rows(index).Cells("Id").Value) ' id articulo
                            nombre = Me.grdProductos.Rows(index).Cells("txbProducto").Value.ToString ' codigo

                            If nombre IsNot Nothing Then
                                cantidad = CDbl(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) ' cantidad
                                precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value.ToString, "Q", "").Trim) ' precio
                                total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value.ToString, "Q", "").Trim) ' total
                                cantSurtir = CInt(Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value) 'surtir
                                idSurtir = CInt(Me.grdProductos.Rows(index).Cells("idSurtir").Value)
                                idInventario = CInt(Me.grdProductos.Rows(index).Cells("idInventario").Value)
                                tipoPrecio = CInt(Me.grdProductos.Rows(index).Cells("tipoPrecio").Value)
                                observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value.ToString

                                Dim articulo As tblArticulo = (From x In conexion.tblArticuloes Where x.idArticulo = idarticulo Select x).First

                                Dim detalle As New tblSalidaDetalle
                                detalle.idSalida = codigosalida
                                detalle.anulado = False
                                detalle.idArticulo = idarticulo
                                detalle.cantidad = CInt(cantidad)
                                detalle.precio = precio
                                detalle.costo = articulo.costoIVA
                                detalle.tipoInventario = idInventario
                                detalle.tipoPrecio = tipoPrecio
                                detalle.comentario = observacion
                                detalle.precioFactura = precio 'se agrego precio factura

                                conexion.AddTotblSalidaDetalles(detalle)
                                conexion.SaveChanges()

                                If articulo.bitKit Then
                                    'Obtenemos la lista de los productos asociados a ese kit
                                    Dim lDetalleKit As List(Of tblArticulo_Kit) = (From x In conexion.tblArticulo_Kit Where x.articuloBase = articulo.idArticulo _
                                                                                   Select x).ToList

                                    For Each detallekit As tblArticulo_Kit In lDetalleKit
                                        Dim salidaKit As New tblSalidaDetalle
                                        salidaKit.anulado = False
                                        salidaKit.idArticulo = CInt(detallekit.articulo)
                                        salidaKit.cantidad = CInt(cantidad * detallekit.cantidad)
                                        salidaKit.precio = 0
                                        salidaKit.costo = detallekit.tblArticulo1.costoIVA
                                        salidaKit.tipoInventario = idInventario
                                        salidaKit.tipoPrecio = detalle.tipoPrecio
                                        salidaKit.comentario = observacion
                                        salidaKit.kitSalidaDetalle = detalle.idSalidaDetalle
                                        salidaKit.idSalida = detalle.idSalida
                                        conexion.AddTotblSalidaDetalles(salidaKit)
                                        conexion.SaveChanges()

                                        'descontar existencias.
                                        Dim codArtKit As Integer = CInt(detallekit.articulo)
                                        Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                     And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                     And x.idArticulo = codArtKit Select x).FirstOrDefault

                                        'si es reserva, incrementar la reserva , y decrementar el saldo
                                        If inve.saldo >= (salidaKit.cantidad) Then
                                            inve.saldo = inve.saldo - (salidaKit.cantidad)
                                            inve.salida = inve.salida + (salidaKit.cantidad)
                                            conexion.SaveChanges()
                                        Else

                                            errContenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + articulo.nombre1
                                            success = False
                                            Exit Try
                                        End If
                                    Next
                                ElseIf articulo.bitProducto Then

                                    'descontar existencias.
                                    Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                                 And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                                 And x.idArticulo = idarticulo Select x).FirstOrDefault

                                    'descontamos del inventario
                                    If inve.saldo >= cantidad Then
                                        inve.saldo = inve.saldo - CInt(cantidad)
                                        inve.salida += CInt(cantidad)
                                        conexion.SaveChanges()

                                    Else
                                        'cantidad a surtir.
                                        cantidadSurtir = CDbl(cantidad - inve.saldo)
                                        contadorSurtir = contadorSurtir + 1

                                        'descontar el saldo y enviar a pendientes por surtir.
                                        inve.salida = inve.salida + (inve.saldo)
                                        inve.saldo = 0

                                        Dim pendiente As New tblSurtir
                                        pendiente.salidaDetalle = detalle.idSalidaDetalle
                                        pendiente.articulo = detalle.idArticulo
                                        pendiente.cantidad = CInt(cantidadSurtir)
                                        pendiente.saldo = CInt(cantidadSurtir)
                                        pendiente.fechaTransaccion = fecha
                                        pendiente.anulado = False
                                        pendiente.usuario = mdlPublicVars.idUsuario
                                        pendiente.vendedor = CShort(mdlPublicVars.idVendedor)
                                        pendiente.cliente = salida.idCliente
                                        conexion.AddTotblSurtirs(pendiente)
                                        conexion.SaveChanges()

                                        If contadorSurtir = 1 Then
                                            errContenido += " Saldo Insuficiente, Desea Surtir :" + vbCrLf & articulo.nombre1 + vbCrLf
                                        ElseIf contadorSurtir > 1 Then
                                            errContenido += ", " & articulo.nombre1
                                        End If

                                        'success = False
                                        'Exit Try
                                    End If
                                End If

                                'Verifiamos si es surtir
                                If idSurtir > 0 Then

                                    'Modificamos el pendiente por surtir, para descontar de los pendientes por surtir del cliente.
                                    Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where (x.cliente = salida.idCliente) _
                                                                           And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Ascending).ToList
                                    Dim cantidadDescontar2 As Integer = CInt(cantidad)
                                    For Each p As tblSurtir In pendiente
                                        If cantidadDescontar2 > p.saldo Then
                                            cantidadDescontar2 -= CInt(p.saldo)
                                            p.saldo = 0
                                        Else
                                            p.saldo -= cantidadDescontar2
                                            cantidadDescontar2 = 0
                                        End If
                                        conexion.SaveChanges()
                                        If cantidadDescontar2 = 0 Then
                                            Exit For
                                        End If
                                    Next
                                ElseIf cantSurtir > 0 Then
                                    'Creamos el pendiente por surtir
                                    Dim pendiente As New tblSurtir
                                    pendiente.salidaDetalle = detalle.idSalidaDetalle
                                    pendiente.articulo = detalle.idArticulo
                                    pendiente.cantidad = cantSurtir
                                    pendiente.saldo = cantSurtir
                                    pendiente.fechaTransaccion = fecha
                                    pendiente.anulado = False
                                    pendiente.usuario = mdlPublicVars.idUsuario
                                    pendiente.vendedor = CShort(mdlPublicVars.idVendedor)
                                    pendiente.cliente = salida.idCliente
                                    conexion.AddTotblSurtirs(pendiente)
                                    conexion.SaveChanges()
                                End If

                                'Verificamos si tiene pendientes por pedir
                                Dim lPendientes As List(Of tblPendientePorPedir) = (From x In conexion.tblPendientePorPedirs
                                                                                     Where x.bitCreado And Not x.anulado And x.saldo > 0 And x.articulo = idarticulo
                                                                                     Select x).ToList
                                Dim cantidadDescontar As Integer = CInt(cantidad)
                                'Recorremos la lista de pendientes
                                For Each pendiente As tblPendientePorPedir In lPendientes

                                    If cantidadDescontar > pendiente.saldo Then
                                        cantidadDescontar -= CInt(pendiente.saldo)
                                        pendiente.saldo = 0
                                    Else
                                        pendiente.saldo -= cantidadDescontar
                                        cantidadDescontar = 0
                                    End If
                                    conexion.SaveChanges()
                                    If cantidadDescontar = 0 Then
                                        Exit For
                                    End If
                                Next
                            End If
                        Next
                        conexion.SaveChanges()

                        If contadorSurtir > 0 Then

                            If RadMessageBox.Show(errContenido + vbCrLf + " Desea Continuar...", "Articulos pendientes por Surtir", MessageBoxButtons.YesNo) = Windows.Forms.DialogResult.No Then
                                errContenido = "No se pudo Guardar"
                                success = False
                                Exit Try
                            End If

                        End If

                        'paso 8, completar la transaccion.
                        transaction.Complete()
                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            success = False
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            If success = True Then
                conexion.AcceptAllChanges()
                conexion.Dispose()

                bitRealizarPago = True ' si se completa la transaccion realizaremos el cobro
            End If
            'cerrar la conexion.
            conn.Close()
        End Using

        If success = True Then
            conexion.AcceptAllChanges()
            alerta.contenido = "Registro guardado correctamente"
            alerta.fnGuardar()
            bitEditarSalida = False

            'Mostramos la ventana de Bitacora, Usando la Variable global de configuración para conocer si se pide bitacora o No.
            AgregaBitacora(mdlPublicVars.Salida_BitaAlDespachar)
        Else
            If autorizaCredito = True Then
                alerta.fnErrorAutorizacionCredito()
            Else
                alerta.contenido = errContenido
                alerta.fnErrorContenido()
                Console.WriteLine("La operacion no pudo ser completada")
            End If
        End If
    End Sub

    'MODIFICAR DESPACHO
    Private Function fnModificarDespacho() As Boolean
        If fnErrores() = True Then
            Exit Function
        End If

        Dim codcliente As Integer = codigoCliente
        Dim cliente As String = txtCliente.Text
        Dim codmovimiento As Integer = mdlPublicVars.Salida_TipoMovimientoVenta
        Dim codvendedor As Short = CShort(cmbVendedor.SelectedValue)
        Dim hora As String = fnHoraServidor().ToString
        Dim fecha As DateTime = CType(fnFecha_horaServidor(), DateTime)
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim idCorrelativo As Integer = 0

        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)
            If success = True Then
                Using transaction As New TransactionScope
                    Try
                        'GUARDAR REGISTRO DE SALIDA.
                        '------------------------------------------------------  crear encabezado.-----------------------------
                        'paso 5, guardar el registro de encabezado
                        Dim salida As tblSalida = (From x In conexion.tblSalidas Where x.idSalida = codigo Select x).First
                        salida.descuento = 0
                        salida.subtotal = CDec(lblTotal.Text)
                        salida.total = CDec(lblTotal.Text)
                        conexion.SaveChanges()

                        '--------------------------------------- fin de crear encabezado. ------------------
                        'paso 6, guardar el detalle
                        Dim index As Integer = 0
                        Dim cantidad As Double = 0
                        Dim idajustecate As Short = 0
                        Dim cantidadAjuste As Decimal = 0
                        Dim precio As Decimal = 0
                        Dim total As Decimal = 0
                        Dim idarticulo As Integer = 0
                        Dim idInventario As Integer = 0
                        Dim idSurtir As Integer = 0
                        Dim cantSurtir As Integer = 0
                        Dim observacion As String = ""
                        Dim articulo As String = ""
                        Dim iddetalle As Integer = 0

                        ''crear registro de salida bodega.
                        Dim codigobodega As Integer = 0

                        'Verificamos si existe algun ajuste
                        ' Dim totalAjuste As Decimal '= lblSaldoAjuste.Text

                        Dim codigoMovPrincipal As Integer = 0
                        'Dim codigoMovLiquidacion As Integer = 0

                        '      If totalAjuste <> 0 Then
                        'Si existe algun cambio entre el pago inicial y el pago ajuste es porque existe un ajuste

                        'Obtenemos el correlativo del ajuste
                        Dim correlativo As tblCorrelativo = (From x In conexion.tblCorrelativos Where x.idTipoMovimiento = Ajuste_CodigoMovimiento _
                                                             Select x).FirstOrDefault

                        If correlativo IsNot Nothing Then
                            correlativo.correlativo += 1
                            conexion.SaveChanges()
                            idCorrelativo = correlativo.correlativo
                        Else
                            'Si no existe el correlativo lo creamos
                            Dim correlativoNuevo As New tblCorrelativo
                            correlativoNuevo.correlativo = 1
                            correlativoNuevo.serie = ""
                            correlativoNuevo.inicio = 1
                            correlativoNuevo.fin = 1000
                            correlativoNuevo.porcentajeAviso = 20
                            correlativoNuevo.idEmpresa = mdlPublicVars.idEmpresa
                            correlativoNuevo.idTipoMovimiento = mdlPublicVars.Ajuste_CodigoMovimiento
                            conexion.AddTotblCorrelativos(correlativoNuevo)
                            conexion.SaveChanges()

                            'asignar el numero de correlativo.
                            idCorrelativo = 1
                        End If
                        'Procedemos a crear el ajuste
                        '--------ENCABEZADO MOVIMIENTO INVENTARIO PRINCIPAL -------------
                        Dim movimiento As New tblMovimientoInventario
                        movimiento.correlativo = idCorrelativo
                        movimiento.empresa = mdlPublicVars.idEmpresa
                        movimiento.usuario = mdlPublicVars.idUsuario
                        movimiento.almacen = mdlPublicVars.General_idAlmacenPrincipal
                        movimiento.documento = ""
                        movimiento.bitBodega = True
                        movimiento.bitVenta = False
                        movimiento.tipoMovimiento = Ajuste_CodigoMovimiento
                        movimiento.inventarioInicial = mdlPublicVars.General_idTipoInventario
                        movimiento.inventarioFinal = mdlPublicVars.General_idTipoInventario
                        movimiento.ajuste = True
                        movimiento.traslado = False
                        movimiento.anulado = False
                        movimiento.revisado = False
                        movimiento.fechaRegistro = CType(dtpFechaRegistro.Text & " " & hora, DateTime)
                        movimiento.fechaTransaccion = fecha
                        movimiento.observacion = "Cod: " & salida.idSalida & ",Doc: " & salida.documento & ",Cliente: " & salida.tblCliente.Negocio
                        movimiento.revisado = True
                        movimiento.bitVenta = True
                        movimiento.bitBodega = False
                        movimiento.codigoSalida = salida.idSalida
                        conexion.AddTotblMovimientoInventarios(movimiento)
                        conexion.SaveChanges()

                        codigoMovPrincipal = movimiento.codigo

                        For index = 0 To Me.grdProductos.Rows.Count - 1

                            'consultar datos base del registro de producto.
                            iddetalle = CInt(Me.grdProductos.Rows(index).Cells("iddetalle").Value) ' id detalle
                            idarticulo = CInt(Me.grdProductos.Rows(index).Cells("Id").Value) ' id articulo
                            articulo = Me.grdProductos.Rows(index).Cells("txbProducto").Value.ToString ' codigo
                            cantidad = CDbl(Me.grdProductos.Rows(index).Cells("txmCantidad").Value) ' cantidad
                            precio = CDec(Replace(Me.grdProductos.Rows(index).Cells("txbPrecio").Value.ToString, "Q", "").Trim) ' precio
                            total = CDec(Replace(Me.grdProductos.Rows(index).Cells("Total").Value.ToString, "Q", "").Trim) ' total
                            idInventario = CInt(Me.grdProductos.Rows(index).Cells("idInventario").Value) ' total
                            idSurtir = CInt(Me.grdProductos.Rows(index).Cells("idSurtir").Value) ' idsurtir
                            cantSurtir = CInt(Me.grdProductos.Rows(index).Cells("txmCantidadSurtir").Value) ' cant surtir
                            observacion = Me.grdProductos.Rows(index).Cells("txbObservacion").Value.ToString   'observacion
                            'consultar registro de inventario.
                            Dim inve As tblInventario = (From x In conexion.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                             And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                             And x.idArticulo = idarticulo Select x).FirstOrDefault

                            'modificar registro de detalle.
                            Dim detalle As tblSalidaDetalle = (From x In conexion.tblSalidaDetalles Where x.idSalidaDetalle = iddetalle Select x).First
                            detalle.comentario = observacion
                            If IsNumeric(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value) Then ' cantidadAjuste

                                'Obtenemos la informacion del articulo
                                Dim producto As tblArticulo = (From x In conexion.tblArticuloes.AsEnumerable Where x.idArticulo = idarticulo _
                                                               Select x).FirstOrDefault

                                idajustecate = CShort(Me.grdProductos.Rows(index).Cells("idajustecategoria").Value)

                                'si el codigo de ajuste categoria es mayor a cero, existe
                                If idajustecate > 0 Then
                                    cantidadAjuste = CDec(Me.grdProductos.Rows(index).Cells("txmCantidadAjuste").Value)
                                    'Verificamos si es entrada o salida
                                    Dim tipoMov As tblTipoMovimiento = (From x In conexion.tblTipoMovimientoes.AsEnumerable Where x.idTipoMovimiento = idajustecate Select x).FirstOrDefault
                                    'Verificamos si es traslado o ajuste
                                    If tipoMov.traslado Then
                                        'Creamos un nuevo traslado

                                        'Procedemos a crear el ajuste
                                        '--------ENCABEZADO MOVIMIENTO INVENTARIO PRINCIPAL -------------
                                        Dim traslado As New tblMovimientoInventario
                                        traslado.correlativo = idCorrelativo
                                        traslado.empresa = mdlPublicVars.idEmpresa
                                        traslado.usuario = mdlPublicVars.idUsuario
                                        traslado.almacen = mdlPublicVars.General_idAlmacenPrincipal
                                        traslado.documento = ""
                                        traslado.bitBodega = True
                                        traslado.bitVenta = False
                                        traslado.tipoMovimiento = Ajuste_CodigoMovimiento
                                        traslado.inventarioInicial = mdlPublicVars.General_idTipoInventario
                                        traslado.inventarioFinal = tipoMov.idTipoInventario
                                        traslado.ajuste = False
                                        traslado.traslado = True
                                        traslado.anulado = False
                                        traslado.revisado = False
                                        traslado.fechaRegistro = CDate(dtpFechaRegistro.Text & " " & hora)
                                        traslado.fechaTransaccion = fecha
                                        traslado.observacion = "Cod: " & salida.idSalida & ",Doc: " & salida.documento & ",Cliente: " & salida.tblCliente.Negocio
                                        traslado.revisado = True
                                        traslado.bitVenta = True
                                        traslado.bitBodega = False
                                        traslado.codigoSalida = salida.idSalida

                                        conexion.AddTotblMovimientoInventarios(traslado)
                                        conexion.SaveChanges()

                                        'Creamos el nuevo detalle del movimiento
                                        Dim detalleAj As New tblMovimientoInventarioDetalle
                                        detalleAj.movimientoInventario = traslado.codigo
                                        detalleAj.articulo = detalle.idArticulo
                                        detalleAj.cantidad = cantidadAjuste
                                        detalleAj.tipoMovimiento = tipoMov.idTipoMovimiento
                                        detalleAj.costo = producto.costoIVA
                                        detalleAj.total = producto.costoIVA * cantidadAjuste
                                        detalleAj.salidaDetalle = detalle.idSalidaDetalle

                                        detalleAj.entrada = tipoMov.aumentaInventario
                                        detalleAj.salida = tipoMov.disminuyeInventario

                                        conexion.AddTotblMovimientoInventarioDetalles(detalleAj)
                                        conexion.SaveChanges()

                                        'Devolvemos es cantidad al inventario del movimiento
                                        If tipoMov.idTipoInventario IsNot Nothing Then
                                            'Verificamos si aumenta o disminuye
                                            If tipoMov.nombre.Contains("-") Then
                                                traslado.inventarioInicial = mdlPublicVars.General_idTipoInventario
                                                traslado.inventarioFinal = tipoMov.idTipoInventario
                                                conexion.SaveChanges()
                                                'Obtenemos el inventario de se artciulo
                                                Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                                   Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = tipoMov.idTipoInventario
                                                                                   Select x).FirstOrDefault

                                                'decremental el total de la salida o venta.
                                                'salida.total = salida.total - detalleAj.total

                                                If inventario IsNot Nothing Then
                                                    'Aumentamos el saldo del inventario y disminuimos la salida
                                                    inventario.saldo -= CInt(cantidadAjuste)
                                                    inventario.salida -= CInt(cantidadAjuste)

                                                    'Guardamos los cambios
                                                    conexion.SaveChanges()
                                                Else
                                                    'Cremos el registro en inventario
                                                    Dim inveNuevo As New tblInventario

                                                    inveNuevo.idArticulo = detalle.idArticulo
                                                    inveNuevo.entrada = 0
                                                    inveNuevo.salida = 0
                                                    inveNuevo.transito = 0
                                                    inveNuevo.reserva = 0
                                                    inveNuevo.saldo = -CInt(cantidadAjuste)
                                                    inveNuevo.idTipoInventario = tipoMov.idTipoInventario
                                                    inveNuevo.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal

                                                    'Agregamos el inventario
                                                    conexion.AddTotblInventarios(inveNuevo)
                                                    conexion.SaveChanges()

                                                End If
                                                detalle.cantidad = detalle.cantidad - CInt(cantidadAjuste)

                                            ElseIf tipoMov.nombre.Contains("+") Then

                                                traslado.inventarioFinal = mdlPublicVars.General_idTipoInventario
                                                traslado.inventarioInicial = tipoMov.idTipoInventario

                                                'Obtenemos el inventario de se artciulo
                                                Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                                   Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = tipoMov.idTipoInventario
                                                                                   Select x).FirstOrDefault


                                                'incremental el total de la salida o venta.
                                                'salida.total = salida.total + detalleAj.total

                                                If inventario IsNot Nothing Then
                                                    'Aumentamos el saldo del inventario y disminuimos la salida
                                                    inventario.saldo += CInt(cantidadAjuste)
                                                    inventario.entrada += CInt(cantidadAjuste)

                                                    'Guardamos los cambios
                                                    conexion.SaveChanges()
                                                Else
                                                    'Cremos el registro en inventario
                                                    Dim inveNuevo As New tblInventario
                                                    inveNuevo.idArticulo = detalle.idArticulo
                                                    inveNuevo.entrada = 0
                                                    inveNuevo.salida = 0
                                                    inveNuevo.transito = 0
                                                    inveNuevo.reserva = 0
                                                    inveNuevo.saldo = CInt(cantidadAjuste)
                                                    inveNuevo.idTipoInventario = tipoMov.idTipoInventario
                                                    inveNuevo.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal
                                                    'Agregamos el inventario
                                                    conexion.AddTotblInventarios(inveNuevo)
                                                    ctx.SaveChanges()
                                                End If
                                                detalle.cantidad = detalle.cantidad + CInt(cantidadAjuste)
                                            End If
                                        End If
                                    ElseIf tipoMov.ajuste Then
                                        'Creamos el nuevo detalle del movimiento
                                        Dim detalleAj As New tblMovimientoInventarioDetalle
                                        detalleAj.movimientoInventario = codigoMovPrincipal
                                        detalleAj.articulo = idarticulo
                                        detalleAj.tipoMovimiento = CType(idajustecate, Short?)
                                        detalleAj.costo = precio
                                        detalleAj.total = (precio * cantidadAjuste)
                                        detalleAj.salidaDetalle = detalle.idSalidaDetalle
                                        detalleAj.cantidad = cantidadAjuste
                                        If tipoMov.aumentaInventario Then
                                            detalleAj.entrada = True
                                            detalleAj.salida = False
                                        ElseIf tipoMov.disminuyeInventario Then
                                            detalleAj.salida = True
                                            detalleAj.entrada = False
                                        End If

                                        conexion.AddTotblMovimientoInventarioDetalles(detalleAj)
                                        conexion.SaveChanges()

                                        'si ajuste categoria es una entrada, quiere decir que es un agregado o suma a la cantidad existente, por lo tanto descontar de inventario.
                                        If tipoMov.disminuyeInventario = True Then
                                            'restar de inventario y guardar registro de ajuste.
                                            'inve.saldo = inve.saldo - cantidadAjuste
                                            detalle.cantidad = detalle.cantidad - CInt(cantidadAjuste)

                                            'Obtenemos el inventario de se artciulo
                                            Dim inventario As tblInventario = (From x In conexion.tblInventarios
                                                                               Where x.idArticulo = detalle.idArticulo And x.idTipoInventario = mdlPublicVars.General_idTipoInventario
                                                                               Select x).FirstOrDefault

                                            'Aumentamos el saldo del inventario y disminuimos la salida
                                            inventario.saldo += CInt(cantidadAjuste)
                                            inventario.salida -= CInt(cantidadAjuste)

                                            conexion.SaveChanges()
                                        Else
                                            'si ajuste movimiento no es entrada, es una salida se debe agregar la cantidad de ajuste al inventario.
                                            'inve.saldo = inve.saldo + cantidadAjuste
                                            detalle.cantidad = CInt(detalle.cantidad + cantidadAjuste)
                                            conexion.SaveChanges()
                                        End If

                                        If producto.bitKit Then
                                            'Obtenemos la lista del detalle del kit en la tblSalidaDetalle
                                            Dim lSalidaDetalleKit As List(Of tblSalidaDetalle) = (From x In conexion.tblSalidaDetalles Where x.kitSalidaDetalle = iddetalle _
                                                                                                  Select x).ToList

                                            'Recorremos el kit detalle y generamos los ajustes
                                            Dim cantidadAnterior As Integer = 0
                                            For Each salidaDetalleKit As tblSalidaDetalle In lSalidaDetalleKit
                                                cantidadAnterior = CInt(salidaDetalleKit.cantidad / salidaDetalleKit.tblSalidaDetalle2.cantidad)

                                                'Creamos el nuevo detalle del movimiento
                                                Dim detalleAju As New tblMovimientoInventarioDetalle

                                                detalleAju.movimientoInventario = codigoMovPrincipal
                                                detalleAju.articulo = salidaDetalleKit.idArticulo
                                                detalleAju.cantidad = cantidadAjuste * salidaDetalleKit.cantidad
                                                detalleAju.tipoMovimiento = idajustecate
                                                detalleAju.costo = 0
                                                detalleAju.total = 0
                                                detalleAju.salidaDetalle = detalle.idSalidaDetalle

                                                If tipoMov.aumentaInventario = True Then
                                                    detalleAju.entrada = True
                                                    detalleAju.salida = False
                                                ElseIf tipoMov.disminuyeInventario = True Then
                                                    detalleAju.salida = True
                                                    detalleAju.entrada = False
                                                End If

                                                conexion.AddTotblMovimientoInventarioDetalles(detalleAju)
                                                conexion.SaveChanges()

                                                'si ajuste categoria es una entrada, quiere decir que es un agregado o suma a la cantidad existente, por lo tanto descontar de inventario.
                                                If tipoMov.disminuyeInventario = True Then
                                                    If (inve.saldo - (cantidadAjuste * cantidadAnterior)) >= 0 Then
                                                        'restar de inventario y guardar registro de ajuste.
                                                        'inve.saldo = inve.saldo - cantidadAjuste
                                                        salidaDetalleKit.cantidad = CInt(salidaDetalleKit.cantidad - (cantidadAjuste * cantidadAnterior))
                                                        conexion.SaveChanges()
                                                    Else
                                                        'cantidad insuficiente, error !!!
                                                        'no hay existencia.
                                                        alerta.contenido = "Error !!!, Existencia insuficiente de articulo: " + articulo.ToString
                                                        alerta.fnErrorContenido()
                                                        success = False
                                                        Exit Try
                                                    End If
                                                Else
                                                    'si ajuste movimiento no es entrada, es una salida se debe agregar la cantidad de ajuste al inventario.
                                                    'inve.saldo = inve.saldo + cantidadAjuste
                                                    salidaDetalleKit.cantidad = CInt(salidaDetalleKit.cantidad + (cantidadAjuste * cantidadAnterior))
                                                    If detalle.cantidad < 0 Then
                                                        alerta.contenido = "Error !!!, Cantidad no puede ser menor a cero en articulo : " + articulo.ToString
                                                        alerta.fnErrorContenido()
                                                        success = False
                                                        Exit Try
                                                    End If
                                                End If
                                            Next
                                        End If
                                        conexion.SaveChanges()
                                    End If

                                    conexion.SaveChanges()
                                End If
                            End If

                            'Verifiamos si es surtir
                            If idSurtir > 0 Then
                                'Modificamos el pendiente por surtir
                                Dim pendiente As List(Of tblSurtir) = (From x In conexion.tblSurtirs Where x.cliente = salida.idCliente And x.saldo > 0 And x.articulo = detalle.idArticulo Select x Order By x.fechaTransaccion Descending).ToList

                                Dim p As tblSurtir
                                For Each p In pendiente
                                    If cantSurtir > p.saldo Then
                                        cantSurtir -= CInt(p.saldo)
                                        p.saldo = 0

                                    Else
                                        p.saldo -= cantSurtir
                                        cantSurtir = 0
                                    End If
                                    conexion.SaveChanges()
                                    If cantSurtir = 0 Then
                                        Exit For
                                    End If
                                Next
                            ElseIf cantSurtir > 0 Then
                                'Creamos el pendiente por surtir
                                Dim pendiente As New tblSurtir
                                pendiente.salidaDetalle = detalle.idSalidaDetalle
                                pendiente.articulo = detalle.idArticulo
                                pendiente.cantidad = cantSurtir
                                pendiente.saldo = cantSurtir
                                pendiente.fechaTransaccion = fecha
                                pendiente.anulado = False
                                pendiente.usuario = mdlPublicVars.idUsuario
                                pendiente.vendedor = mdlPublicVars.idVendedor
                                pendiente.cliente = salida.idCliente

                                conexion.AddTotblSurtirs(pendiente)
                                conexion.SaveChanges()
                            End If
                        Next
                        conexion.SaveChanges()
                        'paso 8, completar la transaccion.
                        transaction.Complete()

                    Catch ex As System.Data.EntityException
                        success = False
                    Catch ex As Exception
                        success = False
                        If ex.[GetType]() <> GetType(UpdateException) Then
                            Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                            alerta.fnErrorGuardar()
                            Exit Try
                            ' If we get to this point, the operation will be retried. 
                        End If
                    End Try
                End Using
            End If

            If success = True Then
                conexion.AcceptAllChanges()
                alerta.fnGuardar()
                Return True
            Else
                alerta.fnErrorGuardar()
                Return False
            End If

            'cerrar la conexion
            conn.Close()
        End Using
    End Function

    'VERIFICAR CREDITO
    Private Function fnVerificaCredito() As Boolean

        Dim codcliente As Integer = codigoCliente
        If codcliente > 0 Then
            'si retorno = true, el cliente tiene credito pendiente, por lo tanto necesita autorizacion para generar la venta.
            Dim retorno As Boolean = False

            'verificar si venta es credito, 
            'si es credito verificar excedente de credito.
            'If rbnCredito.Checked = True Then
            'consultar cliente.
            Dim cli As tblCliente = (From i In ctx.tblClientes.AsEnumerable Where i.idCliente = codcliente Select i).First()
            'Obtenemos el monto del credito
            Dim credito As Decimal
            Try
                credito = CDec(lblTotal.Text)
            Catch ex As Exception
                credito = 0
            End Try

            'Obtenemos la sumatoria de las venta al cliente, que no esten facturas, ni anuladas, y que esten es estado despachada y al credito
            Dim salidas As Decimal
            Try
                salidas = CDec((From x In ctx.tblSalidas.AsEnumerable Where x.idCliente = cli.idCliente And Not x.anulado _
                           And Not x.empacado And x.despachar And x.credito _
                           Select x.total).Sum)
            Catch ex As Exception
                salidas = 0
            End Try

            'Obtenemos el credito disponible, sobregiro, y sobre pago programado
            Dim creditoDisponible As Decimal = CDec(cli.limiteCredito - (cli.saldo) - salidas)
            Dim sobreGiro As Decimal = CDec((cli.porcentajeCredito / 100) * cli.limiteCredito)

            If credito > (creditoDisponible + sobreGiro) Then
                lblCredito.Visible = True
                lblCredito.Text = "Autorizacion"
                lblFondoCredito.BackColor = Color.Red
            ElseIf credito > (creditoDisponible) Then
                lblCredito.Visible = True
                lblCredito.Text = "Sobregiro"
                lblFondoCredito.BackColor = Color.Yellow
            Else
                lblCredito.Visible = True
                lblCredito.Text = "VENDER!"
                lblFondoCredito.BackColor = Color.Green
            End If

            txtCreditoDisponible.Text = Format((creditoDisponible + sobreGiro) - credito, mdlPublicVars.formatoMoneda)
        Else
            lblCredito.Visible = False
            lblFondoCredito.BackColor = Color.Transparent
        End If
        'End If
        Return True
    End Function

    'IMPORTAR
    Private Sub btnImportar_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImportar.Click
        Try
            If CInt(codigoCliente) > 0 Then
                frmImportar.Text = "Importar"
                frmImportar.cliente = CInt(codigoCliente)
                frmImportar.bitSalida = True
                frmImportar.ShowDialog()

                Dim tblR As DataTable = frmImportar.tblRetorno
                frmImportar.Dispose()
                If tblR.Rows.Count > 0 Then

                    'buscar fila con id en blanco.
                    Dim filaBlanco As Integer = -1

                    Dim index As Integer
                    For index = 0 To Me.grdProductos.Rows.Count - 1
                        If Me.grdProductos.Rows(index).Cells(1).Value Is Nothing Then
                            Me.grdProductos.Rows.RemoveAt(index)
                        ElseIf LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString)).Length = 0 Then
                            filaBlanco = index
                        ElseIf LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString)).Length = 1 And CDbl(LTrim(RTrim(Me.grdProductos.Rows(index).Cells("id").Value.ToString))) = 0 Then
                            filaBlanco = index
                        End If
                    Next

                    Dim inicio As Integer = 0

                    If filaBlanco <> -1 Then
                        'agregar al grid si nueva fila.
                        Me.grdProductos.Rows(filaBlanco).Cells("id").Value = tblR.Rows(0).Item("Id")
                        Me.grdProductos.Rows(filaBlanco).Cells("txmCodigo").Value = tblR.Rows(0).Item("Codigo")
                        Me.grdProductos.Rows(filaBlanco).Cells("txbProducto").Value = tblR.Rows(0).Item("Nombre")
                        Me.grdProductos.Rows(filaBlanco).Cells("txmCantidad").Value = tblR.Rows(0).Item("Cantidad")
                        Me.grdProductos.Rows(filaBlanco).Cells("txbPrecio").Value = tblR.Rows(0).Item("Costo")
                        inicio = 1
                    End If

                    'agregar los elementos restantes al grid.
                    For index = inicio To tblR.Rows.Count - 1
                        Me.grdProductos.Rows.Add(0, tblR.Rows(index).Item("id"), tblR.Rows(index).Item("Codigo"), tblR.Rows(index).Item("Nombre"),
                                                 tblR.Rows(index).Item("Cantidad"), tblR.Rows(index).Item("Costo"), 0, False, "", 0, "", "", 0, 0, 0,
                                                 mdlPublicVars.General_idTipoInventario, mdlPublicVars.Empresa_PrecioNormal)
                    Next
                    fnActualizar_Total()
                    Me.grdProductos.Rows.AddNew()
                End If
            Else
                RadMessageBox.Show("Debe seleccionar un cliente", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Info)
                'cmbCliente.Focus()
            End If
        Catch ex As Exception
            RadMessageBox.Show(ex.Message, mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
        End Try
    End Sub

    'COTIZAR A DESPACHAR
    Public Function CambiacotizarAdespacho(ByVal codigo As Integer, ByVal EsCredito As Boolean, ByVal CodCliente As Integer) As Boolean
        'variables para errores.
        Dim success As Boolean = True
        Dim errContenido As String = ""
        Dim fecha As DateTime = CType(fnFecha_horaServidor(), DateTime)

        'Variables para Guardar los resultado de las Consultas, El de Salidadetalle, ArticuloEmpresa y cada fila del Detalle...
        Dim ArtEmpresa As tblInventario

        'Variable para guardar temporalmene el codigo del articulo y la cantidad solicitada..
        Dim NombreArt As String
        Dim CodArticulo As Integer
        Dim Pedido As Integer
        Dim saldo As Integer
        Dim tInventario As Integer

        Dim Detalles As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles.AsEnumerable
                                                     Join y In ctx.tblArticuloes On x.idArticulo Equals y.idArticulo
                                                     Where x.idSalida = codigo And Not x.anulado
                                                     Select x).ToList

        'Entramos a revisar cada registro en detalle de salida, si existe un articulo que no cubre existencia se guarda el error.
        For Each fila As tblSalidaDetalle In Detalles
            NombreArt = fila.tblArticulo.nombre1
            CodArticulo = fila.idArticulo
            Pedido = fila.cantidad
            tInventario = CInt(fila.tipoInventario)

            'Se Consulta en la tabla ArticulosEmpresa para consusltar la existencia real  "Saldo".
            ArtEmpresa = (From AE In ctx.tblInventarios Where AE.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                          And AE.idArticulo = CodArticulo And AE.idTipoInventario = tInventario Select AE).First

            If ArtEmpresa.saldo < Pedido Then
                saldo = CInt(Pedido - ArtEmpresa.saldo)
                'Guardamos el error con los datos del producto en una variable para q se agruen todos lo productos que tengan error.
                errContenido = errContenido & "El articulo: " & NombreArt & ", Codigo: " & fila.tblArticulo.codigo1 & vbCrLf & ", Pedido " & Pedido.ToString & " en existencia " & ArtEmpresa.saldo.ToString & ", Faltantes " & saldo & vbCrLf
                success = False
            End If
        Next

        'Si existe un error mandamos el mensaje e interrumpimos la aplicación
        If success = False Then
            alerta.contenido = errContenido
            alerta.fnFaltantes()
        End If

        Using transaction As New TransactionScope
            Try
                'VERIFICAR CREDITO.
                If success = False Then
                    Exit Try
                End If

                'crear registro de salida bodega.
                Dim sb As New tblsalidaBodega
                sb.idsalida = codigo
                ctx.AddTotblsalidaBodegas(sb)
                ctx.SaveChanges()

                'Se Consulta en la tabla Salida y se cambia el estado de Despachado a True.
                Dim salida As tblSalida = (From x In ctx.tblSalidas _
                                              Where x.idSalida = codigo Select x).First

                'pasar despachar a true
                If EsCredito = True Then
                    Dim fechaVencimiento As DateTime = CType(mdlPublicVars.fnFecha_horaServidor, DateTime)
                    Dim dia As Integer = Weekday(fechaVencimiento, vbMonday)
                    Dim cli As tblCliente = (From x In ctx.tblClientes Where x.idCliente = CodCliente Select x).First
                    Dim diasCredito As Integer = (From x In ctx.tblClienteTipoPagoes Where x.idtipoPago = cli.idTipoPago Select x.dias).First

                    If diasCredito = 5 Then
                        If dia = 1 Then
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito)
                        Else
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 1)
                        End If
                    End If

                    If diasCredito = 20 Then
                        If dia >= 1 And dia <= 4 Then
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 3)
                        Else
                            salida.fechaVencimientoCredito = fechaVencimiento.AddDays(diasCredito + 4)
                        End If
                    End If
                End If
                salida.despachar = True
                salida.fechaDespachado = fecha
                ctx.SaveChanges()

                'Entramos y modificamos a cada registro en detalle de salida, empezamos a cambiar el saldo del producto en inventario.
                Dim idInventario As Integer = 0
                Dim idDetalle As Integer = 0
                For Each fila As tblSalidaDetalle In Detalles
                    CodArticulo = fila.idArticulo
                    Pedido = fila.cantidad
                    idInventario = CInt(fila.tipoInventario)
                    idDetalle = fila.idSalidaDetalle
                    If fila.tblArticulo.bitKit Then
                        'Obtenemos la lista de los productos asociados a ese kit
                        Dim lDetalleKit As List(Of tblSalidaDetalle) = (From x In ctx.tblSalidaDetalles Where x.kitSalidaDetalle = idDetalle _
                                                                       Select x).ToList

                        For Each detallekit As tblSalidaDetalle In lDetalleKit
                            'descontar existencias.
                            Dim codArtKit As Integer = detallekit.idArticulo
                            Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                         And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                         And x.idArticulo = codArtKit Select x).FirstOrDefault

                            'si es reserva, incrementar la reserva , y decrementar el saldo
                            If inve.saldo >= (fila.cantidad * detallekit.cantidad) Then
                                inve.saldo = inve.saldo - (fila.cantidad * detallekit.cantidad)
                                inve.salida = inve.salida + (fila.cantidad * detallekit.cantidad)
                                ctx.SaveChanges()
                            Else
                                alerta.contenido = "Error !!!, Existencia insuficiente en Kit, articulo: " + detallekit.tblArticulo.nombre1
                                alerta.fnErrorContenido()
                                success = False
                                Exit Try
                            End If
                        Next
                    ElseIf fila.tblArticulo.bitProducto Then

                        'descontar existencias.
                        Dim inve As tblInventario = (From x In ctx.tblInventarios Where x.tblArticulo.empresa = mdlPublicVars.idEmpresa _
                                                     And x.idTipoInventario = idInventario And x.IdAlmacen = mdlPublicVars.General_idAlmacenPrincipal _
                                                     And x.idArticulo = CodArticulo Select x).FirstOrDefault

                        'descontamos del inventario
                        If inve.saldo >= fila.cantidad Then
                            inve.saldo = inve.saldo - fila.cantidad
                            inve.salida += fila.cantidad
                            ctx.SaveChanges()
                        Else
                            alerta.contenido = "Error !!!, Existencia insuficiente " & fila.tblArticulo.nombre1
                            alerta.fnErrorContenido()
                            success = False
                            Exit Try
                        End If
                    End If

                    'Verificamos si tiene pendientes por pedir
                    Dim lPendientes As List(Of tblPendientePorPedir) = (From x In ctx.tblPendientePorPedirs
                                                                         Where x.bitCreado And Not x.anulado And x.saldo > 0 And x.articulo = CodArticulo
                                                                         Select x).ToList
                    Dim cantidadDescontar As Integer = fila.cantidad
                    'Recorremos la lista de pendientes
                    For Each pendiente As tblPendientePorPedir In lPendientes

                        If cantidadDescontar > pendiente.saldo Then
                            cantidadDescontar = CInt(cantidadDescontar - pendiente.saldo)
                            pendiente.saldo = 0

                        Else
                            pendiente.saldo -= cantidadDescontar
                            cantidadDescontar = 0
                        End If
                        ctx.SaveChanges()
                        If cantidadDescontar = 0 Then
                            Exit For
                        End If
                    Next
                Next

                'completar la transaccion.
                transaction.Complete()
            Catch ex As System.Data.EntityException
            Catch ex As Exception
                If ex.[GetType]() <> GetType(UpdateException) Then
                    Console.WriteLine(("An error occured. " & "The operation cannot be retried.") + ex.Message)
                    alerta.fnErrorGuardar()
                    Exit Try
                End If
            End Try
        End Using

        If success = True Then
            ctx.AcceptAllChanges()
            alerta.fnGuardar()
        Else
            Console.WriteLine("La operacion no pudo ser completada")
        End If

        Return success
    End Function

#End Region

End Class