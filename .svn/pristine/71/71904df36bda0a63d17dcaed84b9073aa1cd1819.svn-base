Imports System.Linq
Imports System.IO
Imports System.Data
Imports System.Data.SqlClient
Imports Telerik.WinControls
Imports System.Transactions
Imports System.Data.EntityClient



Public Class frmPagoVentaPequenia

    Private _codigosalidaAFacturar As Integer 'salida a cobrar
    Private _totalVenta As Double
    Private idCliente As Integer
    Private _acreditaciones As Double


    Public Property codigosalidaAFacturar() As Integer
        Get
            codigosalidaAFacturar = _codigosalidaAFacturar
        End Get
        Set(value As Integer)
            _codigosalidaAFacturar = value
        End Set
    End Property

    Public Property totalVenta() As Double
        Get
            totalVenta = _totalVenta
        End Get
        Set(value As Double)
            _totalVenta = value
        End Set
    End Property

    Public Property acreditaciones() As Double
        Get
            acreditaciones = _acreditaciones
        End Get
        Set(value As Double)
            _acreditaciones = value
        End Set
    End Property


    Private Sub frmPagoVentaPequenia_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        llenarDatos()

    End Sub

    Private Sub llenarDatos()

        Dim consulta = Nothing
        'conexion nueva.
        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            Try
                consulta = (From x In conexion.tblTipoPagoes Where x.entrada = True And Not x.caja Select codigo = x.codigo, nombre = x.nombre)

                With cmbTipoPago
                    .DataSource = Nothing
                    .ValueMember = "codigo"
                    .DisplayMember = "nombre"
                    .DataSource = consulta
                End With

                Dim salida As tblSalida = (From s In conexion.tblSalidas Where s.idSalida = codigosalidaAFacturar Select s).FirstOrDefault

                txtDocumento.Text = salida.documento

                totalVenta = salida.total
                lblTotalVenta.Text = Format(totalVenta, mdlPublicVars.formatoMoneda)

                acreditaciones = salida.tblCliente.devoluciones
                lblAcreditacion.Text = Format(acreditaciones, mdlPublicVars.formatoMoneda)

                idCliente = salida.idCliente

                'si acreditaciones es mayor a lo comprado ocultamos el txtmontoRecibido
                If acreditaciones >= totalVenta Then
                    txtMontoRecibido.Visible = False
                End If


            Catch ex As Exception

            End Try

            'liberar la conexion.
            conn.Close()
        End Using



        '"Q " & Decimal.Round(CType(totalVenta, Decimal), 2)
        Me.txtMontoRecibido.Focus()
    End Sub


    Private Sub btnAceptar_Click(sender As Object, e As EventArgs) Handles btnAceptar.Click
        If fnErrores() Then
            RadMessageBox.Show("Monto recibido es menor a la venta", mdlPublicVars.nombreSistema, MessageBoxButtons.OK, RadMessageIcon.Error)
            Exit Sub
        End If

        Dim tipoPago As Integer

        Dim fechaPago As DateTime = fnFecha_horaServidor()
        '  Dim cliente As Integer

        Dim success As Boolean = True

        Dim conexion As New dsi_pos_demoEntities

        Using conn As EntityConnection = New EntityConnection(mdlPublicVars.entityBuilder.ToString)
            conn.Open()
            conexion = New dsi_pos_demoEntities(mdlPublicVars.entityBuilder.ConnectionString)

            'crear el encabezado de la transaccion
            Using transaction As New TransactionScope
                Try

                    Dim pago As New tblCaja

                    tipoPago = cmbTipoPago.SelectedValue

                    Dim pagoTipo As tblTipoPago = (From p In conexion.tblTipoPagoes Where p.codigo = tipoPago Select p).FirstOrDefault

                    'seleccionamos la salida para obtener el idclietne
                    Dim salida As tblSalida = (From s In conexion.tblSalidas Where s.idSalida = codigosalidaAFacturar Select s).FirstOrDefault

                    pago.tipoPago = cmbTipoPago.SelectedValue
                    pago.empresa = mdlPublicVars.idEmpresa
                    pago.fecha = fechaPago
                    pago.fechaTransaccion = fechaPago
                    pago.monto = totalVenta

                    'salida que se paga
                    pago.codigoSalida = codigosalidaAFacturar

                    If pagoTipo.calendarizada Then
                        pago.transito = 1
                        pago.confirmado = 0
                    Else
                        pago.transito = 0
                        pago.confirmado = 1
                        pago.fechaCobro = fechaPago
                    End If
                    pago.documento = txtDocumentoPago.Text
                    pago.usuario = mdlPublicVars.idUsuario
                    pago.anulado = False
                    pago.cliente = salida.idCliente
                    pago.descripcion = cmbTipoPago.Text
                    pago.bitRechazado = False
                    pago.bitEntrada = True
                    pago.bitSalida = False
                    pago.codigoSalida = codigosalidaAFacturar

                    conexion.AddTotblCajas(pago)
                    conexion.SaveChanges()

                    mdlPublicVars.superSearchCodigoPagoVentaPequenia = pago.codigo

                    'Actualizamos los pagos del cliente
                    Dim cliente As tblCliente = (From c In conexion.tblClientes Where c.idCliente = idCliente Select c).FirstOrDefault

                    If pagoTipo.calendarizada Then
                        cliente.pagosTransito += totalVenta
                    Else
                        cliente.pagos += totalVenta
                        cliente.saldo -= totalVenta  'Ak le descontamos el saldo ya que al facturar se incrementa el saldo--
                    End If
                    cliente.fechaUltimoPago = fechaPago

                    'descotamos las devoluciones del cliente
                    If (acreditaciones >= totalVenta) Then
                        cliente.devoluciones -= totalVenta
                    End If

                    cliente.devoluciones -= acreditaciones

                    conexion.SaveChanges()

                    transaction.Complete()

                Catch ex As Exception
                    success = False

                End Try
            End Using

            If success = True Then
                conexion.AcceptAllChanges()
                alerta.fnGuardar()
                mdlPublicVars.bitCrearFacturaVentaPequenia = True

                Me.Close()

            Else
                alerta.fnErrorGuardar()

            End If

            conn.Close()

        End Using

    End Sub

    Private Function fnErrores() As Boolean
        Dim er As Boolean = False

        totalVenta = Decimal.Round(CType(Replace(lblTotalVenta.Text, "Q", "").Trim, Decimal), 2)

        Try

            If acreditaciones < totalVenta Then

                If Trim(txtMontoRecibido.Text = "") Then
                    er = True
                Else

                    If Nz(Trim(txtMontoRecibido.Text) + acreditaciones) < totalVenta Then
                        er = True


                    End If
                End If
            End If

        Catch ex As Exception
            alerta.fnError()
            er = True


        End Try

        Return er

    End Function

    Private Sub fnSalida() Handles Me.panel0
        Me.Close()
    End Sub

    Private Sub txtMontoRecibido_TextChanged(sender As Object, e As EventArgs) Handles txtMontoRecibido.TextChanged

        Try

            If Not txtMontoRecibido.Enabled Then
                Me.lblCambio.Text = Format(0, mdlPublicVars.formatoMoneda)
            Else

                Me.lblCambio.Text = Format((CDbl(Me.txtMontoRecibido.Text) - totalVenta), mdlPublicVars.formatoMoneda)
            End If
        Catch ex As Exception
            Me.lblCambio.Text = Format(0, mdlPublicVars.formatoMoneda)
        End Try


    End Sub
End Class
