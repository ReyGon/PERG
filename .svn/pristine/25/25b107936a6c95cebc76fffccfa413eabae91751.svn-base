'------------------------------------------------------------------------------
' Clase clsCtaCobrarDetalle generada automáticamente con CrearClaseSQL
' de la tabla 'tblCtaCobrarDetalle' de la base 'laFuente'
' Fecha: 06/may/2008 10:38:30
'
' ©Guillermo 'guille' Som, 2004-2008
'------------------------------------------------------------------------------
Option Strict On
Option Explicit On
'
Imports System
Imports System.Data
Imports System.Data.SqlClient
'
Public Class clsCtaCobrarDetalle
    ' Las variables privadas
    ' TODO: Revisar los tipos de los campos
    Private _idCtaCobrar As System.Int32
    Private _idCtaCobrarDetalle As System.Int32
    Private _fecha As System.DateTime
    Private _monto As System.Decimal
    Private _observacion As System.String
    Private _idUsuario As System.Int16
    '
    ' Este método se usará para ajustar los anchos de las propiedades
    Private Function ajustarAncho(ByVal cadena As String, ByVal ancho As Integer) As String
        Dim sb As New System.Text.StringBuilder(New String(" "c, ancho))
        ' devolver la cadena quitando los espacios en blanco
        ' esto asegura que no se devolverá un tamaño mayor ni espacios "extras"
        Return (cadena & sb.ToString()).Substring(0, ancho).Trim()
    End Function
    '
    ' Las propiedades públicas
    ' TODO: Revisar los tipos de las propiedades
    Public Property idCtaCobrar() As System.Int32
        Get
            Return _idCtaCobrar
        End Get
        Set(ByVal value As System.Int32)
            _idCtaCobrar = value
        End Set
    End Property
    Public Property idCtaCobrarDetalle() As System.Int32
        Get
            Return _idCtaCobrarDetalle
        End Get
        Set(ByVal value As System.Int32)
            _idCtaCobrarDetalle = value
        End Set
    End Property
    Public Property fecha() As System.DateTime
        Get
            Return _fecha
        End Get
        Set(ByVal value As System.DateTime)
            _fecha = value
        End Set
    End Property
    Public Property monto() As System.Decimal
        Get
            Return _monto
        End Get
        Set(ByVal value As System.Decimal)
            _monto = value
        End Set
    End Property
    Public Property observacion() As System.String
        Get
            Return ajustarAncho(_observacion, 100)
        End Get
        Set(ByVal value As System.String)
            _observacion = value
        End Set
    End Property
    Public Property idUsuario() As System.Int16
        Get
            Return _idUsuario
        End Get
        Set(ByVal value As System.Int16)
            _idUsuario = value
        End Set
    End Property
    '
    Default Public Property Item(ByVal index As Integer) As String
        ' Devuelve el contenido del campo indicado en index
        ' (el índice corresponde con la columna de la tabla)
        Get
            If index = 0 Then
                Return Me.idCtaCobrar.ToString()
            ElseIf index = 1 Then
                Return Me.idCtaCobrarDetalle.ToString()
            ElseIf index = 2 Then
                Return Me.fecha.ToString()
            ElseIf index = 3 Then
                Return Me.monto.ToString()
            ElseIf index = 4 Then
                Return Me.observacion.ToString()
            ElseIf index = 5 Then
                Return Me.idUsuario.ToString()
            End If
            ' Para que no de error el compilador de C#
            Return ""
        End Get
        Set(ByVal value As String)
            If index = 0 Then
                Try
                    Me.idCtaCobrar = System.Int32.Parse("0" & value)
                Catch
                    Me.idCtaCobrar = System.Int32.Parse("0")
                End Try
            ElseIf index = 1 Then
                Try
                    Me.idCtaCobrarDetalle = System.Int32.Parse("0" & value)
                Catch
                    Me.idCtaCobrarDetalle = System.Int32.Parse("0")
                End Try
            ElseIf index = 2 Then
                Try
                    Me.fecha = System.DateTime.Parse(value)
                Catch
                    ' TODO: Usa el valor de fecha que quieras predeterminar
                    '       Una fecha ficticia:
                    'Me.fecha = New System.DateTime(1900, 1, 1)
                    '       o la fecha de hoy:
                    Me.fecha = System.DateTime.Now
                End Try
            ElseIf index = 3 Then
                Try
                    Me.monto = System.Decimal.Parse("0" & value)
                Catch
                    Me.monto = System.Decimal.Parse("0")
                End Try
            ElseIf index = 4 Then
                Me.observacion = value
            ElseIf index = 5 Then
                Try
                    Me.idUsuario = System.Int16.Parse("0" & value)
                Catch
                    Me.idUsuario = System.Int16.Parse("0")
                End Try
            End If
        End Set
    End Property
    Default Public Property Item(ByVal index As String) As String
        ' Devuelve el contenido del campo indicado en index
        ' (el índice corresponde al nombre de la columna)
        Get
            If index = "idCtaCobrar" Then
                Return Me.idCtaCobrar.ToString()
            ElseIf index = "idCtaCobrarDetalle" Then
                Return Me.idCtaCobrarDetalle.ToString()
            ElseIf index = "fecha" Then
                Return Me.fecha.ToString()
            ElseIf index = "monto" Then
                Return Me.monto.ToString()
            ElseIf index = "observacion" Then
                Return Me.observacion.ToString()
            ElseIf index = "idUsuario" Then
                Return Me.idUsuario.ToString()
            End If
            ' Para que no de error el compilador de C#
            Return ""
        End Get
        Set(ByVal value As String)
            If index = "idCtaCobrar" Then
                Try
                    Me.idCtaCobrar = System.Int32.Parse("0" & value)
                Catch
                    Me.idCtaCobrar = System.Int32.Parse("0")
                End Try
            ElseIf index = "idCtaCobrarDetalle" Then
                Try
                    Me.idCtaCobrarDetalle = System.Int32.Parse("0" & value)
                Catch
                    Me.idCtaCobrarDetalle = System.Int32.Parse("0")
                End Try
            ElseIf index = "fecha" Then
                Try
                    Me.fecha = System.DateTime.Parse(value)
                Catch
                    ' TODO: Usa el valor de fecha que quieras predeterminar
                    '       Una fecha ficticia:
                    'Me.fecha = New System.DateTime(1900, 1, 1)
                    '       o la fecha de hoy:
                    Me.fecha = System.DateTime.Now
                End Try
            ElseIf index = "monto" Then
                Try
                    Me.monto = System.Decimal.Parse("0" & value)
                Catch
                    Me.monto = System.Decimal.Parse("0")
                End Try
            ElseIf index = "observacion" Then
                Me.observacion = value
            ElseIf index = "idUsuario" Then
                Try
                    Me.idUsuario = System.Int16.Parse("0" & value)
                Catch
                    Me.idUsuario = System.Int16.Parse("0")
                End Try
            End If
        End Set
    End Property
    '
    ' Campos y métodos compartidos (estáticos) para gestionar la base de datos
    '
    ' La cadena de conexión a la base de datos
    Private Shared cadenaConexion As String = mdlPublicVars.cnn
    ' La cadena de selección
    Public Shared CadenaSelect As String = "SELECT * FROM tblCtaCobrarDetalle"
    '
    Public Sub New()
    End Sub
    Public Sub New(ByVal conex As String)
        cadenaConexion = conex
    End Sub
    '
    ' Métodos compartidos (estáticos) privados
    '
    ' asigna una fila de la tabla a un objeto clsCtaCobrarDetalle
    Private Shared Function row2clsCtaCobrarDetalle(ByVal r As DataRow) As clsCtaCobrarDetalle
        ' asigna a un objeto clsCtaCobrarDetalle los datos del dataRow indicado
        Dim oclsCtaCobrarDetalle As New clsCtaCobrarDetalle
        '
        oclsCtaCobrarDetalle.idCtaCobrar = System.Int32.Parse("0" & r("idCtaCobrar").ToString())
        oclsCtaCobrarDetalle.idCtaCobrarDetalle = System.Int32.Parse("0" & r("idCtaCobrarDetalle").ToString())
        Try
            oclsCtaCobrarDetalle.fecha = DateTime.Parse(r("fecha").ToString())
        Catch
            ' TODO: Usa el valor de fecha que quieras predeterminar
            '       Una fecha ficticia:
            'oclsCtaCobrarDetalle.fecha = New DateTime(1900, 1, 1)
            '       o la fecha de hoy:
            oclsCtaCobrarDetalle.fecha = DateTime.Now
        End Try
        oclsCtaCobrarDetalle.monto = System.Decimal.Parse("0" & r("monto").ToString())
        oclsCtaCobrarDetalle.observacion = r("observacion").ToString()
        oclsCtaCobrarDetalle.idUsuario = System.Int16.Parse("0" & r("idUsuario").ToString())
        '
        Return oclsCtaCobrarDetalle
    End Function
    '
    ' asigna un objeto clsCtaCobrarDetalle a la fila indicada
    Private Shared Sub clsCtaCobrarDetalle2Row(ByVal oclsCtaCobrarDetalle As clsCtaCobrarDetalle, ByVal r As DataRow)
        ' asigna un objeto clsCtaCobrarDetalle al dataRow indicado
        r("idCtaCobrar") = oclsCtaCobrarDetalle.idCtaCobrar
        ' TODO: Comprueba si esta asignación debe hacerse
        '       pero mejor lo dejas comentado ya que es un campo autoincremental o único
        'r("idCtaCobrarDetalle") = oclsCtaCobrarDetalle.idCtaCobrarDetalle
        r("fecha") = oclsCtaCobrarDetalle.fecha
        r("monto") = oclsCtaCobrarDetalle.monto
        r("observacion") = oclsCtaCobrarDetalle.observacion
        r("idUsuario") = oclsCtaCobrarDetalle.idUsuario
    End Sub
    '
    ' crea una nueva fila y la asigna a un objeto clsCtaCobrarDetalle
    Private Shared Sub nuevoclsCtaCobrarDetalle(ByVal dt As DataTable, ByVal oclsCtaCobrarDetalle As clsCtaCobrarDetalle)
        ' Crear un nuevo clsCtaCobrarDetalle
        Dim dr As DataRow = dt.NewRow()
        Dim oc As clsCtaCobrarDetalle = row2clsCtaCobrarDetalle(dr)
        '
        oc.idCtaCobrar = oclsCtaCobrarDetalle.idCtaCobrar
        oc.idCtaCobrarDetalle = oclsCtaCobrarDetalle.idCtaCobrarDetalle
        oc.fecha = oclsCtaCobrarDetalle.fecha
        oc.monto = oclsCtaCobrarDetalle.monto
        oc.observacion = oclsCtaCobrarDetalle.observacion
        oc.idUsuario = oclsCtaCobrarDetalle.idUsuario
        '
        clsCtaCobrarDetalle2Row(oc, dr)
        '
        dt.Rows.Add(dr)
    End Sub
    '
    ' Métodos públicos
    '
    ' devuelve una tabla con los datos indicados en la cadena de selección
    Public Shared Function Tabla() As DataTable
        Return Tabla(CadenaSelect)
    End Function
    Public Shared Function Tabla(ByVal sel As String) As DataTable
        ' devuelve una tabla con los datos de la tabla tblCtaCobrarDetalle
        Dim da As SqlDataAdapter
        Dim dt As New DataTable("clsCtaCobrarDetalle")
        '
        Try
            da = New SqlDataAdapter(sel, cadenaConexion)
            da.Fill(dt)
        Catch
            Return Nothing
        End Try
        '
        Return dt
    End Function
    '
    Public Shared Function Buscar(ByVal sWhere As String) As clsCtaCobrarDetalle
        ' Busca en la tabla los datos indicados en el parámetro
        ' el parámetro contendrá lo que se usará después del WHERE
        Dim oclsCtaCobrarDetalle As clsCtaCobrarDetalle = Nothing
        Dim da As SqlDataAdapter
        Dim dt As New DataTable("clsCtaCobrarDetalle")
        Dim sel As String = "SELECT * FROM tblCtaCobrarDetalle WHERE " & sWhere
        '
        da = New SqlDataAdapter(sel, cadenaConexion)
        da.Fill(dt)
        '
        If dt.Rows.Count > 0 Then
            oclsCtaCobrarDetalle = row2clsCtaCobrarDetalle(dt.Rows(0))
        End If
        Return oclsCtaCobrarDetalle
    End Function
    '
    ' Actualizar: Actualiza los datos en la tabla usando la instancia actual
    '             Si la instancia no hace referencia a un registro existente, se creará uno nuevo
    '             Para comprobar si el objeto en memoria coincide con uno existente,
    '             se comprueba si el idCtaCobrarDetalle existe en la tabla.
    '             TODO: Si en lugar de idCtaCobrarDetalle usas otro campo, indicalo en la cadena SELECT
    '                   También puedes usar la sobrecarga en la que se indica la cadena SELECT a usar
    Public Function Actualizar() As String
        ' TODO: Poner aquí la selección a realizar para acceder a este registro
        '       yo uso el idCtaCobrarDetalle que es el identificador único de cada registro
        Dim sel As String = "SELECT * FROM tblCtaCobrarDetalle WHERE idCtaCobrarDetalle = " & Me.idCtaCobrarDetalle.ToString()
        Return Actualizar(sel)
    End Function
    Public Function Actualizar(ByVal sel As String) As String
        ' Actualiza los datos indicados
        ' El parámetro, que es una cadena de selección, indicará el criterio de actualización
        '
        ' En caso de error, devolverá la cadena empezando por ERROR.
        Dim cnn As SqlConnection
        Dim da As SqlDataAdapter
        Dim dt As New DataTable("clsCtaCobrarDetalle")
        '
        cnn = New SqlConnection(cadenaConexion)
        'da = New SqlDataAdapter(CadenaSelect, cnn)
        da = New SqlDataAdapter(sel, cnn)
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey
        '
        '-------------------------------------------
        ' Esta no es la más óptima, pero funcionará
        '-------------------------------------------
        'Dim cb As New SqlCommandBuilder(da)
        'da.UpdateCommand = cb.GetUpdateCommand()
        '
        '--------------------------------------------------------------------
        ' Esta está más optimizada pero debes comprobar que funciona bien...
        '--------------------------------------------------------------------
        Dim sCommand As String
        '
        ' El comando UPDATE
        ' TODO: Comprobar cual es el campo de índice principal (sin duplicados)
        '       Yo compruebo que sea un campo llamado idCtaCobrarDetalle, pero en tu caso puede ser otro
        '       Ese campo, (en mi caso idCtaCobrarDetalle) será el que hay que poner al final junto al WHERE.
        sCommand = "UPDATE tblCtaCobrarDetalle SET idCtaCobrar = @idCtaCobrar, fecha = @fecha, monto = @monto, observacion = @observacion, idUsuario = @idUsuario  WHERE (idCtaCobrarDetalle = @idCtaCobrarDetalle)"
        da.UpdateCommand = New SqlCommand(sCommand, cnn)
        ' TODO: Comprobar el tipo de datos a usar...
        da.UpdateCommand.Parameters.Add("@idCtaCobrar", SqlDbType.Int, 0, "idCtaCobrar")
        ' TODO: Comprobar el tipo de datos a usar...
        da.UpdateCommand.Parameters.Add("@idCtaCobrarDetalle", SqlDbType.Int, 0, "idCtaCobrarDetalle")
        ' TODO: Comprobar el tipo de datos a usar...
        da.UpdateCommand.Parameters.Add("@fecha", SqlDbType.DateTime, 0, "fecha")
        ' TODO: Comprobar el tipo de datos a usar...
        da.UpdateCommand.Parameters.Add("@monto", SqlDbType.Decimal, 0, "monto")
        da.UpdateCommand.Parameters.Add("@observacion", SqlDbType.NVarChar, 100, "observacion")
        ' TODO: Comprobar el tipo de datos a usar...
        da.UpdateCommand.Parameters.Add("@idUsuario", SqlDbType.SmallInt, 0, "idUsuario")
        '
        Try
            da.Fill(dt)
        Catch ex As Exception
            Return "ERROR: " & ex.Message
        End Try
        '
        If dt.Rows.Count = 0 Then
            ' crear uno nuevo
            Return Crear()
        Else
            clsCtaCobrarDetalle2Row(Me, dt.Rows(0))
        End If
        '
        Try
            da.Update(dt)
            dt.AcceptChanges()
            Return "Actualizado correctamente"
        Catch ex As Exception
            Return "ERROR: " & ex.Message
        End Try
    End Function
    '
    Public Function Crear() As String
        ' Crear un nuevo registro
        ' En caso de error, devolverá la cadena de error empezando por ERROR:.
        Dim cnn As SqlConnection
        Dim da As SqlDataAdapter
        Dim dt As New DataTable("clsCtaCobrarDetalle")
        '
        cnn = New SqlConnection(cadenaConexion)
        da = New SqlDataAdapter(CadenaSelect, cnn)
        'da = New SqlDataAdapter(CadenaSelect, cadenaConexion)
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey
        '
        '-------------------------------------------
        ' Esta no es la más óptima, pero funcionará
        '-------------------------------------------
        'Dim cb As New SqlCommandBuilder(da)
        'da.InsertCommand = cb.GetInsertCommand()
        '
        '--------------------------------------------------------------------
        ' Esta está más optimizada pero debes comprobar que funciona bien...
        '--------------------------------------------------------------------
        Dim sCommand As String
        '
        ' El comando INSERT
        ' TODO: No incluir el campo de clave primaria incremental
        '       Yo compruebo que sea un campo llamado idCtaCobrarDetalle, pero en tu caso puede ser otro
        sCommand = "INSERT INTO tblCtaCobrarDetalle (idCtaCobrar, fecha, monto, observacion, idUsuario)  VALUES(@idCtaCobrar, @fecha, @monto, @observacion, @idUsuario)"
        da.InsertCommand = New SqlCommand(sCommand, cnn)
        ' TODO: Comprobar el tipo de datos a usar...
        da.InsertCommand.Parameters.Add("@idCtaCobrar", SqlDbType.Int, 0, "idCtaCobrar")
        ' TODO: Comprobar el tipo de datos a usar...
        da.InsertCommand.Parameters.Add("@idCtaCobrarDetalle", SqlDbType.Int, 0, "idCtaCobrarDetalle")
        ' TODO: Comprobar el tipo de datos a usar...
        da.InsertCommand.Parameters.Add("@fecha", SqlDbType.DateTime, 0, "fecha")
        ' TODO: Comprobar el tipo de datos a usar...
        da.InsertCommand.Parameters.Add("@monto", SqlDbType.Decimal, 0, "monto")
        da.InsertCommand.Parameters.Add("@observacion", SqlDbType.NVarChar, 100, "observacion")
        ' TODO: Comprobar el tipo de datos a usar...
        da.InsertCommand.Parameters.Add("@idUsuario", SqlDbType.SmallInt, 0, "idUsuario")
        '
        '
        Try
            da.Fill(dt)
        Catch ex As Exception
            Return "ERROR: " & ex.Message
        End Try
        '
        nuevoclsCtaCobrarDetalle(dt, Me)
        '
        Try
            da.Update(dt)
            dt.AcceptChanges()
            Return "Se ha creado un nuevo clsCtaCobrarDetalle"
        Catch ex As Exception
            Return "ERROR: " & ex.Message
        End Try
    End Function
    '
    Public Function Borrar() As String
        ' TODO: Poner aquí la selección a realizar para acceder a este registro
        '       yo uso el idCtaCobrarDetalle que es el identificador único de cada registro
        Dim sel As String = "SELECT * FROM tblCtaCobrarDetalle WHERE idCtaCobrarDetalle = " & Me.idCtaCobrarDetalle.ToString()
        '
        Return Borrar(sel)
    End Function
    Public Function Borrar(ByVal sel As String) As String
        ' Borrar el registro al que apunta esta clase
        ' En caso de error, devolverá la cadena de error empezando por ERROR:.
        Dim cnn As SqlConnection
        Dim da As SqlDataAdapter
        Dim dt As New DataTable("clsCtaCobrarDetalle")
        '
        cnn = New SqlConnection(cadenaConexion)
        da = New SqlDataAdapter(sel, cnn)
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey
        '
        '-------------------------------------------
        ' Esta no es la más óptima, pero funcionará
        '-------------------------------------------
        'Dim cb As New SqlCommandBuilder(da)
        'da.DeleteCommand = cb.GetDeleteCommand()
        '
        '
        '--------------------------------------------------------------------
        ' Esta está más optimizada pero debes comprobar que funciona bien...
        '--------------------------------------------------------------------
        Dim sCommand As String
        '
        ' El comando DELETE
        ' TODO: Sólo incluir el campo de clave primaria incremental
        '       Yo compruebo que sea un campo llamado idCtaCobrarDetalle, pero en tu caso puede ser otro
        sCommand = "DELETE FROM tblCtaCobrarDetalle WHERE (idCtaCobrarDetalle = @p1)"
        da.DeleteCommand = New SqlCommand(sCommand, cnn)
        ' TODO: Comprobar el tipo de datos a usar...
        da.DeleteCommand.Parameters.Add("@p1", SqlDbType.Int, 0, "idCtaCobrarDetalle")
        'da.DeleteCommand.Parameters.Add("@p2", SqlDbType.Int, 0, "")
        '
        '
        da.Fill(dt)
        '
        If dt.Rows.Count = 0 Then
            Return "ERROR: No hay datos"
        Else
            dt.Rows(0).Delete()
        End If
        '
        Try
            da.Update(dt)
            dt.AcceptChanges()
            Return "Borrado satisfactoriamente"
        Catch ex As Exception
            Return "ERROR: " & ex.Message
        End Try
    End Function
    '
End Class
